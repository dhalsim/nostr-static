{"naddr1qq24wmjfwp6rv6t8v935ujfhv4yr2wzzdfz5gqgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygrwvjurc8m8f7cq5hces9kzj7myzjlk0uq4398qfh2vv4lfgypwaqpsgqqqw4rs72gr2w":{"kind":30023,"id":"e9afc5076f13880a18b57c06600c49aa432a7b3ffa92895620f0aeb55ca3218c","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745441068,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745441068"],["d","WnIpt6igacNI7eH58BjED"],["image","https://image.nostr.build/09593373dc30cafd8174ed57a1cae310c517b17e664b2c59ab5a41d0c1aca3d8.jpg"],["title","How to Import and Export Your Nostr Notes"],["summary","Learn how to import your Nostr notes from public relays and export them into your own relay using the nak CLI tool. This step-by-step guide covers installation, fetching notes, filtering by event types, and uploading to a self-hosted relayâ€”ensuring your content is safe and under your control."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","Nostr"],["t","nak"],["t","relay"],["t","import"],["t","export"]],"content":"# How to Import and Export Your Nostr Notes\n\nThis guide will help you import your notes from various Nostr relays and export them into your own relay. This is particularly useful when you want to ensure your content is backed up or when you're setting up your own relay.\n\n## Prerequisite\n\nYour own Nostr relay (if you don't have one, check out [Part 1: How to Run Your Own Nostr Relay](https://njump.me/nevent1qqsqd24rtzchjvxh7a9ahe9xs54w04rtlcpgt499uux8kkzgpucuhmqppamhxue69uhkummnw3ezumt0d5q3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qy28wumn8ghj7un9d3shjtnyv9kh2uewd9hsz9nhwden5te0wfjkccte9ehx7um5wghxyctwvsq35amnwvaz7tmd0ykhyetvv9ujumn0wd68y6t6v5hx6eg8w8a7q))\n\n## Installing nak\n\n`nak` is a command-line tool that helps you interact with Nostr relays. Here's how to install it:\n\n### For Windows Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-windows-amd64.exe`\n3. Rename it to `nak.exe`\n4. Move it to a directory in your PATH or use it from its current location\n\n### For macOS Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-darwin-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-darwin-amd64\n   sudo mv nak-darwin-amd64 /usr/local/bin/nak\n   ```\n\n### For Linux Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-linux-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-linux-amd64\n   sudo mv nak-linux-amd64 /usr/local/bin/nak\n   ```\n\n## Getting Your Public Key in Hex Format\n\nBefore downloading your notes, you need to convert your npub (public key) to its hex format. If you have your npub, run:\n\n```bash\nnak decode npub1YOUR_NPUB_HERE\n```\n\nThis will output your public key in hex format, which you'll need for the next steps.\n\n## Downloading Your Notes\n\nTo download your notes, you'll need your public key in hex format and a list of reliable relays. Here are some popular relays you can use:\n\n- wss://eden.nostr.land/\n- wss://nos.lol/\n- wss://nostr.bitcoiner.social/\n- wss://nostr.mom/\n- wss://relay.primal.net/\n- wss://relay.damus.io/\n- wss://relay.nostr.band/\n- wss://relay.snort.social/\n\n**Note:** You should check your Nostr client's settings to find additional relays where your notes are published. Add these to the list above.\n\n### Important Event Kinds\n\nHere are some important event kinds you might want to filter for:\n\n- `0`: User Metadata (profile information)\n- `1`: Short Text Notes\n- `3`: Follow List\n- `4`: Encrypted Direct Messages\n\nGet the full list from: https://nips.nostr.com/#event-kinds\n\n### Downloading with Event Kind Filters\n\nTo download your notes with specific event kinds, use the `-k` flag followed by the kind number, use multiple if you need to. For example, to download your profile, short notes, follow list, and direct messages:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY -k 0 -k 1 -k 3 -k 4 wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events_filtered.json\n```\n\nOr to download all your content, just don't provide any `k` flag:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events.json\n```\n\nThis will create a file containing all your notes in JSON Lines format.\n\n## Uploading Your Notes to Your Relay\n\nOnce you have your `events.json` or `events_filtered.json` file, you can upload it to your own relay. Replace `YOUR_RELAY` with your relay's WebSocket URL (e.g., `wss://my-relay.nostrize.me`).\n\n```bash\nnak event YOUR_RELAY \u003c events.json\n```\n\n**Important Notes:**\n1. Make sure your relay is running and accessible\n2. The upload process might take some time depending on how many notes you have\n3. You can verify the upload by querying your relay for your notes\n\n## Verifying the Upload\n\nTo verify that your notes were successfully uploaded to your relay, run:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY YOUR_RELAY\n```\n\nThis should return the same notes that were in your `events.json` file.\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Make sure your relay is running and accessible\n2. Check that you're using the correct public key\n3. Verify that the relays in your download list are working\n4. Ensure you have proper permissions to write to your relay\n\n## Next Steps\n\n- Remember to regularly backup your notes to ensure you don't lose any content.\n- If you want to keep your friends' notes as well, add npubs that you want to import into your relay's settings (for Citrine it is \"Accept events signed by\" list), and run the commands for their pubkeys.\n","sig":"31e99a51ab751b4b29aa53e7a760431b7a08263c31c22e2d4c7a1d0b70176a9d1d197fe58c6da910231ee21d5f32d76eade71be43383fa15023e0bb661ed6d04"},"naddr1qqxnzde38q6rwde3xg6rwwpnqyxhwumn8ghj7mn0wvhxcmmvqgsqgc0uhmxycvm5gwvn944c7yfxnnxm0nyh8tt62zhrvtd3xkj8fhgrqsqqqa287qr3pc":{"kind":30023,"id":"ef7e867e4e095679178a3e524ccc4a233800ccd8b57d2a2ad059733bfda4fe98","pubkey":"0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd","created_at":1718478480,"tags":[["d","1718477124783"],["title","Restore your follow list with nak"],["summary",""],["t","nostr"],["t","nak"],["published_at","1718478475"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqqxnzde38q6rwde3xg6rwwpn2k0mcw"]],"content":"Uh-oh, you just followed someone on a new Nostr client, and it wiped your entire follow list!\n\nLet's use [nak](https://github.com/fiatjaf/nak) to check if an older version of your follow list still exists somewhere on the network:\n\n```sh\nnak req -k 3 -a YOUR_PUBKEY wss://relay.example.com\n```\n\n- Replace `YOUR_PUBKEY` with your hex pubkey (run `nak decode \u003cnpub\u003e` to get it).\n- Replace `wss://relay.example.com` with a real relay. Keep trying different relays until you find it.\n- If you've set up [NosDrive](https://nosdrive.app/), make sure to check there too, as it backs up all versions of your replaceable events.\n\nOnce you've found your follow list on a relay, let's sign a new event and republish it:\n\n```sh\nnak req -k 3 -a YOUR_PUBKEY wss://relay.old.com | jq -c '{kind, content, tags}' | nak event --sec YOUR_SECKEY wss://relay.new.com\n```\n\n- Replace `YOUR_PUBKEY` with your hex pubkey.\n- Replace `YOUR_SECKEY` with your hex secret key (run `nak decode \u003cnsec\u003e` to get it).\n- Replace `wss://relay.old.com` with the relay where you found your follow list.\n- Replace `wss://relay.new.com` with any relay where you want to create your new follow list.\n\nIf this succeeded, go ahead and run `history -c` to clear your terminal history, since you copied your private key into the terminal session.\n\nNow you can copy the new follow list to any additional relays:\n\n```sh\nnak req -k 3 -a YOUR_PUBKEY wss://relay.new.com | nak event wss://relay.other.com\n```\n\nRun this any number of times, replacing `wss://relay.other.com` each time.\n\nThat's it! ðŸŽ‰\n\nIf you couldn't find your event, you may be out of luck.\n\nTo learn more about syncing data with nak, read [Sync your data between relays with nak](https://habla.news/u/alex@gleasonator.dev/nak-sync). ","sig":"67c87fc7769b585eee2e843f4eeaceea69053636b6debbfdc82ad032bbefae81cbcb09ad2380eba5bf94ecd578311fb6536caf52477a1818a4ca1cbbdf139d71"},"naddr1qqxnzde5xvmnjwpjxgmnjdfsqyxhwumn8ghj7mn0wvhxcmmvqgsd5x8fscqypualfyu8dlqkkx539tj6dah634g4ns779wpr8gxes5grqsqqqa28zwfn4u":{"kind":30023,"id":"3e7580a2946e21a840d21ef5891329b6a46cae3b2d04b7098d5a2e13564c1eb9","pubkey":"da18e9860040f3bf493876fc16b1a912ae5a6f6fa8d5159c3de2b8233a0d9851","created_at":1743798350,"tags":[["d","1743798227950"],["title","How to Write and Publish a Wiki Event using Nak"],["summary","Short tutorial explaining how to publish wiki articles via the command line tool nak"],["t","wiki"],["t","documentation"],["t","nak"],["image","https://dvmdashbucket.nyc3.cdn.digitaloceanspaces.com/articles/wiki-tutorial.png"],["zap","da18e9860040f3bf493876fc16b1a912ae5a6f6fa8d5159c3de2b8233a0d9851","wss://purplepag.es","89"],["zap","7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c","wss://purplepag.es","1"],["zap","fa984bd7dbb282f07e16e7ae87b26a2a7b9b90b7246a44771f0cf5ae58018f52","wss://purplepag.es","5"],["zap","3bf0c63fcb93463407af97a5e5ee64fa883d107ef9e558472c4eb9aaaefa459d","wss://purplepag.es","5"],["published_at","1743798297"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpkscaxrqqs8nhaynsahuz6c6jy4wtfhkl2x4zkwrmc4cyvaqmxz3qqxnzde5xvmnjwpjxgmnjdfs5ynpp9"]],"content":"I'm making this tutorial for myself, as I plan to write many wiki pages describing DVM kinds, as a resource for DVMDash. \n\nWiki pages on Nostr are written using AsciiDoc. If you don't know ascii doc, get an LLM (like https://duck.ai) to help you format into the right syntax.\n\nHere's the test wiki page I'm going to write:\n\n\n```\n= Simple AsciiDoc Demo\n\nThis is a simple demonstration of AsciiDoc syntax for testing purposes. \n\n== Features\n\nAsciiDoc offers many formatting options that are easy to use. \n\n* Easy to learn \n* Supports rich text formatting \n* Can include code snippets \n* Works great for documentation \n\n[source,json] \n---- \n{ \"name\": \"Test\", \"version\": \"1.0\", \"active\": true } \n----\n```\n\n# We're going to use nak to publish it\n\n\nFirst, install `nak` if you haven't already\n\n```\ngo install github.com/fiatjaf/nak@latest\n```\n\n*Note: if you don't use Go a lot, you may need to first install it and then add it to your path so the `nak` command is recognized by the terminal*\n\n\n```\n# this is how to add it to your path on mac if using zsh\necho 'export PATH=$PATH:$(go env GOPATH)/bin' \u003e\u003e ~/.zshrc\n```\n\nAnd here's how to sign and publish this event with nak.\n\n*First, if you want to use your own nostr sec key, you can set the env variable to it and nak will use that if no secret key is specified*\n\n```\n# replace with your full secret key\nexport NOSTR_SECRET_KEY=\"nsec1zcdn...\"\n```\n\nNow to sign and publish the event:\n\n*Note: inner double quotes need to be escaped with a `\\` before them in order to keep the formatting correct, because we're doing this in the terminal*\n\n```\nnak event -k 30818 -d \"dvm-wiki-page-test\" -t 'title=dvm wiki page test'  -c \"= Simple AsciiDoc Demo\\n\\nThis is a simple demonstration of AsciiDoc syntax for testing purposes. \\n\\n== Features\\n\\nAsciiDoc offers many formatting options that are easy to use. \\n\\n* Easy to learn \\n* Supports rich text formatting \\n* Can include code snippets \\n* Works great for documentation \\n\\n[source,json] \\n---- \\n{ \\\"name\\\": \\\"Test\\\", \\\"version\\\": \\\"1.0\\\", \\\"active\\\": true } \\n----\" wss://relay.primal.net wss://relay.damus.io wss://relay.wikifreedia.xyz\n```\n\nYou've now published your first wiki page! If done correctly, it will show up on wikistr.com, like mine did here: https://wikistr.com/dvm-wiki-page-test*da18e9860040f3bf493876fc16b1a912ae5a6f6fa8d5159c3de2b8233a0d9851 \n\nand on wikifreedia.xyz https://wikifreedia.xyz/dvm-wiki-page-test/dustind@dtdannen.github.io","sig":"f637a10733efee1e76613fd136b8b8d1c6acdabb50ab6c8aefa075966cc05a4a35a9d988ddf328fc7f75f96d6004f2bf26bcd7e823dfe436fe2fbb7d6b9e16d3"},"naddr1qqxx2an9de68xtt2wdhkumqpp4mhxue69uhkummn9ekx7mqzyqzxrl97e3xrxazrnyeddw83zf5uekmue9e667js4cmzmvf4536d6qcyqqq823czsrh7l":{"kind":30023,"id":"252f489b9f2fc3094969c7213a4a6474ac359aaae3373228139bd07dfcea2b16","pubkey":"0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd","created_at":1723831011,"tags":[["d","events-jsonl"],["title","events.jsonl: the Nostr interchange format"],["summary",""],["t","nostr"],["t","jsonl"],["t","nak"],["published_at","1723831005"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqqxx2an9de68xtt2wdhkumqajfqqc"],["t","importing"]],"content":"Nostr events are transferred between clients and relays over WebSocket, but that requires servers to be online. A universal file format is needed to store events for backup and transfer between people and systems.\n\n[JSONL](https://jsonlines.org/) is a simple format that stores one JSON object per line. This is ideal for Nostr events, and is already compatible with a bunch of existing tools including [nak](https://github.com/fiatjaf/nak), [strfry](https://github.com/hoytech/strfry), and [Ditto](https://gitlab.com/soapbox-pub/ditto). It is memory-effecient because only one line needs to be processed at a time, and it is universally compatible because it's just Nostr events.\n\n## Storing Events\n\nJSONL files should end in a `.jsonl` file extension. Each line should have a complete, valid Nostr event.\n\n```sh\n# Example storing jsonl events with nak\nnak req wss://ditto.pub/relay \u003e events.jsonl\n```\n\n## Importing Events\n\nYou can `cat` a JSONL file to stdin of various programs.\n\n```sh\n# Example importing jsonl events with nak\ncat events.jsonl | nak event wss://ditto.pub/relay\n```\n\n## Filtering Events\n\nUse the `jq` command to filter down an JSONL file.\n\n```sh\n# Get only kind 0 events\njq -c 'select(.kind == 0)' events.jsonl\n```\n\nYou can filter before importing:\n\n```sh\n# Get only kind 3 events then import them with nak\njq -c 'select(.kind == 3)' events.jsonl | nak event wss://ditto.pub/relay\n```\n\nOr filter while exporting:\n\n```sh\n# Get all events and then post-filter them\nnak req wss://ditto.pub/relay | jq -c 'select(.kind == 3)' \u003e events.jsonl\n```\n\nOf course you can chain many shell commands together to do all sorts of useful things!\n\n## Sharing Events\n\nJSONL events can be shared on cloud services, compressed, emailed, transferred with rsync, or any other method. Another powerful method is to host the file on an HTTP server, allowing users to `curl` it and pipe it directly into other programs.\n\n## Suggestions to Relay and Client Developers\n\nRelay and client developers should allow users to export/import events from their software in JSONL format.\n\nFor relays, since the public interface is often restricted, relay software should add direct import/export of jsonl. That way relay operators would be able to shell in and run a command to get events in jsonl, and to import from jsonl. Ideally these commands would use stdin and stdout so they can be piped to other commands for filtering or direct transfer.\n\nClients should also offer an import/export screen inside the app in jsonl format. I would suggest a separate export of all \"your\" data, and another one for all cached data.\n\n## Usage With Existing Tools\n\nHere are examples of how to use JSONL events with some existing tools.\n\n### nak\n\nChange the relay to your desired relay. Try `nak help req` to see all the available filtering options.\n\n```sh\n# Export\nnak req wss://ditto.pub/relay \u003e events.jsonl\n\n# Import\ncat events.jsonl | nak event wss://ditto.pub/relay\n```\n\n### strfry\n\nSee strfry's [README](https://github.com/hoytech/strfry#importing-data) for more information. `--since` and `--until` flags are supported during export.\n\n```sh\n# Export\n./strfry export \u003e events.jsonl\n\n# Import\ncat events.jsonl | ./strfry import\n```\n\n### Ditto\n\n```sh\n# Export\ndeno task db:export \u003e events.jsonl\n\n# Import\ncat events.jsonl | deno task db:import\n```","sig":"156555a7783c6e7c0c91db5e7b0a30a66ca8d0d864e55e12320b4ebe00c5f086ec1197d485dc867489d1504aec62afb774b80ab56e5d6ab7b3a8305698756f2a"},"naddr1qqykkmn00qkkyet5vyq3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qgsqgc0uhmxycvm5gwvn944c7yfxnnxm0nyh8tt62zhrvtd3xkj8fhgrqsqqqa28awrtk0":{"kind":30023,"id":"1b0cb9e400585b5643d4c808129a7ed9d088bd59e74811d6c443dcaf9df2502b","pubkey":"0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd","created_at":1731434328,"tags":[["d","knox-beta"],["title","Announcing Knox (Beta)"],["summary","knox is a new Nostr bunker CLI for running a NIP-46 remote signer and granting credentials to members of your team."],["t","nostr"],["t","nip46"],["t","bunker"],["t","knox"],["t","nak"],["image","https://image.nostr.build/381aa7a45e675994e6ec4198965d54da72b6f4c42613588297a63c58592a254c.jpg"],["published_at","1731434319"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqqykkmn00qkkyet5vyhjuvda"],["t","install"]],"content":"On Nostr, I am running several marketing accounts for my projects: Ditto, The Mostr Bridge, and Cobrafuma. But I want other people to be able to post from those accounts. In fact, I want to hire a \"social media manager\" someday (for when my wife is not available ðŸ˜‚).\n\nThis is a pretty basic need for social media, but of course on Nostr it isn't basic at all, because private keys have nuclear potential if leaked. Even if you trust the person, a small mistake could be disastrous.\n\nTo solve this, we need a bunker.\n\n## What is a bunker?\n\nA bunker (aka \"remote signer\") allows you to store your keys on your computer, but give others access. Once the other person is granted access, they can send commands to your computer like `sign_event` and `get_public_key`, and your computer will perform those operations without needing to expose the actual key.\n\n![Nostr Bunker](https://image.nostr.build/8b2b28a29502d79a58194cae2edc0d151128a2acbc0d9f8358026d988d771550.png)\n\nIn reality the UX is not so technical. Your bunker generates a unique URI containing the connection details, and the other person pastes it into the login screen. Everything else happens automatically.\n\nAs for the running the bunker, you can run it on a VPS, a laptop, an old computer in your house, a Raspberry Pi, or even an Android phone.\n\nThe first bunker was an Android app called Nostr Connect. This lead to the creation of nsecBunker (a hosted service), nsec.app (a bunker that runs inside your web browser), and Amber (another Android app).\n\nThese days nsec.app and Amber are the only ones being actively developed, but due to running in restricted environments (web and Android respectively), they don't offer the level of 24/7 reliability I wanted in a bunker. If you are a single user managing your own keys I still recommend Amber, but for doling out credentials to your team, you might want knox.\n\n## Introducing Knox\n\n![Knox CLI Screenshot](https://image.nostr.build/350617062b88fe891d053739ba40f38c2d8a34f0de099424eb632fce0685fc1a.png)\n\nknox is a command-line tool that manages keys, generates bunker URIs, and runs a bunker server. It is still beta software, but I am using it successfully today to post on Ditto.\n\nknox is inspired by the wonderful [`nak bunker`](https://github.com/fiatjaf/nak) command, which almost solved my problem but has no way to store credentials. So I created my own command-line bunker that you can run again and again.\n\n![knox.bunker thumbnail](https://image.nostr.build/81462ac0a645067b4e546f78d732caa9523d1873641e9519cc877f81d1a36c19.png)\n\nMost notably, knox introduces a portable `.bunker` file format for storing keys and connection details. It's encrypted with a password, which you have to type every time you want to add or remove keys, generate new URIs, and when you start the bunker.\n\nWith knox you can have one bunker file, or many. It is loosely inspired by the KeePass `.kbdx` idea.\n\nknox is written in TypeScript, but it's available as a precompiled executable on Linux, MacOS, and Windows thanks to `deno compile`.\n\n## Getting Started\n\nTo install knox, I've prepared a simple setup script that will detect your OS and install the knox command in your path:\n\n```sh\ncurl https://dl.soapbox.pub/install/knox.sh | sh\n```\n\nYou can also grab a [precompiled binary](https://gitlab.com/soapbox-pub/knox#install) if you don't want to run the script.\n\n## Commands\n\nOnce installed, run `knox` to see a list of supported commands. It should look something like this:\n\n```\nUsage: knox [options] [command]\n\nNostr bunker with encrypted storage.\n\nOptions:\n  -V, --version                    output the version number\n  -f, --file \u003cfile\u003e                path to the bunker file (default: \"knox.bunker\")\n  -h, --help                       display help for command\n\nCommands:\n  init                             initialize a new bunker\n  add \u003cname\u003e                       add a new key to the bunker\n  remove \u003cname\u003e                    remove a key from the bunker\n  uri [options] \u003cname\u003e \u003crelay...\u003e  generate a bunker URI for a key\n  revoke \u003csecret\u003e                  revoke an authorization\n  pubkey [options] \u003cname\u003e          show the public key of a secret key\n  status [name]                    show the status of the bunker\n  start                            start the bunker daemon\n  change                           change the passphrase of the bunker\n  export [options]                 export keys from the bunker\n  update [options] [ref]           update knox to the latest version\n  help [command]                   display help for command\n```\n\nRun `knox init` to create a new bunker file. Then use `knox add alex` (replace with your own name) to add a key, then `knox uri alex` to get a connection string. Finally, run `knox start` to start the bunker.\n\nWhile the bunker is running, you can continue to run commands like `knox add` and `knox uri` in another tab, and the bunker will detect the file changes and automatically refresh.\n\n![Knox Status command results](https://image.nostr.build/f9753313bb8bca2653cb3fafbc72d1804aae187ae00d467ceeff25e6aaad3f05.png)\n\nAnother good one is `knox status`, which shows a list of keys and whether any of their URIs are being utilized. `knox status \u003ckey\u003e` can show the individual connections for a specific key, and `knox revoke \u003csecret\u003e` can revoke an individual connection.\n\n## Bunker Where?\n\nknox needs internet connectivity to connect to relays, but it does not need to expose any ports to the outside world, so the ideal place might be on a desktop computer in your living room. This might be considered more secure than a VPS in a datacenter, depending on your circumstances.\n\n![Living room bunker PC](https://image.nostr.build/381aa7a45e675994e6ec4198965d54da72b6f4c42613588297a63c58592a254c.jpg)\n\nI am running knox on an old Dell computer under my TV, which is a cheap and simple solution. It's connected to a backup battery in case the power flickers, but a prolonged outage would require starting the bunker again manually. I also suggest running the bunker in `screen` or a similar tool so you can reconnect and view the logs over ssh on your home network.\n\nIt's not suggested to run knox in systemd, because knox requires manually entering the encryption password when it starts. Any solution to store the password to disk, or pass it through a command-line argument, would compromise security.\n\n## What's Next?\n\nFor now, knox is meeting my needs. As the idea evolves I expect to make more changes, and possibly improvements to the `.bunker` format if anyone else decides to use it. Feel free to drop any suggestions on [GitLab](https://gitlab.com/soapbox-pub/knox/-/issues)!\n\nAnother interesting idea would be to build a UI to manage the `.bunker` file, or to offer hosted bunker (although I am kind of against this, unless the hoster is just cloud sync service and the bunker is decrypted locally within the browser, similar to KeeWeb).","sig":"33a89e0eebd98eb87de2df343cc0344de2f25937382fcca1d7f5b6e7d167b0491194f9b0e21352f83f2124796192e8a9c996a4d9be9cb390a131fd70c7be407e"},"naddr1qqyxuctt94ehjmnrqyxhwumn8ghj7mn0wvhxcmmvqgsqgc0uhmxycvm5gwvn944c7yfxnnxm0nyh8tt62zhrvtd3xkj8fhgrqsqqqa28gmnsk4":{"kind":30023,"id":"8cfe9cb72cc3b22084cae6bd509d27cf7699a88106b2c30898a0a99941530663","pubkey":"0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd","created_at":1715807209,"tags":[["d","nak-sync"],["title","Sync your data between relays with nak"],["summary",""],["t","nostr"],["t","nak"],["published_at","1715807202"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqqyxuctt94ehjmnrfqzdr3"]],"content":"[nak](https://github.com/fiatjaf/nak) is an awesome command-line tool written in Rust (jk, written in Go) for doing Nostr stuff. I use it on a daily basis to talk to relays and gather events.\n\nUsing nak, you can sync your data between one relay and another like this:\n\n```sh\nnak req -a \u003cpubkey\u003e \u003crelay-1\u003e | nak event \u003crelay-2\u003e\n```\n\nFor example:\n\n```sh\nnak req -a 0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd wss://gleasonator.dev/relay | nak event wss://slime.church/relay\n```\n\nThis downloads all data by the **author** (`-a`) from relay 1, and pipes it into relay 2.\n\nMost relays only return about 100 events at a time, though. To sync _everything_ you will need to implement some sort of pagination with `since` and `until` filters.\n\nMost commonly I just need to sync my profile data to a new relay, which can be done with the `-k` (kind) flag. You can pass multiple `-k` flags, eg:\n\n```sh\nnak req -k 0 -k 3 -k 10000 -k 10001 -k 10002 -k 10003 -a 0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd wss://gleasonator.dev/relay | nak event wss://slime.church/relay\n```\n\nThis will migrate your profile, your follow list, your relay list, your mute list, pinned posts, and your bookmarks to the new relay.\n\nIf you find yourself doing this often, you can drop a little alias in your bashrc/zshrc:\n\n```sh\nalias nsync=\"nak req -k 0 -k 3 -k 10000 -k 10001 -k 10002 -k 10003 -a 0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd wss://gleasonator.dev/relay | nak event\"\n```\n\nThen you'll just `nsync \u003crelay\u003e` to copy data from your main relay to another relay!","sig":"e02ffffdce22bc78b3ede361fd22a9f474817393a69233aab6ecddbbe9c4cb8816b18884dec219d93846805de8c8c34e00af2f915d69dda605dd85bc304478b5"}}