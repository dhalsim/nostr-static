{"naddr1qq2j6ezsgu69j7n92cmxxmfsgyeyyvjtxfuk7qgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygrwvjurc8m8f7cq5hces9kzj7myzjlk0uq4398qfh2vv4lfgypwaqpsgqqqw4rsklwcek":{"kind":30023,"id":"e053bd17c3e36ea81d69ae382aefedf0f53188fc4f95e67b21ce35a38dc9a1e2","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745439814,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745183349"],["d","-dPG4YzeV6cm0A2B2K2yo"],["image","https://image.nostr.build/f708db07b85c002b20b3159b48447d51cbcb0bae0f5717ce6dbc060580c8b35d.jpg"],["title","How to Run Your Own Nostr Relay on Android with Cloudflare Domain"],["summary","Step-by-step guide to running a personal Nostr relay on Android using Citrine and Cloudflare Tunnels. Learn how to set up secure WebSocket connections, manage relay lists, and maintain a reliable private relay with your custom domain."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","nostr"],["t","relay"],["t","citrine"],["t","cloudflare"],["t","tunnel"],["t","outbox"],["p","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","mention"]],"content":"# How to Run Your Own Nostr Relay on Android with Cloudflare Domain\n\n## Prerequisites\n1. Install Citrine on your Android device:\n   - Visit https://github.com/greenart7c3/Citrine/releases\n   - Download the latest release using:\n     - zap.store\n     - Obtainium\n     - F-Droid\n     - Or download the APK directly\n   - **Note:** You may need to enable \"Install from Unknown Sources\" in your Android settings\n\n2. Domain Requirements:\n   - Purchase a domain if you don't have one\n   - Transfer your domain to Cloudflare if it's not already there (for free SSL certificates and cloudflared support)\n\n3. Tools to use:\n   - nak (the nostr army knife):\n     - Download from https://github.com/fiatjaf/nak/releases\n     - Installation steps:\n       - For Linux/macOS:\n         ```bash\n         # Download the appropriate version for your system\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-linux-amd64  # for Linux\n         # or\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-darwin-amd64  # for macOS\n         \n         # Make it executable\n         chmod +x nak-*\n         \n         # Move to a directory in your PATH\n         sudo mv nak-* /usr/local/bin/nak\n         ```\n       - For Windows:\n         ```batch\n         # Download the Windows version\n         curl -L -o nak.exe https://github.com/fiatjaf/nak/releases/latest/download/nak-windows-amd64.exe\n         \n         # Move to a directory in your PATH (e.g., C:\\Windows)\n         move nak.exe C:\\Windows\\nak.exe\n         ```\n     - Verify installation:\n       ```bash\n       nak --version\n       ```\n\n## Setting Up Citrine\n1. Open the Citrine app\n2. Start the server\n3. You'll see it running on `ws://127.0.0.1:4869` (local network only)\n4. Go to settings and paste your npub into \"Accept events signed by\" inbox and press the + button. This prevents others from publishing events to your personal relay.\n\n## Installing Required Tools\n1. Install Termux from Google Play Store\n2. Open Termux and run:\n\n```bash\npkg update \u0026\u0026 pkg install wget\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64.deb\ndpkg -i cloudflared-linux-arm64.deb\n```\n\n## Cloudflare Authentication\n1. Run the authentication command:\n```bash\ncloudflared tunnel login\n```\n2. Follow the instructions:\n   - Copy the provided URL to your browser\n   - Log in to your Cloudflare account\n   - If the URL expires, copy it again after logging in\n\n## Creating the Tunnel\n1. Create a new tunnel:\n```bash\ncloudflared tunnel create \u003cTUNNEL_NAME\u003e\n```\n   - Choose any name you prefer for your tunnel\n   - Copy the tunnel ID after creating the tunnel\n\n2. Create and configure the tunnel config:\n```bash\ntouch ~/.cloudflared/config.yml\nnano ~/.cloudflared/config.yml\n```\n\n3. Add this configuration (replace the placeholders with your values):\n```yaml\ntunnel: \u003cTUNNEL_UUID\u003e\ncredentials-file: /data/data/com.termux/files/home/.cloudflared/\u003cTUNNEL_UUID\u003e.json\ningress:\n  - hostname: nostr.yourdomain.com\n    service: ws://localhost:4869\n  - service: http_status:404\n```\n   - **Note:** In nano editor:\n     - `CTRL+O` and Enter to save\n     - `CTRL+X` to exit\n   - **Note:** Check the credentials file path in the logs\n\n4. Validate your configuration:\n```bash\ncloudflared tunnel validate\n```\n\n5. Start the tunnel:\n```bash\ncloudflared tunnel run my-relay\n```\n\n## Preventing Android from Killing the Tunnel\nRun these commands to maintain tunnel stability:\n```bash\ndate \u0026\u0026 apt install termux-tools \u0026\u0026 termux-setup-storage \u0026\u0026 termux-wake-lock\necho \"nameserver 1.1.1.1\" \u003e $PREFIX/etc/resolv.conf\n```\n\n**Tip:** You can open multiple Termux sessions by swiping from the left edge of the screen while keeping your tunnel process running.\n\n## Updating Your Outbox Model Relays\n\nOnce your relay is running and accessible via your domain, you'll want to update your relay list in the Nostr network. This ensures other clients know about your relay and can connect to it.\n\n### Decoding npub (Public Key)\n\nPrivate keys (nsec) and public keys (npub) are encoded in bech32 format, which includes:\n- A prefix (like nsec1, npub1 etc.)\n- The encoded data\n- A checksum\n\nThis format makes keys:\n- Easy to distinguish\n- Hard to copy incorrectly\n\nHowever, most tools require these keys in hexadecimal (hex) format.\n\nTo decode an npub string to its hex format:\n\n```bash\nnak decode nostr:npub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4\n```\n\nChange it with your own npub.\n\n```bash\n{\n  \"pubkey\": \"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8\"\n}\n```\n\nCopy the pubkey value in quotes.\n\n### Create a kind 10002 event with your relay list:\n\n- Include your new relay with write permissions\n- Include other relays you want to read from and write to, omit 3rd parameter to make it both read and write\n\nExample format:\n\n```json\n{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://your-relay-domain.com\", \"write\"],\n    [\"r\", \"wss://eden.nostr.land/\"],\n    [\"r\", \"wss://nos.lol/\"],\n    [\"r\", \"wss://nostr.bitcoiner.social/\"],\n    [\"r\", \"wss://nostr.mom/\"],\n    [\"r\", \"wss://relay.primal.net/\"],\n    [\"r\", \"wss://nostr.wine/\", \"read\"],\n    [\"r\", \"wss://relay.damus.io/\"],\n    [\"r\", \"wss://relay.nostr.band/\"],\n    [\"r\", \"wss://relay.snort.social/\"]\n  ],\n  \"content\": \"\"\n}\n```\n\nSave it to a file called `event.json`\n\n**Note:** Add or remove any relays you want. To check your existing 10002 relays:\n  - Visit https://nostr.band/?q=by%3Anpub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4+++kind%3A10002\n  - nostr.band is an indexing service, it probably has your relay list.\n  - Replace `npub1xxx` in the URL with your own npub\n  - Click \"VIEW JSON\" from the menu to see the raw event\n  - Or use the `nak` tool if you know the relays\n    ```bash\n    nak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n    ```\n\n    Replace `\u003cyour-pubkey\u003e` with your public key in hex format (you can get it using `nak decode \u003cyour-npub\u003e`)\n\n2. Sign and publish the event:\n   - Use a Nostr client that supports kind 10002 events\n   - Or use the `nak` command-line tool:\n   ```bash\n   nak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n   ```\n\n**Important Security Notes:**\n1. Never share your nsec (private key) with anyone\n2. Consider using NIP-49 encrypted keys for better security\n3. Never paste your nsec or private key into the terminal. The command will be saved in your shell history, exposing your private key. To clear the command history:\n   - For bash: use `history -c`\n   - For zsh: use `fc -W` to write history to file, then `fc -p` to read it back\n   - Or manually edit your shell history file (e.g., `~/.zsh_history` or `~/.bash_history`)\n4. if you're using `zsh`, use `fc -p` to prevent the next command from being saved to history\n5. Or temporarily disable history before running sensitive commands:\n\n```bash\nunset HISTFILE\nnak key encrypt ...\nset HISTFILE\n```\n\n## How to securely create NIP-49 encypted private key\n\n```bash\n# Read your private key (input will be hidden)\nread -s SECRET \n# Read your password (input will be hidden)\nread -s PASSWORD\n# encrypt command\necho \"$SECRET\" | nak key encrypt \"$PASSWORD\"\n# copy and paste the ncryptsec1 text from the output\nread -s ENCRYPTED\nnak key decrypt \"$ENCRYPTED\"\n# clear variables from memory\nunset SECRET PASSWORD ENCRYPTED\n```\n\nOn a Windows command line, to read from stdin and use the variables in `nak` commands, you can use a combination of `set /p` to read input and then use those variables in your command. Here's an example:\n\n```bash\n@echo off\nset /p \"SECRET=Enter your secret key: \"\nset /p \"PASSWORD=Enter your password: \"\n\necho %SECRET%| nak key encrypt %PASSWORD%\n\n:: Clear the sensitive variables\nset \"SECRET=\"\nset \"PASSWORD=\"\n```\n\nIf your key starts with `ncryptsec1`, the `nak` tool will securely prompt you for a password when using the `--sec` parameter, unless the command is used with a pipe `\u003c \u003e` or `|`. \n\n```bash\nnak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n```\n\n3. Verify the event was published:\n   - Check if your relay list is visible on other relays\n   - Use the `nak` tool to fetch your kind 10002 events:\n```bash\nnak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n```\n\n4. Testing your relay:\n   - Try connecting to your relay using different Nostr clients\n   - Verify you can both read from and write to your relay\n   - Check if events are being properly stored and retrieved\n   - **Tip:** Use multiple Nostr clients to test different aspects of your relay\n\n**Note:** If anyone in the community has a more efficient method of doing things like updating outbox relays, please share your insights in the comments. Your expertise would be greatly appreciated!\n","sig":"abd9291f7bc17a6d396b33f5a5f8f2dd7e8c6c1fe81b41ef7c28b2132c0af012e2686e453304e78f8d9875b34dd4d6257e475b7debfd39af983cff578144a21c"},"naddr1qq2yx6t5wf5kuefdxqkn2tfn956hs6tnde6szrthwden5te0dehhxtnvdakqyg9c8ehc985m8c8nlzxuxlpf987ex99jhaarh3payhn2yqa88snhtqpsgqqqw4rstflqpv":{"kind":30023,"id":"4c3fff39eeb158bb0e3d880ee4a61358f8beabfbb6056bdbf9b42442ca99119f","pubkey":"b83e6f829e9b3e0f3f88dc37c2929fd9314b2bf7a3bc43d25e6a203a73c27758","created_at":1729865954,"tags":[["title","Citrine 0.5.3"],["t","citrine"],["published_at","1729865939"],["d","Citrine-0-5-3-5xisnu"]],"content":"## Citrine 0.5.4\n\n- Fix notification icon size\n- Fix loading screen\n- Update dependencies\n\nDownload it with [zap.store](https://zap.store/download), [Obtainium](https://github.com/ImranR98/Obtainium), [f-droid](https://f-droid.org/packages/com.greenart7c3.citrine) or download it directly in the [releases page](https://github.com/greenart7c3/Citrine/releases/tag/v0.5.4)\n\nIf you like my work consider making a [donation](https://greenart7c3.com)\n\n## Verifying the release\n\nIn order to verify the release, you'll need to have `gpg` or `gpg2` installed on your system. Once you've obtained a copy (and hopefully verified that as well), you'll first need to import the keys that have signed this release if you haven't done so already:\n\n```bash\ngpg --keyserver hkps://keys.openpgp.org --recv-keys 44F0AAEB77F373747E3D5444885822EED3A26A6D\n```\n\nOnce you have his PGP key you can verify the release (assuming `manifest-v0.5.4.txt` and `manifest-v0.5.4.txt.sig` are in the current directory) with:\n\n```bash\ngpg --verify manifest-v0.5.4.txt.sig manifest-v0.5.4.txt\n```\n\nYou should see the following if the verification was successful:\n\n```bash\ngpg: Signature made Fri 13 Sep 2024 08:06:52 AM -03\ngpg:                using RSA key 44F0AAEB77F373747E3D5444885822EED3A26A6D\ngpg: Good signature from \"greenart7c3 \u003cgreenart7c3@proton.me\u003e\"\n```\n\nThat will verify the signature on the main manifest page which ensures integrity and authenticity of the binaries you've downloaded locally. Next, depending on your operating system you should then re-calculate the sha256 sum of the binary, and compare that with the following hashes:\n\n```bash\ncat manifest-v0.5.4.txt\n```\n\nOne can use the `shasum -a 256 \u003cfile name here\u003e` tool in order to re-compute the `sha256` hash of the target binary for your operating system. The produced hash should be compared with the hashes listed above and they should match exactly.","sig":"f5984af1373090c8e5b9adca0f18f013a1a9e6ca11dc4c9fe2bf67615acebc36a60cdeda8b4ce65c823e860483445108a2d5b700788779c079914373e35a9851"},"naddr1qq652mtsdamk2unfdenj6nmsv4hxuetnwvk4gmms948x7um5wgk5zurswvkkvmmj94qkuerjda5kgtfsd94x2vr2qyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyqlhwrt96wnkf2w9edgr4cfruchvwkv26q6asdhz4qg08pm6w3djgqcyqqq823cpdnccd":{"kind":30023,"id":"5825fdcf293fe224fb9ead098f1705f42736af19a67a705385079eaf2d1df379","pubkey":"3f770d65d3a764a9c5cb503ae123e62ec7598ad035d836e2a810f3877a745b24","created_at":1730223500,"tags":[["title","Empowering Openness: Top Nostr Apps for Android"],["image","https://cdn.satellite.earth/c0533fabe612e77d76360497062765f2adde346cd2ce32b273254968c9bcfa8b.jpg"],["published_at","1730223272"],["d","Empowering-Openness-Top-Nostr-Apps-for-Android-0ije0j"],["summary","This article dives into the growing selection of powerful Nostr apps for Android—Amber, Citrine, Pokey, and zap.store—that are reshaping the landscape of self sovereign mobile technology. Each app provides a unique function in the Nostr ecosystem, from secure key management to real-time notifications, relays, and app discovery. Together, they highlight the openness and flexibility of Android as a platform, offering users enhanced security, control, and community-driven features in the world of Nostr."],["t","android"],["t","amber"],["t","citrine"],["t","pokey"],["t","zap.store"],["t","mobile"]],"content":"**Amber**\n\n[Amber](https://github.com/greenart7c3/Amber) is a Nostr event signer for Android that allows users to securely segregate their private key (nsec) within a single, dedicated application. Designed to function as a NIP-46 signing device, Amber ensures your smartphone can sign events without needing external servers or additional hardware, keeping your private key exposure to an absolute minimum. This approach aligns with the security rationale of NIP-46, which states that each additional system handling private keys increases potential vulnerability. With Amber, no longer do users need to enter their private key into various Nostr applications.\n\n\u003cimg src=\"https://cdn.satellite.earth/b42b649a16b8f51b48f482e304135ad325ec89386b5614433334431985d4d60d.jpg\"\u003e\n\nAmber is supported by a growing list of apps, including [Amethyst](https://www.amethyst.social/), [0xChat](https://0xchat.com/#/), [Voyage](https://github.com/dluvian/voyage), [Fountain](https://fountain.fm/), and [Pokey](https://github.com/KoalaSat/pokey), as well as any web application that supports NIP-46 NSEC bunkers, such as [Nostr Nests](https://nostrnests.com), [Coracle](https://coracle.social), [Nostrudel](https://nostrudel.ninja), and more. With expanding support, Amber provides an easy solution for secure Nostr key management across numerous platforms.\n\n\u003cimg src=\"https://cdn.satellite.earth/5b5d4fb9925fabb0005eafa291c47c33778840438438679dfad5662a00644c90.jpg\"\u003e\n\nAmber supports both native and web-based Nostr applications, aiming to eliminate the need for browser extensions or web servers. Key features include offline signing, multiple account support, and NIP-46 compatibility, and includes a simple UI for granular permissions management. Amber is designed to support signing events in the background, enhancing flexibility when you select the \"remember my choice\" option, eliminating the need to constantly be signing events for applications that you trust. You can download the app from it's [GitHub](https://github.com/greenart7c3/Amber) page, via [Obtainium ](https://github.com/ImranR98/Obtainium)or Zap.store.\n\nTo log in with Amber, simply tap the \"Login with Amber\" button or icon in a supported application, or you can paste the NSEC bunker connection string directly into the login box. For example, use a connection string like this: bunker://npub1tj2dmc4udvgafxxxxxxxrtgne8j8l6rgrnaykzc8sys9mzfcz@relay.nsecbunker.com.\n\n\u003cimg src=\"https://cdn.satellite.earth/ca2156bfa084ee16dceea0739e671dd65c5f8d92d0688e6e59cc97faac199c3b.jpg\"\u003e\n\n---\n\n**Citrine**\n\n[Citrine](https://github.com/greenart7c3/Citrine) is a Nostr relay built specifically for Android, allowing Nostr clients on Android devices to seamlessly send and receive events through a relay running directly on their smartphone. This mobile relay setup offers Nostr users enhanced flexibility, enabling them to manage, share, and back up all their Nostr data locally on their device. Citrine’s design supports independence and data security by keeping data accessible and under user control.\n\n\u003cimg src=\"https://cdn.satellite.earth/46bbc10ca2efb3ca430fcb07ec3fe6629efd7e065ac9740d6079e62296e39273.jpg\"\u003e\n\nWith features tailored to give users greater command over their data, Citrine allows easy export and import of the database, restoration of contact lists in case of client malfunctions, and detailed relay management options like port configuration, custom icons, user management, and on-demand relay start/stop. Users can even activate TOR access, letting others connect securely to their Nostr relay directly on their phone. Future updates will include automatic broadcasting when the device reconnects to the internet, along with content resolver support to expand its functionality.\n\nOnce you have your Citrine relay fully configured, simply add it to the Private and Local relay sections in Amethyst's relay configuration.\n\n\u003cimg src=\"https://cdn.satellite.earth/6ea01b68009b291770d5b11314ccb3d7ba05fe25cb783e6e1ea977bb21d55c09.jpg\"\u003e\n\n---\n\n**Pokey**\n\n[Pokey](https://github.com/KoalaSat/pokey) for Android is a brand new, real-time notification tool for Nostr. Pokey allows users to receive live updates for their Nostr events and enabling other apps to access and interact with them. Designed for seamless integration within a user's Nostr relays, Pokey lets users stay informed of activity as it happens, with speed and the flexibility to manage which events trigger notifications on their mobile device.\n\n\u003cimg src=\"https://cdn.satellite.earth/62ec76cc36254176e63f97f646a33e2c7abd32e14226351fa0dd8684177b50a2.jpg\"\u003e\n\nPokey currently supports connections with Amber, offering granular notification settings so users can tailor alerts to their preferences. Planned features include broadcasting events to other apps, authenticating to relays, built-in Tor support, multi-account handling, and InBox relay management. These upcoming additions aim to make Pokey a fantastic tool for Nostr notifications across the ecosystem.\n\n---\n\n**Zap.store**\n\n[Zap.store](https://github.com/zapstore/zapstore/) is a permissionless app store powered by Nostr and your trusted social graph. Built to offer a decentralized approach to app recommendations, zap.store enables you to check if friends like Alice follow, endorse, or verify an app’s SHA256 hash. This trust-based, social proof model brings app discovery closer to real-world recommendations from friends and family, bypassing centralized app curation. Unlike conventional app stores and other third party app store solutions like Obtainium, zap.store empowers users to see which apps their contacts actively interact with, providing a higher level of confidence and transparency.\n\n\u003cimg src=\"https://cdn.satellite.earth/fd162229a404b317306916ae9f320a7280682431e933795f708d480e15affa23.jpg\"\u003e\n\nCurrently available on Android, zap.store aims to expand to desktop, PWAs, and other platforms soon. You can get started by installing [Zap.store](https://github.com/zapstore/zapstore/) on your favorite Android device, and install all of the applications mentioned above.\n\n---\n\nAndroid's openness goes hand in hand with Nostr's openness. Enjoy exploring both expanding ecosystems. ","sig":"12752b565426d2d318090601959c68d4a56ac61e89c353148e02ae8440ed926e277f09404b5110f76b97294f22057db8ce06291b8dc5ca5532713a6c24b98d67"},"naddr1qqxnzdejx56nyv3j8qervvejqyxhwumn8ghj7mn0wvhxcmmvqgsd03kszje59q2m52wy3u6yne8squ7lsn626kq2u9e48qzp564mdwqrqsqqqa28ncp3pm":{"kind":30023,"id":"03643a16e2cfb66ad9db1ea1893221286fd3b40a3dae9d26dfcd2666834f4503","pubkey":"d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8","created_at":1732387247,"tags":[["client","YakiHonne","YakiHonne"],["d","1725522282632"],["image","https://img-21.ccm2.net/1QUzag2ISOf5Q_bvH5V8LVwNp38=/2509x/03dec81705f84e21968ae481821c36ad/ccm-faq/117960478_m.jpg"],["title","Android をローカルリレーサーバー化して Tor で公開する方法"],["summary","How To Set Up Android As A Local P2P Relay For Nostr."],["published_at","1725462000"],["t","nostr"],["t","p2p"],["t","relay"],["t","android"],["t","citrine"],["t","orbot"],["t","tor"]],"content":"こんにちは！kohei です。\n\n久々のエントリ投下ですが、今回は先日弊 TL で話題になっていた、Android を P2P のローカルリレーサーバー化して Tor で公開する方法を紹介していこうと思います。\n\n## 用意するもの\n\n1. Android 端末\n2. Orbot\n3. Citrine\n4. Amethyst\n\n## 前提と下準備\n\n今回は、Orbot の詳細設定は省いて、Power User Mode の設定が完了している前提でお話を進めます。\nAndroid 端末を用意して、2~4 のアプリをインストールしておいてください。\n\n## 設定方法\n\nそれでは早速設定していきましょう。\nまず、Citrine を起動して、Settings のタブからローカルリレーの詳細を設定します。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521258191-YAKIHONNES3.png)\n\n設定が終了したら、ローカルリレーを起動します。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521473509-YAKIHONNES3.png)\n\nまた、ここで表示されるポート番号をメモしてください。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521312333-YAKIHONNES3.png)\n\n次に、More のタブに移り、Hosted Onion Services へアクセスし、Service Type の項目で User Services にチェックを入れて、右下の + マークをタップすると以下のポップアップが表示されます。(Orbot がスクショを許してくれないので一部画像割愛）\n\n表示されたら、Name に任意の名前を、Local Port と Onion Port に先ほどメモした Citrine のポート番号を入力します。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1732387181852-YAKIHONNES3.png)\n\n入力したら再起動を求められるので再起動してください。\n再起動後に Hosted Onion Services の項目に .onion のアドレスが表示されたら成功です (何故か私の環境では、一回の再起動では設定が反映されなかったのですが、もし同じような現象が起きた場合は、再起動 -\u003e Connect -\u003e .onion アドレスが発行されてるかの確認、を数回試すと発行されるはずです)\n\n発行されたら、.onion アドレスをタップしてクリップボードにコピーします。\n\n次に、Amethyst を起動して、リレーの設定画面に入り、Outbox の設定にコピーした .onion アドレスを貼り付けて保存します。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521629086-YAKIHONNES3.png)\n\n後は、Amethyst 側で Orbot のポート番号を設定して Orbot に接続すれば BOOM! 設定完了です。\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521797591-YAKIHONNES3.png)\n\nお疲れ様でした！\n\n素敵な Nostr ライフを！","sig":"52b62bfcc1578e824adbc7520f8ac10444e149265e9640080853119a46d77ce6f8a8d8fe26cdc627bb184556e2d8e71089354449a2428e9edc907b529c668261"}}