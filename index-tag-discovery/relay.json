{"naddr1qq04g6r994qh57npd4hj65n9d3shjt2wv468wmmjdvkng7rpde4rwqgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygy556nc5khthwjqh5d25g35syqn9skcqp9mj9mkzmzp857qmhejpcpsgqqqw4rsrjzlym":{"kind":30023,"id":"0ee7b4822dfc84390c5621c5100b55663f68960ba42b7cd50ee8462b3f2890ad","pubkey":"94a6a78a5aebbba40bd1aaa2234810132c2d8004bb9177616c413d3c0ddf320e","created_at":1739372748,"tags":[["summary","Fast, Reliable, and Built for Nostr üöÄ"],["title","The Azzamo Relay Network"],["image","https://cdn.azzamo.net/efb3ff5913c42edc833251943b0178ce91cf825429dced29fe89635eea868dbb.png"],["t","azzamo"],["t","relays"],["t","paidrelays"],["t","grownostr"],["t","nostr"],["t","relay"],["t","relaystr"],["published_at","1739372746"],["t","premiumrelay"],["t","paidrelay"],["d","The-Azzamo-Relay-Network-4xanj7"]],"content":"Azzamo is more than just a relay provider‚Äîit‚Äôs a **high-performance network** designed to make Nostr **faster, smoother, and more reliable** for everyone. Whether you're **posting notes, zapping sats, sharing media, or sending DMs**, Azzamo keeps your Nostr experience **seamless and efficient**.\n\nNostr is unstoppable, but **not all relays are the same**. Some are **slow, unreliable, or disappear overnight**, while others get **overloaded**, making message delivery **inconsistent**. Azzamo is built differently‚Äîoffering **fast, stable, and globally distributed relays** to ensure **low-latency, high-speed connections**, no matter where you are.\n\n---\n\n## **üåç Premium Relays for Maximum Performance**\n\nAzzamo **Premium Relays** are optimized for **speed, reliability, and uptime**, available exclusively to **Premium users**:\n\nüì° **Azzamo Premium Relays:**\n\n- **Europe:** `wss://relay.azzamo.net`\n- **America:** `wss://us.azzamo.net`\n- **Asia:** `wss://asia.azzamo.net`\n\nAdd **Azzamo Premium Time** to **unlock unlimited, high-speed access** across these global relays.\n\nüîó **Get Premium:** [azzamo.net/premium](https://azzamo.net/premium)\n\n---\n\n## **üÜì Freemium Relays ‚Äì Free for Everyone**\n\nAzzamo believes in **keeping Nostr open** and accessible to all. That‚Äôs why we offer **free relays for everyone**, with **no rate limits for Premium members**\n\nüì° **Freemium Relays:**\n\n- **Free Relay:** `wss://nostr.azzamo.net` ‚Äì Open to all.\n- **Inbox Relay:** `wss://inbox.azzamo.net` ‚Äì Reliable for DMs \u0026 group messages.\n\nBy offering both **free and premium options**, Azzamo ensures that **anyone can use Nostr, while also funding the infrastructure that keeps it running smoothly.**\n\n---\n\n## **üõ°Ô∏è Minimal Moderation, Maximum Transparency**\n\nNostr is about **free speech**, but that doesn‚Äôt mean **zero moderation.** Azzamo follows a **minimal moderation policy** to keep relays **functional and spam-free** while maintaining **transparency** in enforcement.\\\n\\\nüö´ **Spam \u0026 network abuse**\\\nüö´ **Illegal content (CSAM, fraud, malware, scams)**\\\nüö´ **Impersonation \u0026 identity abuse**\n\nWe also maintain a **public Ban API** for **transparent moderation decisions**.\n\nüìñ **More on our Ban API:** [azzamo.net/introducing-the-azzamo-ban-api](https://azzamo.net/introducing-the-azzamo-ban-api)\n\n---\n\n## **üöÄ Get Started with Azzamo Relays Today!**\n\nüîó **Connect now:**\\\nüì° `wss://nostr.azzamo.net` (Freemium Free Relay)\\\nüì¨ `wss://inbox.azzamo.net` (Freemium Inbox Relay)\\\nüì° `wss://relay.azzamo.net` (Premium Europe Relay)\\\nüì° `wss://us.azzamo.net` (Premium Americas Relay)\\\nüì° `wss://asia.azzamo.net` (Premium Asia Relay)\n\nNostr is growing fast. **Make sure your relays can keep up.** üöÄ\n\n#azzamo #grownostr #nostr #relay #relays #premiumrelay #paidrelay","sig":"a4b1f27b01d641d1bb00f63f97a5444cc348b2cbedbdfbca4a3283a6616ca53d23505cf950c2577707a6eba462184c56b8afc7f7cfa7e780c787fad9d1ee3c3e"},"naddr1qq24sj238p2nwnmdx9mrxcmhv4u9jcj9w9prqqgdwaehxw309ahx7uewd3hkcq3qyzvxlwp7wawed5vgefwfmugvumtp8c8t0etk3g8sky4n0ndvyxesxpqqqp65wkutyss":{"kind":30023,"id":"61c97e3336fafc2e7cc1483b7e49ce20a73e2d9fa9726ca30340e7712dc663a5","pubkey":"20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3","created_at":1686299609,"tags":[["client","yakihonne.com"],["d","XIQ8U7Om1v3cwexYbEqB0"],["image","https://daorayaki-fs-bucket.s3.ap-east-1.amazonaws.com/20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3/files/1686293030548-DAORAYAKIS3.png"],["title","YakiHonne Workshop Replay \u0026 Article ÔΩú P2P Content on Nostr"],["summary","YakiHonne Workshop Replay \u0026 Article ÔΩú P2P Content on Nostr featuring RoadRunner"],["t","Nostr"],["t","relay"],["t","workshop"],["t","hackathon"],["t","p2p"],["t","YakiHonne"]],"content":"[YakiHonne.com](YakiHonne.com) is a Nostr-based decentralized content media protocol, which supports free curation, creation, publishing, and reporting by various media.\n\n\u003ciframe src=\"https://drive.google.com/file/d/15kpwkLABKOtOWtqRRK8-51tVM1qlhZJH/preview\" width=\"640\" height=\"480\" allow=\"autoplay\"\u003e\u003c/iframe\u003e\n\n\n**Yofu:** Hello everyone! Welcome to the YakiHonne Workshop. Hack-Nostr-On is hosted by YakiHonne and sponsored by DoraHacks, with the aim of encouraging more ideas, applications, and problem-solving based on Nostr. \n[YakiHonne.com](YakiHonne.com) is a nostr-based media protocol that supports the creation, publishing, and reporting of various topics by medias. We are honored to have developer Roadrunner (aka 42) to give a presentation. Please welcome Roadrunner!\n\n**RoadrunnerÔºö**\nThank you. I appreciate the opportunity. I'm from El Salvador. I'm an amateur programmer who's just learning about Nostr and trying to build their first project. It's a very cool opportunity because I feel Nostr is a very open network for beginner programmers. It's very simple technology, but it can scale very well. Part of the idea is that the code should be kept simple. It is one of the main ideas of the protocol,so it was very simple for someone like me to just start building on it, which is what I find really cool.\n \nAnd I basically started building a little project that is attempting, called Roadrunner,that is attempting to create a decentralized marketplace of ride sharing, kind of like an Uber application where riders and drivers and passengers can find each other to finish rides. So, it's just trying to do the same service, but using decentralized technologies like Nostr and Lightning Payments so that you don't have to worry about, well, anyone else,it'll be completely custodian and will be peer-to-peer completely. \n\nToday I wanted to bring this presentation to you guys to kind of talk about the basics of the technologies we're building.Through Roadrunner and through Nostr and through Lightning. Kind of a bit of the basics about Nostr.How Nostr becomes peer-to-peer,the type of content that can be stored on Nostr, who and how you can access that content,And all the types of services that you can provide using that content. \n\nSo, let's start talking about Nostr as a peer-to-peer network.Everyone's heard this term before a lot,Peer-to-peer. I think it gets thrown around a lot,so I wanted to kind of dig into it and ask the question, is Nostr really peer-to-peer?And what does that mean? \n\npeer-to-peer technologies mean that they allow users to connect directly to each other, Without any intermediaries. So, peer-to-peer means thatI can talk directly with another peer, that I can interact directly with another peer. For example, Signal, Which is a messaging app. And in there, there is no in-between. You are sending encrypted messages from your peer to another peer, Its Technology that works directly from one person to the other, that allows that communication.\n\nSo, when we ask that question to Nostr, We run into this, into this kind of diagram,Where users are posting things onto a relay and then listening back to those posts,So, you could be posting, for example, a post to your Damus app or to your social media app or whatever, whichever app you're using,And you're also seeing other people's posts from that relay back,But if you notice, at no point is there a connection between you and other peers. \n\nSo, at face value, Nostr is not a peer-to-peer network,Because Users are never interacting with each other directly. Users always interact with the relays,All the users have arrows between the clouds, the relays and the users, but users never have arrows between each other. You are never sending a message directly to another user,And if you also notice, the relays don't talk to each other,Users can post to a lot of different relays and can listen to a lot of different relays,but they are never, but the relays don't talk to each other,Just as the users don't talk to each other.\n \nNostr, at a simple level, is an open network where everyone can post things to different relays,And everyone can read from those different relays. So, if I post anything to this relay, to one of these relays, anyone else in the network can access that information by telling the relay, hey, what did this person post,  So, at face value,it is not a peer-to-peer network. It is an open network,So, how do we turn Nostr into a peer-to-peer network?How does this architecture allow us to turn Nostr into a peer-to-peer network? Well, this is where encryption comes in, and I've put the SHA-256 logo here onto a sun because it's kind of like the light of encryption is what allows this peer-to-peer technology to happen. So, how does this happen?\n \nThe peer-to-peer functionality comes with encrypting your messages. That means that you can post an encrypted message to a relay,and yes, it is still public, but that means that only the people who you encrypted it towards can see those messages,And that's where the peer-to-peer functionality comes in because, yes, it is an open secret,You are posting that message to a relay, which is completely public, and anyone in the network can see it, but it becomes peer-to-peer because anyone can see it, but they cannot decrypt the message,So, even the relay can't see the message. Other users, which the message is not for, cannot see the message,Only the peers who you encrypted it towards can actually see that message and interact with it. Other users who don't have those encryption keys will not be able to see your messages.They can see them, but they cannot decrypt them, so they are useless. They're just a bunch of encryption text, which they can do nothing with.\n\nSo, that's kind of why Nostr becomes a peer-to-peer network. It is not by itself a peer-to-peer network, but when you start encrypting content on it, you can use it as if it were a peer-to-peer network,You're still dealing with the intermediaries of the relays, but then the relays can't really do anything about it,Because they're just passing on encrypted information along, and they really, there isn't a very easy way of telling apart the difference between encrypted information and non-encrypted information. So, that's where relays kind of have no weapons against this.They're just, their job is only to pass the information along, and if the information is encrypted, you can get this peer-to-peer functionality.\n\nSo, let's talk a little about what type of content you can put on Nostr. At face value, Nostr is a little boring. If you just look at it from, just take one look at it, it is a little boring, because what we have here on the right is all the things that you can store on Nostr. This is the only thing that you can store on Nostr.You can create these objects,Which have an ID, a pub key, a created at, a kind, some tags, a signature, and some content. So, let's run through these. \n\nVery importantly here, the pub key,Is the identity of who posted this object,This is an object that is getting posted to the relay, and it always needs to have a pub key,That is your, and we'll talk a little more about pub keys in a second, but that's basically just saying who posted this event,We have a created at, which is when this event was posted,We have a kind, which is what type of event this is, We have tags, which is like reference to other events or other pub keys in the relay, and then we have this ID, which is like a unique ID, just to make it easy to reference this event, and the signature, which is a cryptographic function that allows you to make sure that the pub key that is publicly set up in the object is who signed this, is actually who signed this object,So, that's a little cryptographic magic just to make sure that the object was created by who it says it was created by,Kind of a little verification, and then at the end of all that.\n\nyou can store some content,And what can you store into the content? You can store strings, and for those who've not, who aren't familiar with programming, strings is just a fancy word for text,So, strings are just a bunch of text. So, that's why I put this matrix image here, because there's just a lot of like, where you can put in words and numbers and text, but you can't do anything more than that. You can't post a picture, you can't post a video, you can't post a song,You can post text, and that's all that you can store on Nostr. It cannot store, for right now, anything else,And if you think about that, that's kind of boring,Because the internet isn't just text,The internet is videos and images and songs and audio,And so, if you can only store text, this isn't very useful.\n\nSo, how do we adapt to it? Because we already, we do want to use Nostr, because it allows peer-to-peer, how we've talked about,Like peer-to-peer encryption and communication,So, how do we adapt these boring strings to actual internet content that is fun? Well, in some cases, it's very easy, Social media, and you've already, you might have already interacted with some of these clients, like Damus and Amethyst,Which are just basically social media platforms, and these work, if you think about it, mostly off of strings,You see people's names, which are text, and you see people's posts, which are also text, and you might have counters of likes, which are also a bit of text with some static images,You don't really need to store the image of a like on Nostr,You can just keep a counter of it and say how many likes that something had. So, that is like for social media, most of the applications are very easy to handle with only text.\n\nThen another use case are URLs and external hosts. So, for example, you can just reference your YouTube video,You post a video to YouTube, and you just share the link through Nostr,And there's a bunch of ways that you can do this, but it basically boils down to that,And it doesn't have to be YouTube, you can store this in your personal server, and there's already, for example, servers that are specializing in URLs that are very Nostr friendly, for example, so that like very small URLs that you can easily like copy and paste from a text format,One of these examples is Nostr Media Uploader, which I've seen that I've got a lot of traction lately, and this just basically allows you to upload any photo, any video, any type of audio that you want, get a URL from it, post it on your Nostr text,And then anyone who looks at that event can just go look at that image and that video from the Nostr Media Uploader, At that point, the content is not stored on Nostr, it's stored somewhere else,  It's on another server, but you're just linking through it on Nostr. So that's a very easy solution,Because, however, it doesn't solve the problem of where do you store these things.Then at this point, you're still becoming dependent on storing things on YouTube, on storing pictures wherever you store them,On storing things on Nostr Media Uploader, sure, links are very useful and easy, but they're not the full solution.\n\nAnother thing you can do is serviceable data, which is kind of what we're doing with Roadrunner. And to give a small example of this,  Serviceable data just means strings or text. That is actually more than just the text it's on, it's data you can use somehow. And Roadrunner uses, for example, coordinates,  So we are sending coordinates through where the passenger is, or where the passenger needs to go,  And making calculations through this, how the distance you need to, the driver, and giving this information to the drivers,  So this is serviceable data,  Yes, it is text, it's only text that's there, but it's text that a service can use, get more information, provide a service from it, and then return more information to a customer,  So that's kind of what I mean by serviceable data. And coordinates are just one aspect of this,  Invoicing,  You can have many types of invoices, you can have orders for things,  So serviceable data is basically anything that you can get more data out of,  There's even, I've seen even ideas of like,for example, distributed computing,Where you put code that you want to run onto Nostr, and then other computers take that code, run it for you, and give a response back.So that's kind of like what I mean by serviceable data,  You're not really interested in the text itself, you're interested in doing something with that text and providing that service to a user. And then there's a really big space of opportunity with native data storage, of actually storing data on Nostr. \n\nBecause at the end of the day, if you think about it, computer information is just text.if you go far deep enough down the hardware ladder,  You can get down to zeros and ones, and very, very, very simple code to provide almost any type of content,So you could, in theory, encode, for example, a whole video, split it into its zeros and ones, or bytes, or hex bytes, or however you want to encode it, take those texts, paste them onto a Nostr event, put them up on a relay, and then whoever wants to download them,  We just have to get all these events back with the data, and they would need a client that would put, parse through this data and encode it back into whatever type it is, be it a video, be it photo, be it whatever else. \n\nI haven't seen many examples of this being done yet. I've seen some people like talking about it, but I couldn't point you to a clear example. I think it's a huge area of opportunity. You do have to be a bit technical to get into that,  Because it means encoding things into text, and then re-encoding from the text, and putting it back together. So it's kind of a big technical mess, but it's there. The opportunity is there if anyone wants to take it. \n\n**RoadrunnerÔºö**\nProbably everyone's heard the saying,not your keys, not your crypto. In Nostr, there are also people saying,not your keys, not your content, but I don't completely agree with that. And I want to get into a little bit of why. There is a bit of truth to this, because you do need your private keys to post your messages and only your private keys will reference your public key,  So if you hold your private key, only you can post those messages under the public key. No one else will be able to post messages under your name for that, if you want to think about it like that. But it's not completely true. Not your relay, not your content. Now this is true. So who holds the power of the data in Nostr are the relays, because users are always posting to relays and relays decide what to do with that content. Once the user has posted something to a relay, they no longer hold control of that data. The relay holds control of that data. And I want to make this very clear with a few examples, but in very simple terms, if it's not your relay, not your content. And I will be repeating this statement a few times over the next few slides, so I hope you bear with me. \n\nLet's talk about a bit of key pairs and identities, just to make everything very clear. To post anything on Nostr, you need a key pair. You need a private key, and that gives you a public key. Much like in all crypto systems and Bitcoin systems, you need a private key that allows you to handle your transactions, or in Nostr's case, your posts. The private key is what's used to sign and create the signatures that we saw on the data structure. And it'll also generate a public key for you. And that public key is unique to the private key. The private key can only generate one public key, and only that private key will generate that specific public key. No other private key can create the identical public key,  So if you're assigning posts with your private key, you can make sure that that is your identity. And if you see a post signed by a public key, you can know with reasonable certainty that whoever holds that private key signed it.\n\nSo your key pair is your identity.Now, having said that, you can use your identity on Nostr to access any client. And that is something that's very different with the normal internet paradigm that exists right now. Right now, if I try to go to Facebook, I have to create a user on Facebook and a password on Facebook. And then if I go to Twitter, I need to create another user and another password. And then if I go to Gmail, I need to create another user and another password, And it starts becoming a little crazy. In Nostr, you don't have to do that, because your private key can be used to sign posts on Damus. And your same private key can be used to sign posts on Amethyst. And that same private key can be used to request rides on Roadrunner,  There is no separation. All you need is a private key to sign and verify messages,  So your one identity can be used across platforms. And that has very useful utilities. \n\nFor example, you don't have to have a hundred different users,  You can have shared reputations through the platform. You can also do things like this,  You can have a very professional key pair where you are offering rides to people on Roadrunner,  And you have your social media profile professional on Amethyst,  And you're a very professional person on that key pair. But then you have another key pair where you go on Damus and post memes all day,  Because that's how you unstress out. But perhaps you don't want to be doing it on the same account. So you have two completely different key pairs,  That don't have anything to do with each other. And you have two different, completely separate identities,  And there's actually no way of tracking one, linking one way, unless you do it somehow. Like you actually say, like, Hey, these are my two public keys, but you can keep these two identities completely separate if that is what you choose. \n\nBut let's get into the, not your relay, not your content,  Like, why do we say this? Because I have my identity,I can post however many identities I want. But if the Damus relay, and I don't, I'm not saying that they do this. I'm just using it as an example,  Don't get angry at me, Damus. I'm just using you as an example. Damus, if you don't, if you post something that they don't like to their relay, they can just send it to the trash. They have no obligation to keep your post. because again, not your relay, not your content,  A user published something bad about Nostr on Damus. Damus said, Hey, I don't like that. That content doesn't go on my relay. It goes to the trash. And you as a user have no way of stopping this because the relay owns the data. You are free to post however many relays you want. And eventually one of them might say, yeah, I like your data. I'll keep it and share it with other people,  But if the Damus relay didn't like what you posted, they are completely free to send that information to the trash. So I want to make that very clear. I will also want to make this very clear, this other point very clear. Let's say you posted something dumb that you shouldn't have posted on Damus, an Embarrassing picture of yourself or whatever. And then you tell Damus,Hey, please, I don't want that there. Damus can very easily just tell you, no, that is now there forever,  They have no obligation to delete your data either,because they own the data, not your relay, not your content,You are free to post to all the relays you want and request information from all the relays you want, but the relay owns the data. \n\nSo how do we bring balance to the situation? Because if you just told me like, Hey, relays own all the data, that doesn't sound cool. That sounds like a corporate mess,  And we don't want that. So again, the light of encryption, SHA-256, which is one of the greatest technologies known to man right now, is what brings balance to this.because you can post encrypted content to the Damus relay, and then they don't know what they're sharing. So they can't really decide if they like it or not because they can't even tell what it is. And so if they don't know what you're posting, how can they decide if it's good or bad? \n\nSo if they don't know what they're posting, they're just going to say, well, this guy's posting a bunch of encrypted stuff. Let's just send it over to whoever wants to encrypt it,  And it's even very hard for Damus to get in trouble for that, let's say, because how can they know that they're redoing something bad,  That they're sharing something bad because they can't even decrypt the message. Only the holders of the decrypted keys can see those messages. So if you encrypt your messages, Damus doesn't know what it's sharing. And that's kind of where the balance comes in in Nostr. Sure, the relays own the data, but if that data is encrypted, that data is useless to the relays. So encrypted data is only useful to peers, Encrypted data keeps the balance of the data ownership. Sure, the relays own the data, but it's not useful to them if they cannot decrypt it. I hope that's very clear. This is where the balance of user relay comes in Nostr. \n\nThere is a big monetization aspect of this,  And again, I'm not saying Damus does this, just using it as an example,  But Damus can keep you out of their relay. They have no obligation to let you in. You can try and post to them, but they don't have the obligation to say,yeah, I'll take your post. It's an open network, but up to however the relays decide.And you are free to post to any other relay you want. But if you want to post to the Damus relay,you might have to accept some rules,  And for example, one example that's going around right now are paid relays, So send me some Bitcoin and you can post,  And that's a very simple example. I think there's a lot of opportunity here. For example, getting in by reputations on other services, there could be private relays for private groups,  Where not just anyone can get in, where you actually have to be a part of an organization or a DAO or whatever. And that relay is private for these users,  And no one else gets in,no matter how much money they have,  That's another kind of use,  But this is a very simple way of monetizing relays that's already happening,  So if you go to NostrWatch,for example, which is just a list of all the Nostr relays that's out there, you'll notice that there's a bunch of free relays where anyone can post and read from. And there's a bunch of paid relays where there's some that will just ask you for an entrance fee,  And you just pay once and you can post and read however many times you want. Some actually charge you per post,  And there's like micro payments going on. So two sats, three sats every time you want to post. There's also a lot of anti-spam campaigns that are happening through monetization, So it costs one seat to post. So yeah, to a real user,  Like who might post 500 times in a month, 500 sats doesn't sound like crazy cost to use a service,  But to a spam user who is trying to post 100,000 messages per month,Now that becomes cost prohibitive.So there's a bunch of very interesting use cases here with the monetization, But the basic idea comes down to, if you have what I want, you can come in and post to my relay. If you don't,you get shut out,  And that's just a very, very simple example.\n\n**RoadrunnerÔºö**\nSo let's talk about services on Nostr. How do we've been talking a lot about the user side,  How a user can post and interact with relays. But let's look a little about the relay side,  And what is actually a client like Nostr, like Damus, for example, doing for users. And this is where peer-to-peer, it gets a little more complicated. It's not exactly peer-to-peer, it's peer-to-relay-to-peer,  And that's the type of service that Damus and other social media clients are providing. What does that mean? That means that a bunch of users are sending their information to Damus. They're sending their posts, they're sending their likes, they're sending their private messages. Damus is aggregating those, Into a feed, into checking how many likes a specific post has gotten and giving that information back to the users,  So this is where peer-to-relay-to-peer comes in, You're sending information to the client and you're getting back information from that client aggregated from all the users that have been sending information,  And this only works if you have a network of users, if you only have one user on Damus, well, there's not really anything to show him, You need to show him information from other users,  So that's why it's not just peer-to-relay,  There needs to be other peers in this for it to work, There needs to be a community of people posting so that you can see a feed, a community feed of posts,  So that's why there's the relay in between. And it's the relay in between that is important because that's who aggregates all these posts,  Damus is not only something that, and Damus isn't only checking one relay, Damus is actually checking a bunch of different relays. So they're aggregating information from a bunch of different relays and showing you all into one comfortable feed,  So you don't have to worry about looking for all these relays. Damus actually does it for you. So there's a bunch, a network of relays that Damus accesses,  And provides you all that information aggregated into a very comfortable feed and very like, you just like things and you just comment on things,  And it's very easy and approachable,  So this is peer-to-relay to peer services. \n\nOn Roadrunner,we're doing things a little bit different,So Roadrunner is actually, we do have that peer-to-peer part, So we have a bunch of passengers and a bunch of drivers that are sending us their information, but actually most of the service that we provide is done by autonomous key pairs. And I like, I'd like to say that I'm kind of on the front end of creating this kind of technology because I haven't seen many people talking about this kind of stuff, but basically what this means is just giving a bot or an autonomous service,  You can think of it like a little robot, its own key pair, so it can do things for a user. In the Roadrunner case, I have a couple of different services, for example, creating ride details,  Like the ride distance and aggregating the coordinates and creating a feed. All of that is created by an autonomous worker that then posts events back so that drivers can see. So in that case, for example, there isn't the information that a passenger sends, isn't the information that the driver receives, Because the information gets taken in by a robot, an autonomous service,  And it posts back information and the driver actually sees the information from the autonomous service. The driver isn't worried about the passenger, they're worried about listening to the autonomous service, for example, another case, when you are actually offering a price on Roadrunner, you have to use a lightning invoice and we create an HTLC contract for you, which is just kind of like a time-locked contract to make it simpler for the payment transaction to go through and to allow passengers to cancel it. Well, that process is also done by another service with another key pair that all it's doing is taking in invoices from drivers, creating a contract from it and posting back the contract. And then passengers aren't actually listening directly for the driver's invoice. \n\nThey are listening to the contract that was posted by this autonomous key pair, So, the driver doesn't have to worry about listening to every single passenger out there. They just have to listen to the one autonomous key pair,  And that one key pair will always be publishing these offers. It makes the tracking of services much simpler. I also have another autonomous key pair keeping track of reputations. So, every time a ride is settled, there's a little robot that goes and posts a reputation event,  And these three services each have their own key. So, at the time of looking for these events, it's very easy because if I want to look for reputation events, well, I don't have to listen to the other two robots. I can just listen to the robot's reputation. And if I want to listen to the offers that I'm receiving, I just have to listen to the offer robot,  And this is a very easy way to start compartmentalizing, compartmentalize, start making smaller services,  And keeping things in compartments. \n\nLet's talk about scaling, which is another word that you've probably heard a lot. Very important. What happens when you have a bunch of users all trying to do things at the same time? And you might have limited resources,  I'm not Amazon. I don't have a bunch of huge servers that I'm running to keep things, to keep my services running at full, at hundreds and hundreds of giga RAMs of speed,  Like, I'm not Uber. I don't have huge services across the world,  I might not have the capacity to do this. So, my services get angry. They can't handle all this data,  So, how do we scale this? One answer would be, well, become Uber. Just start hiring servers and just make huge computers and just make more robots,  Just more, more, more, and just do it all yourself. I don't like that. And that's not how I've built the system. Roadrunner is being built, again, because it's on Nostr, because it's decentralized. It's attempting to build a decentralized network of rights. This is how Roadrunner and this is how other Nostr systems will scale. \n\nNot by expansion, but by replication. I don't want there to be one huge Roadrunner service. I want there to be hundreds and hundreds and hundreds of different Roadrunner services, each running to their own specific needs, So, one of these Roadrunner services might be working in China and they might have very specific user verification things because they want to be compliant with laws there. And another one might be in Africa and they're using payments on something that's not lightning. They're using payments on another thing. There's so many examples,  And you can tailor each one of these Roadrunner services to fit your needs,  And this approach to scaling by replication is so much better than my expansion. Because if one of these, for example, just one example is if one of these goes down, you also have another bunch of options. Right now, if Uber goes down, all of Uber's customers are left without an option. You have to sign up for another service. But hey, if one of these Roadrunner services goes down, you can actually just go find another Roadrunner instance and use your same private key and find your same reputation events,  Because it is a distributed system of relays, Your information can live on a bunch of different relays. And these workers, each one of these groups of workers don't have to be listening.To only one set of relays. They can be listening to two relays or three relays or four relays,  You can have private relays. You can have your own private little Roadrunner that only runs kind of like a limo service,  And it's only really fancy cars and it only works for really fancy people,  And this is how I picture scaling on Nostr. \n\nNot by creating one Roadrunner, but by creating hundreds of them, each tailored to their own specific needs. They will all have the same basic functionality. And in theory, you can use your same identity across all of them because all you need is to sign and verify your own messages.\n\nI also wanted to talk a little more about the service and what we're doing. How we're integrating all of these tools into the Roadrunner platform, starting with encryption, because I think it's one of the crucial parts of this. So one of the things I've done is I've tried to encrypt as much of the user content that I can. The only part that isn't encrypted right now is the initial user coordinates, because you have to, if you're looking for a ride, you kind of have to tell drivers where you are at least approximately,  So that event is, it cannot be encrypted. It does have to be a public event. You are posting like saying, hey, I'm here,  Can someone pick me up? So you do kind of have to tell the world that, hey, you are here,  But for example, I have created a system where that event is replaceable,  So at the end of the ride, you just replace it with an empty event and no one can find those details,  Because the original event gets deleted and the only event left is an empty event, So even where events aren't encrypted, I've tried to keep user data storage to a minimum,  In almost every other case, for example, communication between passengers and drivers and the sending of invoices, and I'm doing a lot of things like lightning invoices, for example, all of that is encrypted and encrypted between the driver and the passenger,  Or in some cases between the driver and the robot,  But the same thing applies. So only the driver and only the service can see your information and no one else can see your information. So in theory, this means that you can run Roadrunner robots on any relay. It could be on the Damus relay. It can be on any other relay,  This could be like an extension of relays of just having little autonomous keepers providing these services and then the Roadrunner clients don't have to depend on one single relay because the information is private for users,  Like we mentioned through encryption, it is truly peer-to-peer and relays just act as the transfer of information and holding certain states which are only useful to peers.Because they are encrypted. I also am very proud of the whole autonomous keeper worker. It solved a lot of issues that I was having while building the system. And I think it needs to be explored a bit further with people that are more experienced coders because I think it has huge areas of opportunities of just having these keepers out there in the world doing things for you,  And there's so many services that you can start applying this concept to. Because again, right now, especially with AI and all these technology tools that we have, there are so many crazy services that you can start providing and automating and just creating those, just giving. And all you'd be doing through Nostr is providing that automation of services to be public and transmissible. And I think that's everything I had for today. Thanks for hacking, everyone. Thanks for being here and for the opportunity to give this talk out,  So thanks a lot to the group, to YakiHonne. And yeah, that's all for me. I don't know if you have any questions, any comments, anything else you'd like to discuss?\n\n**YofuÔºö**\nYeah, thanks to you too. I actually have some questions. I'm wondering first, what is your inspiration for doing this Roadrunner based on Nostr, based on Relay? \n\n**RoadrunnerÔºö**\nI can't claim that it's completely original or anything. Like I said, I'm a very beginner programmer. I've had some help from several people in the Nostr community. And the idea was kind of given to me by someone who's more deep into the Nostr stuff. It is one of the original ideas that the Nostr developers, the original developers of Nostr put out there that, hey, a ride sharing service should be created on Nostr. It was one of the predetermined use cases before Nostr was even working. \n\nSo my inspiration is building on the shoulders of giants,  And the tools have been given to us to access this open network,  And there's also already a bunch of use cases that I don't have to go and imagine, There's a bunch of really, really important and useful things that are needed to create that people are already asking for,  So I'm just trying to do that, building something that people are already asking for. \n\n**YofuÔºö**\nWow. Actually, it is very interesting because, for example, like I mentioned in the talk that if one platform is gone, for currently that's all, there's no matter drivers, no matter users, reputation, it's all gone. I need to start over from the very start. Everyone is blank. It's not fair. So yeah, based on this, I think it's interesting. The information there does not depend on the platform. So it can be like now on multiple, there's clients that the information is sharing. It's quite cool. Yeah. And by the way, do you have any demo now or it's still under program? \n\n**RoadrunnerÔºö**\nThe page is in a demo version. I could show you very quickly if you'd like. So let me change screens for one second. So the page is live right now. Anyone can access it, roadrunner.lat,  It's only working with testnet payments on Bitcoin. So you need a lightning testnet wallet if you want to demo it, but anyone can access it. Easy wallet that you can access on testnet is htlc.me if you ever want to test the service out. So I'll give you a quick rundown on the page. Basically you log in with a private key. I already have my private key here to save. So I just hit log in and it puts me in. It recognizes my public key,  So this is the public key that shows to other people. I've already set up some profiles using an IPO six, I think it is, which just allows a user to set up like a profile event. So you can see like, Hey, this is my name,  I have a little thing for images. I have a little information for your car. If you're a driver,  A picture for your car isn't hosted on the site. This is just external URLs. Like I was talking about, but again, it's very easy to just find your picture,  And from a public hosted site. \n\nSo then we have a little page where you can find rights,  And this is predetermined to San Salvador. I am not accessing your device information at all. This is just a static map of the world. And you can just pick two points on the map,  That's why it's predetermined to one spot, but you can just go wherever you want on the map,  And pick those two points,  If you're in Guatemala or if you're in Mexico,  Or if you're even farther away,It doesn't matter,  Maybe you're a European user who wants to use it, you just move the flags to wherever you want and you can pick those rights,  So let's say we want to take a trip from Paris to whatever, Rene,  You can offer a price. Right now everything is priced in SATs because I'm using lightning payments and you can send over that payment,  So you get sent to the screen where you're just waiting for offers from drivers, So now I'd like to take you to the driver page. \n\nGive me one second. I need to find another key. I think I have, I should be able to use this one.So let's use this one and we'll go to the driver page,  So in the driver page, again, you'll be able to see a feed of all the rides and we can see here the ride that was posted by the other public key,  So if we click this little banner, we can see that, Hey, this other public key wants to go from Paris to Rene, that's this much distance,  And they're offering this much for the ride,  So I want to offer them a ride. I will go to my wallet and I will ask for a little more than what they wanted,  Okay. \n\n**Yofu:**\nSo there is a bargain negotiation process between drivers and users about the price.\n\n**RoadrunnerÔºö**\nThe passenger can offer a price,  But at the end of the day, it's the driver's call of counter offering,  So the passenger wants 245,  The driver is offering 400 and 420. If you notice, here I put 400,000,  And it added a bit of a fee. That is the relay fee that my service is actually charging you. So I've now added a bit of a fee because I am creating a contract for you, a lightning contract for you. And that's what you were actually paying. You're not paying the driver directly. And I can show you that right now. So for example, let's say this passenger, I want to take that ride,  And so you can see that it has an invoice,  I'm going to go now pay this invoice as the passenger,  So I go to my wallet and I say, Hey, Oh, I don't have enough money. Oh, let me make a smaller payment. Cause I don't have enough money in this wallet. Sorry about that. A bit poor. \n\nThis is all test net Bitcoin. Let me just make another offer with a smaller one. So I should now have a smaller offer. Cool. Let me pay this invoice.So now that invoice will be paid and you'll notice in a second, as soon as it gets recognized, it should change. Give me a second. Don't fail me now. Service. Is it working? There we go. Cool. So what happened is that the contract was now in an accepted status. If you notice  the lightning payment hasn't gone through that's because it's a type of contract that requires a two steps,  It requires a payment and then it requires a verification,  So right now the payment has not been sent,  Because I'm just telling the driver, Hey, I've prepaid your contract,  You should come pick me up. \n\nSo this is what the passenger sees: Your driver's coming. There's still a bit of details to implement. This is just a demo,  I still need to implement, for example, like the location of your, of your driver and things like that. But as a demo, this is just, you're waiting for your driver to come,  Let's say he never shows up. It's been 20 minutes, 30 minutes. He doesn't show up. Whatever you're in a hurry. you need to go. You just hit X and, and the ride cancels. The payment never goes through. Right. But let's say the driver did come pick you up. So the driver here now sees your location,  And they're like, Hey, go pick you up, your passenger,  Like the driver goes, picks you up,  You have a nice ride. They take you to where you're going. you get to where you're going. The passenger hits accept and the payment now does get finalized. It says it failed here, but this lightning wallet isn't the best. If you notice the balance, it did get sent and received. It's also kind of weird because you're paying with the same wallet. if I was doing it with another user, it would be a better demo. Right. But yeah, the payment is received on the other end and the ride is finished and you can go request another ride. \n\n**YofuÔºö**\njust one small question, you said, uh, when he takes the rides and he transports him to the place he went. So after that, what if the passenger doesn't pay, how the driver receives his money?\n\n**RoadrunnerÔºö**\nAt that point you are in someone's car and you are denying them their payment. I think if you are taking the risk of like, do you know what I think? Well, a lot of drivers already take that risk.like for example, Uber and a lot of these companies already give you the choice to pay in cash and drivers have no way of knowing if you have the cash or not. but as a passenger, would you really get into someone's car and then get to the end and be like, Oh yeah, I didn't pay you. Like you're, It's a problem for the driver, but it's at that point, the driver has you right next to them. \n\n**YofuÔºö**\nRight. So I know the risk is very low, but how can the platform, I mean, your platform can assure that to solve that. \n\n**RoadrunnerÔºö**\nI understand your concern. My response to that is that the platform is a peer-to-peer platform. Disputes as a service are peer-to-peer and disputes are also peer-to-peer. At no point in the service, can this, can the platform keep your money? So, the money goes either to the passenger or to the driver. There is no other outcome.\n\nSo just as the service is peer-to-peer, the dispute process is peer-to-peer.I know this isn't the answer that most people like,we have become very accustomed to platforms being very user coddling. I would say in a way of like babying you around,if anything wrong happens, it's the platform's fault. And I understand that, but I also don't, that's not the philosophy I want. And it's not the philosophy I think that Nostr builders will be building with.I think if you are going to get into the peer-to-peer philosophy, you also have to understand that, if you're using a peer-to-peer service, you are also taking that peer-to-peer risk in a certain way. And I don't think any peer-to-peer platform has solved this.\n\n**YofuÔºö**\nIt is doable to do an intermediate wallet, for example,Your platform wallet, and then the client will transfer the money to the platform wallet temporarily. And then when he finished, like you can, the driver can receive his money from the, I mean, like.\n\n**RoadrunnerÔºö**\nThe problem you keep running into is who verifies that the ride was successful. That is the ultimate problem. Because right now what I'm doing with the contract is kind of like that,  Like you can prepay the contract and then someone has to decide, I could give that choice to the driver as well.But then what happens if you prepay the driver and the driver doesn't show up and just hits accept to the contract,  You start running into a lot of issues of who you are going to ask to verify the ride. There isn't a clear answer, the system I designed has been designed after speaking with drivers specifically and raising this issue, Of people who actually like to ride, use these platforms to offer rides like drivers. And what they've told me is that, yes, like users have the financial upper hand,Because they like every platform, both Uber, Indriver,any of these platforms always gives users that ability of canceling the ride. And no right platform will tell you otherwise. Like if a user has the financial domination over the driver, what platforms do to counteract this is give drivers.The rating benefit, So give drivers more information about the reputations of users. And I'm still working on those designs, but what I'm trying to do is, for example, give drivers a very accurate representation of how many times a user has accepted a ride and how many times they've canceled it,  Because if a user accepts a bunch of rides and always cancels them, that's not a very good user, And you should be able to, It might be impatient, or it might be someone trying to scam or it might be whatever, whatever option, right. But it's not a good user,But for example, another user who has accepted a bunch of rides, but also settled all of them and paid the driver accordingly, that should be a good user,  And that should be reflected and drivers should be able to see what type of passenger you are before deciding to go pick you up or not. So that is still something I'm building, but the tools are there. Like I have all the data, all of this is Nostr events that are getting put to the Roadrunner Relay,So I own that data, just like I was talking on the talk, and I can choose to decide what to do with that data, I can present it to the drivers and say like, hey, this customer has a 90% settlement rate,And they're good customers. This other customer has a 20% settlement rate, And you as a customer have to be mindful of that, that you will be accumulating a rating on this platform. It's not a perfect solution, but it's, I'd rather do that than try to get into a dispute. Did the driver really get there or not? Did you get to your location or not? Like that is a lot harder because then you have to start thinking of like, am I tracking users on their devices, which is something I don't want to do. I don't want to track users. If you notice here, I'm not giving.I'm not asking for your data, right. I'm just, you put the location. So there's a lot of nuances to this. \n\n**YofuÔºö**\nThanks for answering my questions. One more question is, what're your upcoming features that you're going to implement to the platform?\n\n**RoadrunnerÔºö**\nYeah. Features, like I said, I still have to do a lot of reputation stuff. I don't know if you noticed, but there was a little reputation. There was already a star thing on each of the profiles. That's just a very basic reputation system that I set up. So I'm still working on more nuanced reputations to give more information to both drivers and passengers. So that's features that are coming up. Also features of seeing where your driver is. I do also want to allow some better location tools, for example, like looking for a specific address and just the banner goes directly to the address, small details like that. It's like UI enhancements. I also, there are a couple of features that I do want to enable that are more Nostr enabled things. This will take a bit, like, I do want to make sure that the platform is working correctly before I start implementing more. And it has to do with accepting and finalizing rights. And one example is I can give you, let's say like you are at a party and you're a bit drunk and you ask, you ask someone to request a ride for you on your key,  You request the ride, but perhaps you tell your friends at home or your family at home, like, Hey, I'm taking this ride, follow my key.And then maybe you can do like the settlement ride of the payment isn't done by your key, but for example, by another key. So then the driver knows that he can't get paid unless you get home, for example, things like that, that are, that I'm still working on or designing, but like, there's a really, a bunch of cool stuff that you can do like sharing keys between people, to do different types of, of verifications and love, like requesting rides for your kids.For example, and, and paying or paying rides for other people. For example, like, Hey, I'm stuck here. I need someone to give me a ride.Can someone pay for this lightning? So stuff like that, or more like to give more freedom to users. But yeah, that's a bit more with more time. \n\n**YofuÔºö**\nYeah. I appreciate you answering my questions and thank you a lot for the amazing presentation.\n\n**RoadrunnerÔºö**\nJust to end on an open invitation for anyone to go into the app and play with it. You're completely welcome to play and try and ride and just all you need is a lightning wallet. Like I said, a test net lightning wallet. This is not real money. This is test net money. Like if you open this page, they'll give you like $80 to play with and go ahead and play, try to be a driver, try to be a passenger, give any feedback that you might have on the platform. I'm happy to get it right.and that comes from people just testing it out. I also want to see if none of my services break. So again, go ahead, play with them, try to break everything. And if it breaks, I'll be happy to fix it. Right. Let's just let me know, open invitation to everyone. \n\n**YofuÔºö**\nFor sure. Yeah. Everyone can see this road runner details on the Hack Nordstrom on page, the BUIDL. And there is a, I think that you, you already put the links there,Everyone can try from there and read more about this. And if there is one more discussion about it, you're welcome to join the [Telegram group](https://t.me/YakiHonne_Daily_Featured).\n\nThis is the first workshop for the [Hack-Nordstr-On](https://dorahacks.io/hackathon/hack-nostr-on/detail) on this hackathon and which is hosted by [YakiHonne.com](YakiHonne.com) and sponsored by DoraHacks. And Thanks again to the speaker, to all the audience here, to the community, to 42, to Isaac. \nAnd this is it. And our next workshop will be tomorrow, which is 19 o'clock or 7 PM GMT,So stay tuned, and subscribe to us. \n\n\n-----------\n\n\n[YakiHonne.com](YakiHonne.com) is a Nostr-based decentralized content media protocol, which supports free curation, creation, publishing, and reporting by various media.\n\nFollow us for more daily features:\n\n- [Telegram: https://t.me/YakiHonne_Daily_Featured](https://t.me/YakiHonne_Daily_Featured)\n- [Twitter: @YakiHonne](https://twitter.com/YakiHonne)\n- [Hack-Nostr-On, Win 35,000,000 SATs NOW: https://dorahacks.io/hackathon/hack-nostr-on/detail](https://dorahacks.io/hackathon/hack-nostr-on/detail)\n- Nostr pubkey: `npub1yzvxlwp7wawed5vgefwfmugvumtp8c8t0etk3g8sky4n0ndvyxesnxrf8q`\n\n\n","sig":"96167162b898e58f405a6bf862053f3193fc1cfe948704ea3f6715be60b21b7176991d152f4465f2b3602af54231885d39f33e11405c51c9bff74c1bbdabf3a0"},"naddr1qq24wmjfwp6rv6t8v935ujfhv4yr2wzzdfz5gqgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygrwvjurc8m8f7cq5hces9kzj7myzjlk0uq4398qfh2vv4lfgypwaqpsgqqqw4rs72gr2w":{"kind":30023,"id":"e9afc5076f13880a18b57c06600c49aa432a7b3ffa92895620f0aeb55ca3218c","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745441068,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745441068"],["d","WnIpt6igacNI7eH58BjED"],["image","https://image.nostr.build/09593373dc30cafd8174ed57a1cae310c517b17e664b2c59ab5a41d0c1aca3d8.jpg"],["title","How to Import and Export Your Nostr Notes"],["summary","Learn how to import your Nostr notes from public relays and export them into your own relay using the nak CLI tool. This step-by-step guide covers installation, fetching notes, filtering by event types, and uploading to a self-hosted relay‚Äîensuring your content is safe and under your control."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","Nostr"],["t","nak"],["t","relay"],["t","import"],["t","export"]],"content":"# How to Import and Export Your Nostr Notes\n\nThis guide will help you import your notes from various Nostr relays and export them into your own relay. This is particularly useful when you want to ensure your content is backed up or when you're setting up your own relay.\n\n## Prerequisite\n\nYour own Nostr relay (if you don't have one, check out [Part 1: How to Run Your Own Nostr Relay](https://njump.me/nevent1qqsqd24rtzchjvxh7a9ahe9xs54w04rtlcpgt499uux8kkzgpucuhmqppamhxue69uhkummnw3ezumt0d5q3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qy28wumn8ghj7un9d3shjtnyv9kh2uewd9hsz9nhwden5te0wfjkccte9ehx7um5wghxyctwvsq35amnwvaz7tmd0ykhyetvv9ujumn0wd68y6t6v5hx6eg8w8a7q))\n\n## Installing nak\n\n`nak` is a command-line tool that helps you interact with Nostr relays. Here's how to install it:\n\n### For Windows Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-windows-amd64.exe`\n3. Rename it to `nak.exe`\n4. Move it to a directory in your PATH or use it from its current location\n\n### For macOS Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-darwin-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-darwin-amd64\n   sudo mv nak-darwin-amd64 /usr/local/bin/nak\n   ```\n\n### For Linux Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-linux-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-linux-amd64\n   sudo mv nak-linux-amd64 /usr/local/bin/nak\n   ```\n\n## Getting Your Public Key in Hex Format\n\nBefore downloading your notes, you need to convert your npub (public key) to its hex format. If you have your npub, run:\n\n```bash\nnak decode npub1YOUR_NPUB_HERE\n```\n\nThis will output your public key in hex format, which you'll need for the next steps.\n\n## Downloading Your Notes\n\nTo download your notes, you'll need your public key in hex format and a list of reliable relays. Here are some popular relays you can use:\n\n- wss://eden.nostr.land/\n- wss://nos.lol/\n- wss://nostr.bitcoiner.social/\n- wss://nostr.mom/\n- wss://relay.primal.net/\n- wss://relay.damus.io/\n- wss://relay.nostr.band/\n- wss://relay.snort.social/\n\n**Note:** You should check your Nostr client's settings to find additional relays where your notes are published. Add these to the list above.\n\n### Important Event Kinds\n\nHere are some important event kinds you might want to filter for:\n\n- `0`: User Metadata (profile information)\n- `1`: Short Text Notes\n- `3`: Follow List\n- `4`: Encrypted Direct Messages\n\nGet the full list from: https://nips.nostr.com/#event-kinds\n\n### Downloading with Event Kind Filters\n\nTo download your notes with specific event kinds, use the `-k` flag followed by the kind number, use multiple if you need to. For example, to download your profile, short notes, follow list, and direct messages:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY -k 0 -k 1 -k 3 -k 4 wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events_filtered.json\n```\n\nOr to download all your content, just don't provide any `k` flag:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events.json\n```\n\nThis will create a file containing all your notes in JSON Lines format.\n\n## Uploading Your Notes to Your Relay\n\nOnce you have your `events.json` or `events_filtered.json` file, you can upload it to your own relay. Replace `YOUR_RELAY` with your relay's WebSocket URL (e.g., `wss://my-relay.nostrize.me`).\n\n```bash\nnak event YOUR_RELAY \u003c events.json\n```\n\n**Important Notes:**\n1. Make sure your relay is running and accessible\n2. The upload process might take some time depending on how many notes you have\n3. You can verify the upload by querying your relay for your notes\n\n## Verifying the Upload\n\nTo verify that your notes were successfully uploaded to your relay, run:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY YOUR_RELAY\n```\n\nThis should return the same notes that were in your `events.json` file.\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Make sure your relay is running and accessible\n2. Check that you're using the correct public key\n3. Verify that the relays in your download list are working\n4. Ensure you have proper permissions to write to your relay\n\n## Next Steps\n\n- Remember to regularly backup your notes to ensure you don't lose any content.\n- If you want to keep your friends' notes as well, add npubs that you want to import into your relay's settings (for Citrine it is \"Accept events signed by\" list), and run the commands for their pubkeys.\n","sig":"31e99a51ab751b4b29aa53e7a760431b7a08263c31c22e2d4c7a1d0b70176a9d1d197fe58c6da910231ee21d5f32d76eade71be43383fa15023e0bb661ed6d04"},"naddr1qq25g72xgfphxkrvw3m5yue5wda9v5tcvg6xcqgdwaehxw309ahx7uewd3hkcq3qyzvxlwp7wawed5vgefwfmugvumtp8c8t0etk3g8sky4n0ndvyxesxpqqqp65w9xruyx":{"kind":30023,"id":"c6aff1b523e23c98aa7ff9fd8c13ff0d167c00372ac7073bed1a74a39bd9d97c","pubkey":"20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3","created_at":1714481812,"tags":[["client","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1714479802"],["d","DyFBCsXltwBs4szVQxb4l"],["image","https://yakihonne.s3.ap-east-1.amazonaws.com/20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3/files/1714480197309-YAKIHONNES3.png"],["title","Improving the Availability and Reliability of the Relay Network"],["summary","üöÄ YakiHonne's Phase Three Whitepaper is out now! Key points:\n1. Exploration of potential economic incentives and attestation mechanism for relay to enhance the availability and reliability of the relay network, thereby providing a solid foundation for YakiHonne to achieve decentralized media.\n2. Data analysis of the decentralized features of existing media protocols has proven that Nostr is currently the most decentralized media protocol compared to Mastodon, Bluesky, and Farcaster."],["zap","20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3","","100"],["t","yakihonne"],["t","nostr"],["t","relay"]],"content":"# Improving the Availability and Reliability of the Relay Network\n\nWendy Ding\n\n[YakiHonne](https://yakihonne.com) is committed to creating a censorship-resistant decentralized media. A sufficiently decentralized and immutable storage layer is key to achieving this goal. The relay network based on the [Nostr protocol](https://github.com/nostr-protocol/nostr) provides an excellent censorship-resistant storage solution. [Relay](https://nostr.com/relays) serves as an intermediary in message storage and broadcasting, allowing users to self-host relays and to choose which relays to broadcast information freely. If a relay refuses service or shuts down, other relays can continue propagating the information([fiatjaf.2019](https://fiatjaf.com/nostr.html)). This mechanism turns [shadow banning](https://en.wikipedia.org/wiki/Shadow_banning) into a \"whack-a-mole\" game, making it nearly impossible to completely block users through a specific data source, thereby providing a space for free speech for many controversial topics and creators. \n\nDespite providing a simple and effective architecture for social media censorship resistence, existing relay networks face two major challenges to scale and sustain. First, the relay network lacks incentives, without which the stability and availability of the relay network will suffer. The censorship-resistant network relies on numerous distributed and available relays and  wider usage of relay to ensure free flow of informationÔºà[Rabble,2024](https://yakihonne.com/article/rabble@nos.social/Why-has-Bluesky-grown-bigger-than-Nostr-w3eb29)). Second, although the core function of a relay is to store and distribute information in a decentralized manner, they cannot guarantee  the immutability of information. Therefore, relay nodes are able to manipulate or delete information.\n\nIn this article, we will focus on how to solve these two issues by introducing economic incentives and attestation mechanism, thereby enhancing the availability and reliability of the relay network, ensuring that it provides solid support for decentralized media.\n\n## Nostr Protocol is Decentralized\n\nThe design of Nostr involves the separation of user accounts, relays, and clients from each other, free from any entity's control and censorship. Users can host relays, and content can be stored and retrieved across multiple relays. Even if certain relays refuse service or shut down, other relays can still store and propagate information. This differs from Fediverse applications such as [Mastodon](https://nostr.com/comparisons/mastodon) and [Bluesky](https://bsky.social/about/blog/5-5-2023-federation-architecture), and is certainly different from \"Web3\" social media protocols like [Farcaster](https://docs.farcaster.xyz/learn/architecture/overview). \n\n* In Mastodon, user accounts are tied to servers controlled by administrators, thus instance owners can ban users and have the authority to block other instances, implementing censorship ([Rozenshtein,2023](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4213674)).\n* Although Bluesky promotes itself as an open and decentralized network, it is misleadingÔºà[Fiatjaf:Bluesky, 2023](https://fiatjaf.com/ab1127fb.html)): Bluesky directly controls the atproto protocol, which allows Bluesky to change the protocol at any time; Bluesky's identity system relies on a central server to maintain and authenticate global IDs, allowing Bluesky to control and potentially ban any user; even if users can host their own content, all content must be distributed through Bluesky's central server. Moreover, Bluesky's design does not encourage or support effective interoperability with other clients. This means if users are dissatisfied with Bluesky, their options are very limited.\n* Farcaster relies on large [Hubs](https://docs.farcaster.xyz/learn/architecture/hubs) to store all user data, and these Hubs will grow increasingly larger. These Hubs' power to censor and disseminate data cannot be underestimated. As the network expands, storage demands and costs surge dramatically. It is estimated that if Farcaster's daily active users grow by 5% per week, the cost of running a Hub will reach $3,500 per year by 2024, and will soar to $6.9 million per year by 2027 ([Varun,2022](https://hackmd.io/@farcasterxyz/ry0QL4M4o)). The high operating costs mean that only a few companies can manage Hubs, leading to a decrease in the number of Hubs and an increased risk of network centralization. Additionally, Hub operators may collude to lower the priority of certain content or to censor it ([Varun,2022](https://hackmd.io/@farcasterxyz/ry0QL4M4o)). In contrast, Nostr encourages a mix of large Hubs and smaller relays built for specific purposes,as shown in [Figure 1](https://hackmd.io/_uploads/H1b0M7Cb0.png). These small relays can be established by large publishers, small organizations, or hackers, maintaining the network‚Äôs decentralization and openness ([Hodlbod:Outbox,2024](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny)).\n\n![WX20240430-155010@2x](https://hackmd.io/_uploads/H1b0M7Cb0.png)\n**Figure 1. [Farcaster Hub](https://docs.farcaster.xyz/learn/architecture/hubs) vs Nostr Relay*\n\n\nThis is indeed the case. [Gareth Tyson et al](https://arxiv.org/html/2402.05709v1#S6)., using a dataset from July 1, 2023, to December 31, 2023, comprising 17.8 million posts, 1.5 million pubkeys, and 712 relays, analyzed the decentralization of Nostr and found that the distribution of posts and users on relays and relay hosting exhibited a high degree of decentralization. This demonstrates that the technical architecture of the Nostr protocol is superior to that of all existing decentralized media protocols.\n\n* Posts and users are not highly concentrated on individual relays but are widely distributed, As shown in [Figure 2](https://hackmd.io/_uploads/HkHHQX0ZC.png). 93% of posts can be found across multiple relays, with 178 relays, or 25% of all relays, hosting more than 5% of the posts each. According to user count statistics, even if the top 50 relays were shut down, 90% of the content would still be accessible. Similarly, based on post count statistics, shutting down the top 30 relays would still maintain accessibility to over 90% of the content. Even removing the top 50 relays would still leave 71% of the content accessible, as shown in [Figure 3.1](https://hackmd.io/_uploads/Sk3sm7CZC.png).\n\n![WX20240430-155217@2x](https://hackmd.io/_uploads/HkHHQX0ZC.png)\n**Figure 2. The percentage of relays, posts, and users in the top 15 regions and ASes, ranked by the number of relays. Source: Gareth Tyson et al. (2024), \"Exploring the Nostr Ecosystem: A Study of Decentralization and Resilience,\" arXiv preprint arXiv:2402.05709.*\n\n\n* The decentralization of relay hosting across regions and autonomous systems(AS). Relays are distributed across 50 countries and 151 autonomous systems(ASes), as shown in [Figure 4](https://hackmd.io/_uploads/HJIwNXR-R.png). Surprisingly, no single country or autonomous system hosts over 25% of relays. Over 80% of posts remain available after removing the top 10 ASes, as shown in [Figure 3.2](https://hackmd.io/_uploads/Sk3sm7CZC.png). Taking Mastodon as an example, post availability drops to less than 10% after removing the top 10 ASes hosting instances ([Raman et al., 2019](https://doi.org/10.1145/3355369.3355572)). This is mainly due to the more even distribution of relays across different ASes, making them more resilient to failures in individual AS.\n\n![Fig.3](https://hackmd.io/_uploads/Sk3sm7CZC.png)\n**Figure 3.1 Top X Relays Removed; Figure 3.2 Top X ASes  Removed. Source: See Figure 2.*\n\n![WX20240430-155010@2x](https://hackmd.io/_uploads/HJIwNXR-R.png)\n\n**Figure 4. The distribution of Relay numbers across different countries. Data from Nostr.Watch*\n\n\n## Analysis of Relay Availability\n\nRelay is the soul of the Nostr protocol's decentralization. To build a truly usable censorship-resistant relay network, two conditions must be met: relay nodes must be sufficiently distributed and available to ensure the free storage and dissemination of information; even small-scale relay nodes should be widely discovered and utilized. \n\nAs of April 23. 2024, there are only [639 relays](https://nostr.watch/relays/find) online globally, **a two-thirds reduction from the same period last year**, predominantly distributed in North America and Europe, which together host [80%](https://nostr.watch/relays/statistics) of these relays. Additionally, due to differences in network conditions, the performance of relays varies significantly across regions. For instance, tests in Singapore have shown notable differences in response times among relays in Asia, North America, and Europe, as shown in [Figure 5]().Moreover, a pronounced head effect is evident , with the top relay hosting 73% of the posts. Although these posts are available across multiple relays, Nostr remains highly decentralized ([fiatjaf:Nostr,2024](https://fiatjaf.com/87a208d9.html)). However, this concentration of usage does not favor the wide discovery and use of smaller relay nodes or the visibility of users, reducing the incentive to build small relay nodes, especially in an ecosystem lacking incentives.\n\n![image](https://hackmd.io/_uploads/H15C4XRWC.png)\n\n**Figure.5 Relay availability testing. Data from Nostr Watch.*\n\n* The reduction in the number of relays and their instability are primarily due to the lack of effective economic incentives ([Shinobi:Nostr Scale,2023](https://bitcoinmagazine.com/culture/can-nostr-grow-to-twitter-size)). Within the Nostr ecosystem, because clients often lack stable income or financial support, it becomes difficult to provide effective incentives for relays. Most relays rely on personal interest or restrictive [paid models](https://github.com/relaytools/relaycreator/blob/f253d2aa81bf385816f750f730c687c96b61ce6e/design/UserStories.md) to maintain operations. These paid models limit specific users' write or even read access, contradicting the initial anti-censorship intent and weakening economic interactions between clients and relays. Currently, 95% of relays struggle to cover operational costs, and 20% have experienced significant downtime due to lack of financial support ([Gareth Tyson et al., 2024](https://arxiv.org/html/2402.05709v1#S6)).\n* The discovery and follow mechanisms of relays cause those with higher usage to be more easily discovered by users. These relays are often operated by well-known clients or developers, thereby attracting more users. Ensuring that more small relays are widely discovered and used is a key factor in maintaining the censorship resistance and activity of the relay network. The Nostr ecosystem is working to improve the discovery and follow mechanisms of relays through the [Gossip Model](https://fiatjaf.com/bc63c348b.html), [Outbox model](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny), and [Blastr](https://github.com/MutinyWallet/blastr). The challenge or key aspect of these models is optimizing the discoverability and coverage among relay users without over-replicating and redundantly retrieving posts, ensuring broad content dissemination ([Hodlbod:Outbox,2024](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny)). However, achieving this goal requires better collaboration and consensus among Nostr developers. Currently, due to the lack of sufficient incentives, Nostr developers focus more on their own client design ideas, neglecting efficiency and compatibility with various existing user types, and even causing confusion in the development of other clients.\n\n\n## Potential Incentive Measures for Relays\n\nThe key to resolving the availability issues of the relay network lies in clearly identifying who will continuously pay for its operational costs. Only when the relay network can be profitable or at least cover its operational costs can it maintain long-term scalability and prosperity. The primary cost of operating a relay comes from server storage expenses. To ensure content availability, content is simultaneously published and repeatedly retrieved across multiple relays([Shinobi:Relay,2023](https://bitcoinmagazine.com/technical/what-makes-nostr-a-different-social-platform)), which further increases traffic consumption and operational costs. However, this is crucial for decentralization and ensuring data reliability. Currently, the main sources of income for relays are donations and paid posts, but 95% of relays struggle to sustain their operational costs through publishing donations. Therefore, this section will primarily explore potential solutions to cover the operational costs of relays.\n\n### 1. Client Pays for Storage Costs\n\nClients are encouraged to create paid products or cover relay‚Äôs storage costs through their financial budgets. This approach helps in exploring the diversity of monetizing decentralized media and facilitates the formation of economic consensus between relay and its clients, thereby establishing  incentive mechanisms for relay, as illustrated in [Figure 6]([https:/](https://hackmd.io/_uploads/SJgPSXCWC.png)). \n\n![image](https://hackmd.io/_uploads/SJgPSXCWC.png)\n\n**Figure 6. Incentive mechanisms between clients and the relays*\n\nIn a previous article, we discussed [two pillars of decentralized media ](https://research.dorahacks.io/2023/12/12/two-pillars/) of YakiHonne: decentralized publishing and decentralized review. The former guarantees that content will never be lost; the latter creates a new cost-incentive model to ensure that when content and moderation become permissionless, the platform can still maintain truthfulness and cost-effectiveness. Currently, YakiHonne supports various forms of decentralized publishing, including [articles](https://yakihonne.com/articles), [flash news](https://yakihonne.com/flash-news), [curations](https://yakihonne.com/curations), [videos](https://yakihonne.com/videos), and [uncensored notes](https://yakihonne.com/uncensored-notes). Content review through uncensored notes further promotes YakiHonne's monetization and decentralization. In YakiHonne, publishing flash news requires a minimum payment of 800 sats, with some revenue used to incentivize relay operations and support uncensored notes. For long-form content, payment of relay's storage fees can be made through subscriptions, advertisements, or even the client's financial budget, as shown in [Figure 7]().\n\n![WX20240430-160300@2x](https://hackmd.io/_uploads/rJA6BQA-R.png)\n***Figure 7. Incentive mechanisms between YakiHonne and the relays*\n\n### 2. Direct Income for Relays\n\nIn Nostr, the development of relays focuses more on performance optimization rather than the development of new features. Relays could potentially enhance revenue by offering specific relay functions and storing various types of events. Earning income through specific functions requires widespread adoption by clients and relays, otherwise, it may lead to the risk of centralization or implementation failure ([Hodlbod: relay Function,2023 ](https://yakihonne.com/article/naddr1qqxnzdesxqcn2df5xymnzdp4qgsf03c2gsmx5ef4c9zmxvlew04gdh7u94afnknp33qvv3c94kvwxgsrqsqqqa28q3wd45)).  Earning income by storing different types of events could be a viable option. While maintaining openness to various content, relays can use keyword filters during data retrieval to display specific topics, thus promoting a subscription-based payment model. Additionally, relays and clients can form revenue-sharing agreements on subscription fees, which not only helps increase income but also promotes economic consensus between the two parties.\n\n## Attesting content on relays\n\nThe redundancy in content storage ensures high availability of content but does not fully guarantee its immutability. In practice, it is possible for relays to tamper with contents or delete information by influencing certain relay nodes. To address this issue, we need to introduce a complementary attestation mechanism to enhance the reliability of the current relay systems.\n\nThere are various methods to implement this proof. As the most decentralized social media base-layer protocol, Nostr is well recognized within the Bitcoin community. However, to really use the Bitcoin network to validate information in technical sense has not been disccussed yet. If content hosted on the Nostr network should ever be attested, it should happen on the Bitcoin network.\n\nTo attest and validate large amount of content on the Nostr relay network, it's not economically viable to attest every post / every [NIP-23 ](https://github.com/nostr-protocol/nips/blob/master/23.md)article on the Bitcoin network. Data should be compressed and organized efficiently before being attested. The [merkle tree](https://en.wikipedia.org/wiki/Merkle_tree) is an efficient and secure data verification mechanism. The accuracy of the data can be verified using only the merkle root and the related hash paths, as shown in [Figure 8](). Therefore, a  final attestation over a large amount of content can be one merkle root submission to the Bitcoin network. Once submitted, all content represented under this merkle root becomes immutable. \n\n![image](https://hackmd.io/_uploads/BJpBIXC-C.png)\n\n***Figure 8. Hashed content on Merkle Tree*\n\nWhen it is necessary to verify whether the content stored on a relay has been unaltered, the content is first retrieved from the relay and its hash value recalculated. Then, using this hash value and other related intermediate hash values, verification proceeds up the Merkle tree until reaching the Merkle root recorded on the Bitcoin blockchain. Finally, by comparing this computed Merkle root with the root hash recorded on the blockchain, the integrity and authenticity of the content are confirmed. The process is depicted in [Figure 9]().\n\n![image](https://hackmd.io/_uploads/rkQcUX0WC.png)\n\n***Figure 9. Attesting content on relays*\n\nRepeating this process will eventually make sure all attested content is genuine. As a result, relays will provide content availability and redundancy, while the Bitcoin network validate Nostr content in batches.\n\n\n## Conclusion\n\nThe relay network is one of the core infrastructures that YakiHonne uses to build decentralized media. Through data analysis of Nostr's decentralization features, it has been found that Nostr's technical architecture has made it the most decentralized media protocol currently available. However, due to the lack of effective economic incentives, the relay network faces challenges in availability. This article explores several potential economic incentive models for relays. Despite many uncertainties and challenges, the importance of sustained incentives in combating censorship networks is clear. Additionally, considering the current lack of immutability in the relay network, we propose an attestation mechanism to enhance the reliability of the relay system. Improving relays reliability and availability will help promote the scalability and prosperity of the entire relay ecosystem, providing solid support for building decentralized media.","sig":"84190413309f24e86618597cdb96b66c8208a14fba7f272ea9ec498c1f272f0908c056c94518dfacfcf5f5a64d2872df69d57fd0c23011838b05e5cbd88a5255"},"naddr1qq25wttxg94rqurkwcm4sntddaky66rwd498sqgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qyg930lxd7pa6ywrlqw9ngsn8yrxk35gjm7frhj3tak8ccvymwgg325psgqqqw4rst3ztm7":{"kind":30023,"id":"5d9ad104614f3ae134cdd931a16f652d6c2c96eea6efbda33d9432b7045b3a26","pubkey":"b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155","created_at":1737476624,"tags":[["d","G-fAj0pvv7XMmolMhnmJx"],["title","üì£ New Nostr relay bonus guide on MiniBolt! üíú "],["summary","A complete guide to building a nostr relay step by step and other stuff!!"],["client","yakihonne.com"],["published_at","1695939149"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1695939149"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpvtlen0s0w3rslcr3v6yyeeqe45dzykljgau52ld37xrpxmjzy24qq25wttxg94rqurkwcm4sntddaky66rwd498su6pm35"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["t","minibolt"],["t","bitcoin"],["t","noderunner"],["t","guide"],["t","sovereign"],["t","DIY"],["t","lightning"],["t","zerotrust"],["t","nostr"],["t","relay"],["image","https://blossom.minibolt.info/3c7d702435982103e645fac99f74fa73eec6a372ed411553c59ba6b96a69d542.webp"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1695939149"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["t","extras"]],"content":"\u003e Build your nostr relay step by step on your MiniBolt node! (**easily adaptable to other environment**)\nNo need to trust anyone else! Be sovereign!\n\n~\u003e Go to the bonus guide by clicking ~\u003e [HERE](https://minibolt.minibolt.info/bonus-guides/nostr/nostr-relay)\u003c ~\n\n~\u003e This guide includes a complete [extra section](https://minibolt.minibolt.info/bonus-guides/nostr/nostr-relay#extras-optional) to cover the different processes for using nostr **as a user and relay operator**.\n\n---\nPS: The MiniBolt project has its FREE relay, be free to connect by adding to your favorite client the next address: `wss://relay.minibolt.info`\n\n~\u003e Let a review on [noStrudel](https://nostrudel.ninja/#/r/wss%3A%2F%2Frelay.minibolt.info) or [Coracle](https://coracle.social/relays/relay.minibolt.info) of your experience using it.\n\n---\n\nRemember, Nostr is freedom! Stay resilient! üíú üõ°Ô∏èüí™","sig":"dca4e1703695400e32c8ecc32852004d515f41e17f5a3fa97b7e7ee8fe95dce1a60e4c060f0467ce5ceeb1f85d2f7368c8ba3c002f11820136bd335893e2a11a"},"naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6qgswaehxw309ahx7um5wgh8w6twv5pzp978pfzrv6n9xhq5tvenl9e74pklmskh4xw6vxxyp3j8qkke3cezqvzqqqr4gugjqaxv":{"kind":30023,"id":"f6605821ea6d93c8d77dfbc1c5a20993dc49bce9bbbbe7fb903d988db8919cf1","pubkey":"97c70a44366a6535c145b333f973ea86dfdc2d7a99da618c40c64705ad98e322","created_at":1716311812,"tags":[["d","sfwV1rNaoQXd65PbIMYgm"],["title","Making Outbox Work"],["summary","Disambiguating the Gossip Model. Advocating for relay proxies. Separating the Truth from the Jokes. Ban Jack! Down with Blastr!"],["client","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1711162362"],["t","nostr"],["t","gossip"],["t","relay"],["t","proxy"],["t","issuecomment"],["image","https://images.unsplash.com/photo-1706505754377-ae2ebd8142af?q=80\u0026w=2071\u0026auto=format\u0026fit=crop\u0026ixlib=rb-4.0.3\u0026ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"],["published_at","1711162362"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzp978pfzrv6n9xhq5tvenl9e74pklmskh4xw6vxxyp3j8qkke3cezqq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6pn2mxs"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["e","5713539e51e11e7ad8309d0b5363292a0a68fc3f354d347d2f33917239538ad2","wss://theforest.nostr1.com/","mention"],["e","3024dc05b2995212d0e2e7262bd8e25e33ab010fa3b6e983d2f122ed71fe9c67","wss://hodlbod.nostr1.com/","mention"],["e","6e14d18f6ddfed824fb4b5b0c393f0aa4e2ec8ea94bef7987752f7bbba399437","wss://pyramid.fiatjaf.com/","mention"],["e","0caf39e8bfcca94b3725feab246db632a68228963f96344b826af2a85ace74ee","wss://theforest.nostr1.com/","mention"]],"content":"The last few days on developer nostr have involved quite a kerfluffle over the outbox model, blastr, banning jack, and many related misunderstandings. This post is an attempt to lay out my thoughts on the matter in an organized and hopefully helpful way.\n\n# What's wrong with outbox?\n\nIt all started with a post from [jack](npub1sg6plzptd64u62a878hep2kev88swjh3tw00gjsfl8f237lmu63q0uf63m) asking why more devs haven't implemented the outbox model. There are many answers to this question, not least having to do with there being two standards for user relay selections, and ongoing changes to NIP 65. But I don't want to talk about compatibility here.\n\nnostr:nevent1qydhwumn8ghj7argv4nx7un9wd6zumn0wd68yvfwvdhk6tcprfmhxue69uhhq7tjv9kkjepwve5kzar2v9nzucm0d5hszymhwden5te0wfjkccte9enrw73wd9hj7qpq2uf488j3uy084kpsn594xcef9g9x3lplx4xnglf0xwghyw2n3tfqqnrm02\n\nMazin responded with some numbers which estimate how many connections the outbox model requires. Too many connections can become expensive for low-power clients like mobile phones, not to mention some privacy issues stemming from nosy relays.\n\nnevent1qythwumn8ghj76twvfhhstnwdaehgu3wwa5kuef0qyv8wumn8ghj7cm9d3kxzu3wdehhxarj9emkjmn99uq3samnwvaz7tmrwfjkzarj9ehx7um5wgh8w6twv5hsqgrn7l6zj7ht6ruyk76vvvtkfs4xrhyzc3tm64l3eyfvd40y26sz0gshmunh\n\nI have some [minor disagreements](nostr:nevent1qyvhwumn8ghj76r0v3kxymmy9ehx7um5wgcjucm0d5hszxnhwden5te0wpuhyctdd9jzuenfv96x5ctx9e3k7mf0qy2hwumn8ghj7un9d3shjtnyv9kh2uewd9hj7qpqxqjdcpdjn9fp958zuunzhk8ztce6kqg05wmwnq7j7y3w6u07n3nsfpeeuh) with Mazin's numbers, but I basically agree with his point ‚Äî a purist outbox model, where a large proportion of nostr users run their own relays results in a high number of connections to different relays. I brought this question up late last year in my [interview with Mike Dilger](https://fountain.fm/episode/ALgeriqGnypw1Qhqvf5W) and in a conversation with fiatjaf, who convinced me that in practice, this doesn't matter ‚Äî enough people will use a handful of larger hubs that there will be a good amount of overlap in relay selections between most pubkeys.\n\nTo articulate this more clearly: the goal is not \"personal web nodes\", which is a pipe dream the Farcasters and BlueSkys (BlueSkies?) of the world aim at, but a more pragmatic mix between large hubs and smaller purpose-built relays. These small relays might be outlets for large publishers, small groups, or nerds who also run their own SMTP servers and lightning nodes.\n\nThe point of the outbox model is that these small nodes be _possible_ to run, and _discoverable_ from the rest of the network so that we can preserve the censorship-resistant qualities of nostr that brought us here in the first place.\n\n# Blast It!\n\nIt's no secret that I've long been a critic of Mutiny's blastr relay implementation. My main objection is that the blastr approach doesn't account for the hard limits involved in scaling smaller relays. If the goal is to cross-pollinate notes across all relays in the network, all relays will require the same size database, and contain all notes in the network. This works right now (sort of), but as the network grows, the relays running on a $5 VPS are going to have their disks fill up and will inevitably fall over.\n\nnevent1qyvhwumn8ghj76r0v3kxymmy9ehx7um5wgcjucm0d5hszxnhwden5te0wpuhyctdd9jzuenfv96x5ctx9e3k7mf0qythwumn8ghj7un9d3shjtnwdaehgu3wvfskuep0qqs07jr9qx49h53nhw76u7c3up2s72k7le2zj94h5fugmcgtyde4j9qfrnwxj\n\nNot only that, but the content breakdown on any given relay by default becomes an undifferentiated soup of \"GM\", chinese notes, bots, bitcoin memes, and porn. Blastr makes it impossible to run an interesting relay without implementing write policies.\n\nWhich is actually fine! Because that's always been true ‚Äî¬†servers that allow anonymous uploads always get abused. Tony is just helpfully pointing out to us that this is no less true of nostr relays. I only wish he could have waited a little longer before mounting his attack on the network, because lots of hobbyists are interested in running interesting relays, but the tools don't yet exist to protect those servers from unsolicited notes.\n\nOne other note on blastr ‚Äî Tony at one point described blastr as a relay proxy. This is an interesting perspective, which puts things in a different light. More on proxies later.\n\n# Ban Jack?\n\nHere's a thought experiment: how might we actually \"ban blastr\"? @Pablof7z suggested to me in a conversation that you could configure your relay to check every note that gets published to your relay against the big nostr hubs, and if it exists on any of them to simply delete it. Of course, that would result in your relay being basically empty, and the hubs having all of your content. That's game theory for you I guess.\n\nAnother approach that was floated was to encourage users to only publish to small relays. In theory, this would force clients to implement outbox so users could still see the content they were subscribed to. Fiatjaf even [posted two identical notes](nevent1qydhwumn8ghj7un9d3shjtnhv4ehgetjde38gcewvdhk6tcprfmhxue69uhhq7tjv9kkjepwve5kzar2v9nzucm0d5hszymhwden5te0wp6hyurvv4cxzeewv4ej7qpq44nafdr27wwd0cgs29r2ddg7zz94gww2a8ym6uhf3p76h33uxj9ssn68l6), one to his personal relay, and one to a hub to see which would get more engagement. The note posted to the mainstream relay got 10x more replies and likes than the more obscure note.\n\nnostr:nevent1qyd8wumn8ghj7urewfsk66ty9enxjct5dfskvtnrdakj7qgmwaehxw309aex2mrp0yh8wetnw3jhymnzw33jucm0d5hszymhwden5te0wp6hyurvv4cxzeewv4ej7qpqdc2drrmdmlkcyna5kkcv8yls4f8zaj82jjl00xrh2tmmhw3ejsmsmp945r\n\nOf course, this is thwarted by blastr, since blastr not only replicates notes posted to it, it also actively crawls the network as well. So the next logical step in this train of thought would be for hubs to encourage people to use small relays by actively blocking high-profile accounts.\n\nnostr:nevent1qydhwumn8ghj7argv4nx7un9wd6zumn0wd68yvfwvdhk6tcpzdmhxue69uhhyetvv9ujue3h0ghxjme0qyd8wumn8ghj7urewfsk66ty9enxjct5dfskvtnrdakj7qpqpjhnn69lej55kde9l64jgmdkx2ngy2yk87trgjuzdte2skkwwnhqv5esfq\n\nThis would of course never happen (Damus is one client that hasn't implemented NIP 65, and they also run the biggest relay), but it was a fun thought experiment. At any rate, the silliness of the suggestion didn't stop certain people from getting offended that we would \"disrupt the free market\" by \"forcing\" our opinions on everyone else. Oh well.\n\n# Death to Blastr\n\nIn reality, even though blastr makes it a little harder to adopt outbox in the short term, its days are numbered. Eventually, relay operators will start to feel the pain of unsolicted notes, and will either shut their relays down or look for tools that will help them curate the content they host.\n\nFrom my perspective, these tools take two forms ‚Äî read protection and write protection. This is something I alluded to in my [talk at Nostrasia](https://www.youtube.com/watch?v=R-5DHymkfzw) last November.\n\nWrite protection is straightforward ‚Äî already many relays have access control lists based on active subscriptions, invite codes, or just static whitelists that determine who is allowed to post to a given relay, or what event authors are represented there. This approach effectively prevents blastr from using relays as free storage, which is a huge improvement.\n\nRead protection is more tricky, because anything publicly readable will be scraped by blastr and replicated to unauthenticated-write relays across the network. In most cases, this is ok, but there are use cases for relays to exist that host a unique collection of notes oriented around some organizing principle. Unfortunately, with blastr in action (or any scraper that might exist), the only way to do this is to actively protect proprietary content. There are a few approaches that can work to make this happen:\n\n- IP-based access control lists\n- AUTH-based access control lists\n- Stripping signatures when serving events\n- Storing and serving encrypted content\n\nEach of these approaches has its own set of trade-offs. But depending on use case, any of them or a combination of them could work to allow relay operators to carve out their own piece of the nostr-verse. In fact, this is a big part of what Coracle is about ‚Äî the [white-labeled version of the product](https://info.coracle.social/) confines certain notes to proprietary relays, with optional encrypted group support.\n\nEnough of my polemic against blastr. Let's talk about how to make the outbox model actually work.\n\n# Hints are pointless\n\nRight now, clients that implement the outbox model rely pretty heavily on relay hints to find related notes ‚Äî whether user profiles, reply parents, or community definitions. The problem with hints is that they are prone to link rot. Many of the relays that were set up a year ago when nostr took off are no longer online, and yet they persist in user relay lists, and in relay hints. These hints can't be updated ‚Äî they are set in stone. What this means is that a _different_ mechanism has to be used to find the notes the hints were supposed to help locate.\n\nBecause of this, I've come around to the position that hints are basically pointless. They are fine as a stopgap, and might be appropriate for certain obscure and ill-defined use cases where relay urls are the most durable address type available. But they provide basically no value in supporting the long-term robustness of the network.\n\nWhat are durable, however, are pubkeys. Pubkeys are available pretty much everywhere, except in event id hints ‚Äî and there is a [proposal](https://github.com/nostr-protocol/nips/issues/1101#issuecomment-2001940642) in the works to add a pubkey to those too. The cool thing about pubkeys as hints is that once you have a pubkey, all you need to do is find that person's kind 10002 inbox/outbox selections, and you should be able to find any note they have published.\n\nThis goes with the caveat that when users change their relay selections, or rotate their key, they (or their relays) should be sure to copy their notes to the new relay/pubkey.\n\nThe question then is: how do I find a given pubkey's relay selections?\n\nThere are already several mechanisms that make this reasonably easy. First of all, [NIP 65](https://github.com/nostr-protocol/nips/blob/master/65.md) explicitly recommends publishing relay selections to a wide range of relays. This is a place where the blastr approach is appropriate. As a result, relay selections are _usually_ available on the most popular public relays. Then there are special purpose relays like purplepag.es, which actively seek out these notes and index them.\n\nThese indexes are not confined to relays either. It would be trivial to create a DVM that you could ask for a pubkey's relay selections, optionally for a fee. Alex Gleason's [proxy tag](https://github.com/nostr-protocol/nips/blob/master/48.md) could also be used to indicate indexes that exist outside the nostr network ‚Äî whether that be torrents, DHT keys, or what have you.\n\nThe best part is that this doesn't negatively impact the decentralization of the network because in principle these indexes are stateless ‚Äî in other words, they're easily derived from the state of the public part of the nostr network.\n\n# Just do it for me\n\nLooping back to where we started ‚Äî the complexity and technical challenges of implementing the outbox model ‚Äî there is a simple solution that many people have experimented with in different ways that could solve both issues at once: proxies.\n\nAs I mentioned above, Tony thinks of blastr as a proxy, and he's right. More specifically, it's a write-proxy. This is only part of its functionality (it also acts as an independent agent which crawls the network. EDIT: apparently this is not true!), but it is an essential part of how people use it.\n\nAnother kind of proxy is a read proxy. There are several implementations of these, including my own [multiplextr](https://github.com/coracle-social/multiplextr) proxy, which is outbox-compatible (although it requires a wrapper protocol for use). The advantage of a proxy like this is that it can reduce the number of connections a client has to open, and the number of duplicate events it has to download.\n\nProxies can do all kinds of fancy things in the background too, like managing the outbox model on behalf of the client, building an index of everything the user would be likely to ask for in advance to speed up response times, and more.\n\nOne interesting possibility is that a NIP 46 signer could double as a proxy, reducing the number of round trips needed. And since a signer already has access to your private key, this kind of proxy would not result in an escalation in permissions necessary for the proxy to work.\n\n# It's simple\n\nThe number of cool and creative solutions to the content replication and indexing problem is huge, and certainly doesn't end with blastr. Just to summarize the next steps I'm excited to see (to be honest, I want to build them myself, but we all know how that goes):\n\n- More clients supporting outbox\n- Outbox implementations maturing (Coracle's still has some issues that need to be worked out)\n- A shift from relying on relay hints to relying on pubkey hints + relay selection indexes of some kind\n- Proxy/signer combos which can take on some of the heavy lifting for clients of delivering events to the right inboxes, and pulling events from the right outboxes\n\nLet's get building!\n","sig":"784cf283f1b9e1606fae07190eecdb901ab16ed4b50cf2fe2415f5da7b3e3b68f0699bc36595b0e9fe3c4e87b8a62ac08e84981f1eb75889a623a1e665a0c119"},"naddr1qq2hxsf5x3tnv5rkw3c5gtf4fehy77jzv94hjqgkwaehxw309aex2mrp0yhxummnw3ezucnpdejqygpqnphms0nhtktdrzx2tjwlzr8x6cf7p6m72a52pu939vmumtppkvpsgqqqw4rs8zx0pz":{"kind":30023,"id":"a100eeefc1bb4a0ea332a613f3adfb9a279d6cda45de16cfa1479960a72157c6","pubkey":"20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3","created_at":1714481900,"tags":[["client","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1714480176"],["d","sA44W6PvtqD-5NnOzBaky"],["image","https://yakihonne.s3.ap-east-1.amazonaws.com/20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3/files/1714480176495-YAKIHONNES3.png"],["title","Nostr‰∏≠ÁªßÁΩëÁªúÁöÑÂèØÁî®ÊÄßÂíåÂèØÈù†ÊÄß‰ºòÂåñ"],["summary","üöÄ YakiHonneÁ¨¨‰∏âÈò∂ÊÆµÁôΩÁöÆ‰π¶Â∑≤ÁªèÂèëÂ∏É„ÄÇÂÖ≥ÈîÆÁÇπÔºö\n1. Êé¢ËÆ®RelayÂèØËÉΩÁöÑÁªèÊµéÊøÄÂä±ÂíåËØÅÊòéÊú∫Âà∂Ôºå‰ª•Ê≠§ÊîπÂñÑRelayÁΩëÁªúÁöÑÂèØÁî®ÊÄßÂíåÂèØÈù†ÊÄßÔºå‰ªéËÄå‰∏∫YakiHonneÂÆûÁé∞Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÊèê‰æõÂùöÂÆûÁöÑÂü∫Á°Ä\n2. ÂØπÁé∞ÊúâÂ™í‰ΩìÂçèËÆÆÁöÑÂéª‰∏≠ÂøÉÂåñÁâπÊÄßËøõË°åÊï∞ÊçÆÂàÜÊûêÔºåÂ∑≤ÁªèËØÅÊòéNostr Áõ∏ÂØπ‰∫éMastodon„ÄÅBlueskyÂèäFarcasterÁ≠âÊòØÂΩìÂâçÊúÄ‰∏∫Âéª‰∏≠ÂøÉÂåñÁöÑÂ™í‰ΩìÂçèËÆÆ„ÄÇ"],["zap","20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3","","100"],["t","yakihonne"],["t","nostr"],["t","relay"]],"content":"# Nostr‰∏≠ÁªßÁΩëÁªúÁöÑÂèØÁî®ÊÄßÂíåÂèØÈù†ÊÄß‰ºòÂåñ\nWendyDing @YakiHonne.com\n\n[YakiHonne](https://yakihonne.com)  Ëá¥Âäõ‰∫éÊûÑÂª∫‰∏Ä‰∏™ÊäóÂÆ°Êü•ÁöÑÂéª‰∏≠ÂøÉÂåñÂ™í‰Ωì„ÄÇ‰∏Ä‰∏™Ë∂≥Â§üÂéª‰∏≠ÂøÉÂåñ‰∏î‰∏çÂèØÁØ°ÊîπÁöÑÂ≠òÂÇ®Â±ÇÊòØÂÆûÁé∞Ëøô‰∏™ÁõÆÊ†áÁöÑÂÖ≥ÈîÆ„ÄÇÂü∫‰∫é[NostrÂçèËÆÆ](https://github.com/nostr-protocol/nostr)ÁöÑRelayÁΩëÁªúÊèê‰æõ‰∫Ü‰∏Ä‰∏™‰ºòÁßÄÁöÑÊäóÂÆ°Êü•Â≠òÂÇ®Ëß£ÂÜ≥ÊñπÊ°à„ÄÇ[Relay](https://nostr.com/relays)Âú®Ê∂àÊÅØÂ≠òÂÇ®ÂíåÂπøÊí≠‰∏≠ÂÖÖÂΩìÁùÄ‰∏≠‰ªãÁöÑËßíËâ≤ÔºåÁî®Êà∑ÂèØ‰ª•Ëá™‰∏ªÊâòÁÆ°RelayÔºåÂπ∂Ëá™Áî±ÈÄâÊã©Âú®Âì™‰∫õ‰∏≠Áªß‰∏äÂπøÊí≠‰ø°ÊÅØÊàñÂøΩÁï•Êüê‰∫õ‰∏≠Áªß„ÄÇÂΩìÊüê‰∏™RelayÊãíÁªùÊúçÂä°ÊàñËÄÖË¢´ÂÖ≥Èó≠Êó∂ÔºåÂÖ∂‰ªñRelayÂèØ‰ª•ÁªßÁª≠‰º†Êí≠ËØ•‰ø°ÊÅØ([fiatjaf.2019](https://fiatjaf.com/nostr.html))„ÄÇËøôÁßçÊú∫Âà∂Ôºå‰ΩøÂæó[ÂΩ±Â≠êÁ¶Å‰ª§](https://en.wikipedia.org/wiki/Shadow_banning)Êàê‰∏∫‰∫Ü‚ÄúÊâìÂú∞Èº†Ê∏∏Êàè‚ÄùÔºåËØïÂõæ‰ªéÊüê‰∏™Êï∞ÊçÆÊ∫êÂ∞ÜÁî®Êà∑Â±èËîΩÂèòÂæóÂá†‰πé‰∏çÂèØËÉΩÔºå‰∏∫ËÆ∏Â§ö‰∫âËÆÆ‰∫∫Â£´ÂíåÂÜÖÂÆπÊèê‰æõ‰∫ÜË®ÄËÆ∫Ëá™Áî±ÁöÑÁ©∫Èó¥„ÄÇ\n\nÂ∞ΩÁÆ°Relay‰∏∫Ëß£ÂÜ≥Â™í‰ΩìÂÆ°Êü•ÂíåÂÜÖÂÆπÂà†Èô§ÈóÆÈ¢òÊèê‰æõ‰∫Ü‰∏Ä‰∏™ÁÆÄÂçïÊúâÊïàÁöÑÊäÄÊúØÊñπÊ°àÔºå‰ΩÜÁé∞ÊúâÁöÑRelayÁΩëÁªúÈù¢‰∏¥ÁùÄ‰∏§‰∏™‰∏ªË¶ÅÁöÑÈóÆÈ¢ò„ÄÇÈ¶ñÂÖàÔºåRelayÁΩëÁªúÁº∫‰πèÊøÄÂä±ÔºåËøôÂØºËá¥ÂÖ∂Á®≥ÂÆöÊÄßÂíåÂèØÁî®ÊÄß‰∏çË∂≥„ÄÇÊäóÂÆ°Êü•ÁΩëÁªú‰æùËµñ‰∫é‰ºóÂ§öÂàÜÊï£ÁöÑÂèØÁî®RelayÂíåRelayÁöÑÊõ¥ÂπøÊ≥õÁöÑ‰ΩøÁî®Êù•‰øùËØÅ‰ø°ÊÅØÁöÑËá™Áî±ÊµÅÈÄöÔºà[Rabble,2024](https://yakihonne.com/article/rabble@nos.social/Why-has-Bluesky-grown-bigger-than-Nostr-w3eb29))„ÄÇÂÖ∂Ê¨°ÔºåÂ∞ΩÁÆ°RelayÁöÑÊ†∏ÂøÉËÅåËÉΩÊòØÂéª‰∏≠ÂøÉÂåñÂú∞Â≠òÂÇ®ÂíåÂàÜÂèë‰ø°ÊÅØÔºåÂÆÉ‰ª¨Êú¨Ë∫´Êó†Ê≥ï‰øùËØÅ‰ø°ÊÅØÁöÑÁªùÂØπ‰∏çÂèØÁØ°Êîπ„ÄÇRelayËäÇÁÇπÊúâËÉΩÂäõÁØ°ÊîπÊàñÂà†Èô§‰ø°ÊÅØ„ÄÇÂõ†Ê≠§ÔºåÊú¨ÊñáÂ∞ÜÈáçÁÇπÊé¢ËÆ®Â¶Ç‰ΩïÈÄöËøáÂºïÂÖ•ÁªèÊµéÊøÄÂä±ÂíåËØÅÊòéÊú∫Âà∂Ëß£ÂÜ≥‰ª•‰∏äËøô‰∏§‰∏™ÈóÆÈ¢òÔºå‰ªéËÄåÂä†Âº∫RelayÁΩëÁªúÁöÑÂèØÁî®ÊÄßÂíåÂèØÈù†ÊÄßÔºåÁ°Æ‰øùÂÖ∂‰∏∫Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÊèê‰æõÂùöÂÆûÁöÑÊîØÊåÅ„ÄÇ\n \n## ‰∏Ä„ÄÅNostrÊòØÂéª‰∏≠ÂøÉÂåñÁöÑ\n\nNostr ÁöÑËÆæËÆ°Ê†∏ÂøÉÊòØÁî®Êà∑Ë¥¶Êà∑„ÄÅ‰∏≠ÁªßÂèäÂÆ¢Êà∑Á´ØÁõ∏‰∫íÂàÜÁ¶ªÔºå‰∏çÂèó‰ªª‰ΩïÂÆû‰ΩìÁöÑÊéßÂà∂ÂíåÂÆ°Êü•„ÄÇÁî®Êà∑ÂèØ‰ª•Ëá™‰∏ªÊâòÁÆ°RelayÔºåÂÜÖÂÆπÂèØ‰ª•Âú®Â§ö‰∏™‰∏≠Áªß‰∏äÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢„ÄÇÂç≥‰æøÊüê‰∫õRelayÊãíÁªùÊúçÂä°ÊàñË¢´ÂÖ≥Èó≠ÔºåÂÖ∂‰ªñRelay‰æùÁÑ∂ÂèØ‰ª•ÁªßÁª≠Â≠òÂÇ®Âíå‰º†Êí≠‰ø°ÊÅØ„ÄÇËøô‰∏éFediverse Â∫îÁî®Â¶Ç[Mastodon](https://nostr.com/comparisons/mastodon)„ÄÅ[Bluesky](https://bsky.social/about/blog/5-5-2023-federation-architecture)ÂèäÂÖ∂‰ªñWeb3ÂçèËÆÆÂ¶Ç[Farcaster](https://docs.farcaster.xyz/learn/architecture/overview)‰∏çÂêå„ÄÇ\n\n* Âú®Mastodon‰∏≠ÔºåÁî®Êà∑Ë¥¶Êà∑‰∏éÁÆ°ÁêÜÂëòÊéßÂà∂ÁöÑÊúçÂä°Âô®ÁªëÂÆö„ÄÇÂõ†Ê≠§ÔºåÂÆû‰æãÊâÄÊúâËÄÖÂèØ‰ª•Á¶ÅÊ≠¢Áî®Êà∑Â∞±ÂÉè Twitter‰∏ÄÊ†∑Ôºå‰ªñ‰ª¨‰πüÊúâÊùÉÈòªÊ≠¢ÂÖ∂‰ªñÂÆû‰æãÔºå‰ªéËÄåÂÆûÊñΩÂÆ°Êü• ([Rozenshtein,2023](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4213674))„ÄÇ\n* Â∞ΩÁÆ°BlueskyÂÆ£‰º†Ëá™Â∑±ÊòØ‰∏Ä‰∏™ÂºÄÊîæÂíåÂéª‰∏≠ÂøÉÂåñÁöÑÁΩëÁªúÔºåÂÆûÈôÖ‰∏äÊòØË¢´ËØØÂØºÁöÑÔºà[Fiatjaf:Bluesky, 2023](https://fiatjaf.com/ab1127fb.html))ÔºöBlueskyÁõ¥Êé•ÊéßÂà∂atprotoÂçèËÆÆÔºåËøô‰ΩøÂæó Bluesky ÂèØÈöèÊó∂Êõ¥ÊîπÂçèËÆÆÔºõBlueskyÁöÑË∫´‰ªΩÁ≥ªÁªü‰æùËµñ‰∫é‰∏≠ÂøÉÊúçÂä°Âô®Êù•Áª¥Êä§ÂíåËÆ§ËØÅÂÖ®ÁêÉIDÔºåËøô‰∏ÄÁ≥ªÁªüÂÖÅËÆ∏BlueskyÊéßÂà∂Âπ∂ÊΩúÂú®Âú∞Á¶ÅÊ≠¢‰ªª‰ΩïÁî®Êà∑ÔºõÂç≥‰ΩøÁî®Êà∑ÂèØ‰ª•Ëá™Ë°åÊâòÁÆ°ÂÜÖÂÆπÔºåÊâÄÊúâÂÜÖÂÆπÈÉΩÂøÖÈ°ªÈÄöËøáBlueskyÁöÑ‰∏≠ÂøÉÊúçÂä°Âô®ËøõË°åÂàÜÂèë„ÄÇÊ≠§Â§ñÔºåBlueskyÁöÑËÆæËÆ°Âπ∂‰∏çÈºìÂä±ÊàñÊîØÊåÅ‰∏éÂÖ∂‰ªñÁΩëÁªúÊèê‰æõÂïÜÁöÑÊúâÊïà‰∫íÊìç‰ΩúÊÄß„ÄÇËøôÊÑèÂë≥ÁùÄÂ¶ÇÊûúÁî®Êà∑ÂØπBluesky‰∏çÊª°ÊÑèÔºåÂÖ∂ÈÄâÊã©ÈùûÂ∏∏ÊúâÈôê„ÄÇ\n* Farcaster ‰æùËµñÂ§ßÂûã‰∏≠ÂøÉ ([Hubs](https://docs.farcaster.xyz/learn/architecture/hubs)) Êù•Â≠òÂÇ®ÊâÄÊúâÁî®Êà∑ÁöÑÊï∞ÊçÆÔºåËøô‰∫õHubÂÖ∑ÊúâÊï∞ÊçÆÁöÑÂÆ°Êü•Âíå‰º†Êí≠ÊùÉ„ÄÇÈöèÁùÄÁΩëÁªúÊâ©Â±ïÔºåHubÁöÑÂ≠òÂÇ®ÈúÄÊ±ÇÂíåÊàêÊú¨ÊøÄÂ¢û„ÄÇÊçÆ‰º∞ËÆ°ÔºåËã•FarcasterÁöÑÊó•Ê¥ªÁî®Êà∑ÊØèÂë®Â¢ûÈïø5%ÔºåÂà∞2024Âπ¥ÔºåËøêË°å‰∏Ä‰∏™HubÁöÑÊàêÊú¨Â∞ÜËææÂà∞3500ÁæéÂÖÉ/Âπ¥ÔºåÂà∞2027Âπ¥Â∞ÜÈ£ôÂçáËá≥690‰∏áÁæéÂÖÉ/Âπ¥([Varun,2022](https://hackmd.io/@farcasterxyz/ry0QL4M4o))„ÄÇÈ´òÊòÇÁöÑËøêËê•ÊàêÊú¨‰ΩøÂæóÂè™ÊúâÂ∞ëÊï∞ÂÖ¨Âè∏ËÉΩËøêËê•HubÔºåÂØºËá¥HubÊï∞ÈáèÂáèÂ∞ëÂíåÁΩëÁªú‰∏≠ÂøÉÂåñÁöÑÈ£éÈô©Â¢ûÂä†„ÄÇÂêåÊó∂ÔºåHubËøêËê•ËÄÖÂèØËÉΩÂêàË∞ãÊàñ‰∏≤ÈÄöÔºåÈôç‰ΩéÊüê‰∫õÂÜÖÂÆπÁöÑ‰ºòÂÖàÁ∫ßÊàñÂØπÂÖ∂ËøõË°åÂÆ°Êü•([Varun,2022](https://hackmd.io/@farcasterxyz/ry0QL4M4o))„ÄÇ‰∏éÊ≠§Áõ∏ÂèçÔºåNostrÈºìÂä±Â§ßÂûãHub‰∏é‰∏∫ÁâπÂÆöÁõÆÁöÑÊûÑÂª∫ÁöÑÂ∞èÂûã‰∏≠Áªß‰πãÈó¥ÁöÑÊ∑∑Âêà‰ΩøÁî®,Â¶Ç[Âõæ1](https://hackmd.io/_uploads/H1b0M7Cb0.png)ÊâÄÁ§∫„ÄÇËøô‰∫õÂ∞èÂûã‰∏≠ÁªßÂèØ‰ª•Áî±Â§ßÂûãÂá∫ÁâàÂïÜ„ÄÅÂ∞èÁªÑÁªáÊàñÊûÅÂÆ¢Âª∫Á´ãÔºå‰øùÊåÅÁΩëÁªúÁöÑÂéª‰∏≠ÂøÉÂåñÂíåÂºÄÊîæÊÄß([Hodlbod:Outbox,2024](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny))„ÄÇ\n\n![WX20240430-155010@2x](https://hackmd.io/_uploads/H1b0M7Cb0.png)\n**Âõæ1. [Farcaster Hub](https://docs.farcaster.xyz/learn/architecture/hubs) vs Nostr Relay*\n\n‰∫ãÂÆû‰∏ä‰πüÊòØÂ¶ÇÊ≠§„ÄÇ[Gareth TysonÁ≠â](https://arxiv.org/html/2402.05709v1#S6)Ôºå‰ª•2023 Âπ¥ 7 Êúà 1 Êó•Ëá≥ 2023 Âπ¥ 12 Êúà 31 Êó•ÁöÑ 1780 ‰∏áÂ∏ñÂ≠ê„ÄÅ150 ‰∏á pubkeyÔºàÁî®Êà∑ÔºâÂíå 712 ‰∏™‰∏≠ÁªßÁöÑÊï∞ÊçÆÈõÜ‰∏∫Ê†∑Êú¨ÂØπNostrÁöÑÂéª‰∏≠ÂøÉÂåñÁ®ãÂ∫¶ËøõË°åÂàÜÊûêÔºåÂèëÁé∞Â∏ñÂ≠êÂíåÁî®Êà∑Âú®‰∏≠Áªß‰∏äÁöÑÂàÜÂ∏ÉÂèä‰∏≠ÁªßÊâòÁÆ°ÂàÜÂ∏ÉË°®Áé∞Âá∫ÊûÅÈ´òÁöÑÂéª‰∏≠ÂøÉÂåñÁ®ãÂ∫¶„ÄÇËøôËØÅÊòé‰∫ÜNostrÂçèËÆÆÁöÑÊäÄÊúØÁªìÊûÑ‰ºò‰∫éÁé∞ÊúâÁöÑÊâÄÊúâÂéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÂçèËÆÆÁöÑËÆæËÆ°„ÄÇ\n\n* Â∏ñÂ≠êÂíåÁî®Êà∑Âπ∂Ê≤°ÊúâÈ´òÂ∫¶ÁöÑÈõÜ‰∏≠Âú®‰∏™Âà´RelayÔºåËÄåÊòØÂπøÊ≥õÂàÜÂ∏ÉÔºåÂ¶Ç[Âõæ2](https://hackmd.io/_uploads/HkHHQX0ZC.png)ÊâÄÁ§∫„ÄÇÂ§ßÂ§öÊï∞Ôºà93%ÔºâÂ∏ñÂ≠êÂèØ‰ª•Âú®Â§ö‰∏™‰∏≠Áªß‰∏≠ÊâæÂà∞ÔºåÊúâ 178 ‰∏™‰∏≠ÁªßÔºà25%ÔºâÂàÜÂà´ÊâòÁÆ°‰∫ÜÂ§ßÈáèÔºàË∂ÖËøá 5%ÔºâÁöÑÂ∏ñÂ≠ê„ÄÇÊ†πÊçÆÁî®Êà∑Êï∞ÈáèÁªüËÆ°ÔºåÂç≥‰æøÂÖ≥Èó≠ÊµÅÈáèÂâç50ÁöÑRelayÔºå‰æùÁÑ∂Êúâ90%ÁöÑÂÜÖÂÆπÂèØ‰ª•Ë¢´ËÆøÈóÆÔºõËÄåÊ†πÊçÆÂ∏ñÂ≠êÊï∞ÈáèÁªüËÆ°ÔºåÂÖ≥Èó≠Â∏ñÂ≠êÊï∞ÈáèÂâç30ÁöÑRelayÂêéÔºå‰ªçÊúâË∂ÖËøá90%ÁöÑÂÜÖÂÆπ‰øùÊåÅÂèØËÆøÈóÆ„ÄÇÂç≥‰ΩøÁßªÈô§Ââç50‰∏™RelayÔºå‰πüÊúâ71%ÁöÑÂÜÖÂÆπ‰ªçÂèØË¢´ËÆøÈóÆÔºåÂ¶Ç[Âõæ3.1](https://hackmd.io/_uploads/Sk3sm7CZC.png)ÊâÄÁ§∫„ÄÇËøôÁßçÂéª‰∏≠ÂøÉÂåñÁ®ãÂ∫¶Ëøú‰ºò‰∫éFediverse ÁöÑÂ∫îÁî®„ÄÇ\n![WX20240430-155217@2x](https://hackmd.io/_uploads/HkHHQX0ZC.png)\n**Âõæ2. Ê†πÊçÆ‰∏≠ÁªßÁî®Êà∑Êï∞ÊéíÂêçÔºåÂâç15‰∏™Âú∞Âå∫ÂíåËá™Ê≤ªÁ≥ªÁªü‰∏≠ÁöÑ‰∏≠Áªß„ÄÅÂ∏ñÂ≠êÂíåÁî®Êà∑ÁöÑÊØî‰æã„ÄÇ Êù•Ê∫ê: Gareth Tyson et al. (2024), \"Exploring the Nostr Ecosystem: A Study of Decentralization and Resilience,\" arXiv preprint arXiv:2402.05709.*\n* ‰∏≠ÁªßÊâòÁÆ°Âú∞ÂüüÂèäËá™Ê≤ªÁ≥ªÁªüÂàÜÂ∏ÉÁöÑÂéª‰∏≠ÂøÉÂåñ„ÄÇ‰∏≠ÁªßÂàÜÂ∏ÉÂú® 50‰∏™ÂõΩÂÆ∂Âíå 151 ‰∏™Ëá™Ê≤ªÁ≥ªÁªü‰∏≠ÔºåÂ¶Ç[Âõæ4](https://hackmd.io/_uploads/HJIwNXR-R.png)ÊâÄÁ§∫„ÄÇ‰ª§‰∫∫ÊÉäËÆ∂ÁöÑÊòØÔºåÊ≤°ÊúâÂçï‰∏™ÂõΩÂÆ∂ÊàñËá™Ê≤ªÁ≥ªÁªüÊâòÁÆ°Ë∂ÖËøá25% ÁöÑ‰∏≠Áªß„ÄÇË∂ÖËøá80%ÁöÑÂ∏ñÂ≠êÂú®ÁßªÈô§Ââç10‰∏™Ëá™Ê≤ªÁ≥ªÁªüÂêé‰ªçÁÑ∂ÂèØÁî®ÔºåÂ¶ÇÂõæ[Âõæ3.2](https://hackmd.io/_uploads/Sk3sm7CZC.png)ÊâÄÁ§∫„ÄÇ‰ª•Mastodon‰∏∫‰æã([Raman et al., 2019](https://doi.org/10.1145/3355369.3355572))ÔºåÂú®ÁßªÈô§ÊâòÁÆ°ÂÆû‰æãÁöÑÂâç10‰∏™Ëá™Ê≤ªÁ≥ªÁªüÂêéÔºåÂ∏ñÂ≠êÂèØÁî®ÊÄß‰∏ãÈôçËá≥‰∏çÂà∞10%„ÄÇËøô‰∏ªË¶ÅÊòØÁî±‰∫éNostrÁöÑ‰∏≠ÁªßÂú®‰∏çÂêåAS‰∏≠ÁöÑÂàÜÂ∏ÉÊõ¥ÂùáÂåÄÔºå‰ΩøÂÆÉ‰ª¨ÂØπÂçï‰∏™ASÊïÖÈöúÁöÑÊäµÊäóÂäõÊõ¥Âº∫„ÄÇ\n\n![Fig.3](https://hackmd.io/_uploads/Sk3sm7CZC.png)\n**Âõæ3.1.ÁßªÈô§ÂâçX Relays; Âõæ3.2.ÁßªÈô§ÂâçXËá™Ê≤ªÁ≥ªÁªü. Êù•Ê∫ê: ËßÅÂõæ2*\n\n![WX20240430-155010@2x](https://hackmd.io/_uploads/HJIwNXR-R.png)\n\n**Âõæ4.‰∏çÂêåÂõΩÂÆ∂RelayÊï∞ÈáèÂàÜÂ∏É(Êï∞ÊçÆÊù•Ëá™Nostr.Watch)*\n\n\n## ‰∫å„ÄÅRelayÁöÑÂèØÁî®ÊÄßÂàÜÊûê\n\nRelayÊòØNostrÂéª‰∏≠ÂøÉÂåñÁöÑÁÅµÈ≠Ç„ÄÇË¶ÅÊûÑÂª∫‰∏Ä‰∏™ÁúüÊ≠£ÊäóÂÆ°Êü•ÁöÑRelayÁΩëÁªúÔºåÈúÄË¶ÅÊª°Ë∂≥‰∏§‰∏™Êù°‰ª∂ÔºöRelayËäÇÁÇπÂøÖÈ°ªË∂≥Â§üÂàÜÊï£ÂíåÂèØÁî®Ôºå‰ª•Á°Æ‰øù‰ø°ÊÅØÂèØ‰ª•Ëá™Áî±Âú∞Â≠òÂÇ®Âíå‰º†Êí≠ÔºõÂç≥‰ΩøÊòØÂ∞èËßÑÊ®°ÁöÑRelayËäÇÁÇπ‰πüÂ∫îÂπøÊ≥õÂèëÁé∞Âíå‰ΩøÁî®„ÄÇ\n\nÊà™Ëá≥2024Âπ¥4Êúà23Êó•ÔºåÂÖ®ÁêÉ‰ªÖÊúâ[639](https://nostr.watch/relays/find)‰∏™RelayÂú®Á∫øÔºå**ÊØîÂéªÂπ¥ÂêåÊúüÂáèÂ∞ë‰∫Ü‰∏âÂàÜ‰πã‰∫å**Ôºå‰∏ªË¶ÅÂàÜÂ∏ÉÂú®ÂåóÁæéÂíåÊ¨ßÊ¥≤ÔºåËøô‰∏§Â§ßÊ¥≤RelayÂç†ÊÄªÊï∞ÁöÑ[80%](https://nostr.watch/relays/statistics)„ÄÇÊ≠§Â§ñÔºåÁî±‰∫éÁΩëÁªúÊù°‰ª∂ÁöÑÂ∑ÆÂºÇÔºå‰∏çÂêåÂú∞Âå∫ÁöÑRelayÊÄßËÉΩ‰πüÊúâÊòæËëóÁöÑ‰∏çÂêåÔºå‰æãÂ¶ÇÂú®Êñ∞Âä†Âù°ÊµãËØïÊó∂‰ºöÂèëÁé∞‰∫öÊ¥≤„ÄÅÂåóÁæéÂíåÊ¨ßÊ¥≤ÁöÑRelayÂìçÂ∫îÈÄüÂ∫¶Â∑ÆÂºÇËæÉÂ§ßÔºåÂ¶Ç[Âõæ5]()ÊâÄÁ§∫„ÄÇÊ≠§Â§ñÔºåRelayÂ§¥ÈÉ®ÊïàÂ∫îÊòéÊòæÔºåÊéíÂêçÁ¨¨‰∏ÄÁöÑRelayÊâòÁÆ°‰∫Ü73%ÁöÑÂ∏ñÂ≠ê„ÄÇÂ∞ΩÁÆ°Ëøô‰∫õË¥¥Â≠êÂú®Â§ö‰∏™Relay‰∏≠ÈÉΩÂèØ‰ª•Ë¢´ÊâæÂà∞ÔºåNostr‰æùÁÑ∂ÊòØÊúÄ‰∏∫Âéª‰∏≠ÂøÉÂåñÁöÑ([fiatjaf:Nostr,2024](https://fiatjaf.com/87a208d9.html))„ÄÇ‰ΩÜËøôÁßçÈõÜ‰∏≠‰ΩøÁî®‰∏çÂà©‰∫éÂ∞èrelayËäÇÁÇπË¢´ÂπøÊ≥õÁöÑÂèëÁé∞Âíå‰ΩøÁî®ÊàñËÄÖÊòØÁî®Êà∑Ë¢´ÂÖ≥Ê≥®ÂíåÂèëÁé∞ÔºåÈôç‰Ωé‰∫ÜÂ∞èËäÇÁÇπÂª∫ËÆæRelayÁöÑÂä®ÂäõÔºåÂ∞§ÂÖ∂ÊòØÂú®ÁîüÊÄÅÁº∫‰πèÊøÄÂä±ÁöÑÊÉÖÂÜµ‰∏ã„ÄÇ\n\n![image](https://hackmd.io/_uploads/H15C4XRWC.png)\n\n**Âõæ.5 RelayÂèØÁî®ÊÄßÊµãËØï (Êï∞ÊçÆÊù•Ëá™Nostr.Watch).*\n\n* RelayÊï∞ÈáèÂáèÂ∞ëÂèä‰∏çË∂≥Â§üÁ®≥ÂÆöÁöÑËÉåÂêéÂéüÂõ†ÊòØÁº∫‰πèÊúâÊïàÁöÑÁªèÊµéÊøÄÂä±([Shinobi:Nostr Scale,2023](https://bitcoinmagazine.com/culture/can-nostr-grow-to-twitter-size))„ÄÇÂú®NostrÁîüÊÄÅÁ≥ªÁªü‰∏≠ÔºåÁî±‰∫éÂÆ¢Êà∑Á´ØÈÄöÂ∏∏Áº∫‰πèÁ®≥ÂÆöÁöÑÊî∂ÂÖ•ÊàñËµÑÈáëÊîØÊåÅÔºå‰ΩøÂæó‰∏∫RelayÊèê‰æõÊúâÊïàÊøÄÂä±ÂèòÂæóÂõ∞Èöæ„ÄÇÂ§öÊï∞Relay‰æùÈù†‰∏™‰∫∫ÂÖ¥Ë∂£ÊàñÈôêÂà∂ÊÄßÁöÑ[‰ªòË¥πÊ®°Âûã]((https://github.com/relaytools/relaycreator/blob/f253d2aa81bf385816f750f730c687c96b61ce6e/design/UserStories.md))Áª¥ÊåÅËøêËê•ÔºåËøôÁßçÊ®°ÂûãÈôêÂà∂‰∫ÜÁâπÂÆöÁî®Êà∑ÁöÑÂÜôÂÖ•ÁîöËá≥ËØªÂèñÊùÉÈôêÔºå‰∏éÊäóÂÆ°Êü•ÁöÑÂàùË°∑Áõ∏ÊÇñÔºåÂêåÊó∂ÂâäÂº±‰∫ÜÂÆ¢Êà∑Á´Ø‰∏éRelay‰πãÈó¥ÁöÑÁªèÊµé‰∫íÂä®„ÄÇÁõÆÂâçÔºå95%ÁöÑRelayÁöÑÊî∂ÂÖ•ÈÉΩÈöæ‰ª•Ë¥üÊãÖËøêËê•ÊàêÊú¨„ÄÇÊúâ20%ÁöÑ‰∏≠ÁªßÁªèÂéÜ‰∫ÜÂÆûË¥®ÊÄßÁöÑÂÅúÊú∫Êó∂Èó¥([Gareth Tyson et al., 2024](https://arxiv.org/html/2402.05709v1#S6))„ÄÇÁº∫‰πèËµÑÈáëÊîØÊåÅËÄåÂØºËá¥ÁöÑ‰ΩéÂèØÁî®ÊÄß‰ª•ÂèäÂèØËÉΩÈöèÂêéÂØºËá¥‰∏≠ÁªßÂÖ≥Èó≠„ÄÇ\n* ‰∏≠ÁªßÁöÑÂèëÁé∞ÂíåÂÖ≥Ê≥®Êú∫Âà∂ÂØºËá¥‰ΩøÁî®ÁéáËæÉÈ´òÁöÑRelayÊõ¥ÂÆπÊòìË¢´Áî®Êà∑ÂèëÁé∞ÔºåËÄåËøô‰∫õRelayÂæÄÂæÄÁî±Áü•ÂêçÁöÑÂÆ¢Êà∑Á´ØÊàñÂºÄÂèëËÄÖËøêËê•Ôºå‰ªéËÄåËøõ‰∏ÄÊ≠•Âê∏ÂºïÊõ¥Â§öÁî®Êà∑‰ΩøÁî®„ÄÇËÆ©Êõ¥Â§öÁöÑÂ∞èrelay Ë¢´ÂπøÊ≥õÁöÑÂèëÁé∞Âíå‰ΩøÁî®ÊòØÁ°Æ‰øùRelayÁΩëÁªúÊäóÂÆ°Êü•ÂíåÊ¥ªË∑ÉÁöÑ‰∏ªË¶ÅÂõ†Á¥†„ÄÇNostrÁîüÊÄÅÁ≥ªÁªüÊ≠£Âú®ÈÄöËøá[Gossip Model](https://fiatjaf.com/bc63c348b.html), [Outbox model](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny), Âíå[Blastr](https://github.com/MutinyWallet/blastr).Êù•ÊîπËøõ‰∏≠ÁªßÁöÑÂèëÁé∞ÂíåÂÖ≥Ê≥®Êú∫Âà∂„ÄÇËøô‰∫õÊ®°ÂûãÁöÑÂÖ≥ÈîÆÊàñËÄÖÈöæÁÇπÂú®‰∫éÂ∏ñÂ≠êÂú®‰∏çÂêå‰∏≠Áªß‰πãÈó¥‰∏çË¢´‚ÄúËøáÂ∫¶Â§çÂà∂ÂèäÈáçÂ§çÊ£ÄÁ¥¢‚ÄùÁöÑÊÉÖÂÜµ‰∏ãÔºå‰ºòÂåñ‰∏≠ÁªßÁî®Êà∑‰πãÈó¥ÁöÑÂèØÂèëÁé∞ÊÄßÂíåË¶ÜÁõñËåÉÂõ¥Ôºå‰ª•Á°Æ‰øùÂÜÖÂÆπÁöÑÂπøÊ≥õ‰º†Êí≠([Hodlbod:Outbox,2024](https://yakihonne.com/article/naddr1qq2hxenh2cchynnpdag4sepkx4gxyj2dt9nk6q3qjlrs53pkdfjnts29kveljul2sm0actt6n8dxrrzqcersttvcuv3qxpqqqp65wd3a9ny))„ÄÇÁÑ∂ËÄåÔºåË¶ÅËææÊàêËøô‰∏ÄÁõÆÊ†áÔºåÈúÄË¶ÅNostrÁöÑÂºÄÂèë‰∫∫ÂëòÊúâÊõ¥Â•ΩÁöÑÂêà‰ΩúÂíåÂÖ±ËØÜ„ÄÇÁõÆÂâçÔºåÁî±‰∫éÁº∫‰πèË∂≥Â§üÁöÑÊøÄÂä±ÔºåNostrÂºÄÂèëËÄÖÊõ¥Â§öÂÖ≥Ê≥®Ëá™Â∑±ÁöÑÂÆ¢Êà∑Á´ØËÆæËÆ°ÊÄùË∑ØÔºåËÄåÂøΩÁï•‰∫ÜÊïàÁéáÂèäÂÖºÂÆπÊÄßÂÆûÁé∞ÂêÑÁßçÂ∑≤Â≠òÂú®ÁöÑÁî®Êà∑Á±ªÂûãÔºåÁîöËá≥ÂØπÂÖ∂‰ªñÂÆ¢Êà∑Á´ØÂºÄÂèëÈÄ†ÊàêÊ∑∑‰π±„ÄÇ\n\n## ‰∏â„ÄÅ‰∏≠ÁªßÁΩëÁªúÁöÑÂèØËÉΩÁªèÊµéÊøÄÂä±Ê®°Âûã\n\nËß£ÂÜ≥RelayÁΩëÁªúÂèØÁî®ÊÄßÁöÑÂÖ≥ÈîÆÂú®‰∫éÊòéÁ°ÆË∞ÅÂ∞ÜÊåÅÁª≠ÊîØ‰ªòÂÖ∂ËøêËê•Ë¥πÁî®„ÄÇÂè™ÊúâÂΩì‰∏≠ÁªßÁΩëÁªúËÉΩÂ§üÂÆûÁé∞ÁõàÂà©ÊàñËá≥Â∞ëË¶ÜÁõñËøêËê•ÊàêÊú¨Êó∂ÔºåÊâçËÉΩ‰øùÊåÅÈïøÊúüÁöÑËßÑÊ®°ÂåñÂíåÁπÅËç£„ÄÇËøêË°å‰∏Ä‰∏™RelayÁöÑ‰∏ªË¶ÅÊàêÊú¨Ê∫êËá™ÊúçÂä°Âô®Â≠òÂÇ®Ë¥πÁî®„ÄÇ‰∏∫‰∫Ü‰øùÈöúÂÜÖÂÆπÁöÑÂèØÁî®ÊÄßÔºåÂÜÖÂÆπ‰ºöË¢´ÂêåÊó∂ÂèëÂ∏ÉÂπ∂Âú®Â§ö‰∏™‰∏≠Áªß‰πãÈó¥ÈáçÂ§çÊ£ÄÁ¥¢([Shinobi:Relay,2023](https://bitcoinmagazine.com/technical/what-makes-nostr-a-different-social-platform))ÔºåËøô‰ºöËøõ‰∏ÄÊ≠•Â¢ûÂä†ÊµÅÈáèÊ∂àËÄóÂíåËøêËê•ÊàêÊú¨Ôºå‰ΩÜÂç¥ÊòØÂéª‰∏≠ÂøÉÂåñÂíåÁ°Æ‰øùÊï∞ÊçÆÂèØÈù†ÊÄßÁöÑÂÖ≥ÈîÆ„ÄÇÁõÆÂâçÔºåRelayÁöÑ‰∏ªË¶ÅÊî∂ÂÖ•Êù•Ê∫êÊòØÊçêËµ†Âíå‰ªòË¥πÂèëÂ∏ÉÔºå‰ΩÜÊúâ95%ÁöÑRelayÈöæ‰ª•‰ªÖÂá≠Âá∫ÁâàÊçêËµ†Êù•Áª¥ÊåÅÂÖ∂ËøêËê•ÊàêÊú¨„ÄÇÂõ†Ê≠§ÔºåÊú¨Á´†Â∞Ü‰∏ªË¶ÅÊé¢ËÆ®ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÔºå‰ª•Ë¶ÜÁõñRelayÁöÑËøêËê•ÊàêÊú¨„ÄÇ\n\n1. ÂÆ¢Êà∑Á´ØÊîØ‰ªòÂ≠òÂÇ®ÊàêÊú¨\nÁî±ÂÆ¢Êà∑Á´ØÊûÑÂª∫‰ªòË¥π‰∫ßÂìÅÊàñÈÄöËøáË¥¢Âä°È¢ÑÁÆóÊù•ÊîØ‰ªòRelayÁöÑÂ≠òÂÇ®ÊàêÊú¨ÊòØÁ¨¶ÂêàÂ∏ÇÂú∫ÈúÄÊ±ÇÂèäÁî®Êà∑‰π†ÊÉØÔºåÂ¶Ç[Âõæ6]([https:/](https://hackmd.io/_uploads/SJgPSXCWC.png)) ÊâÄÁ§∫„ÄÇËøôÂ∞Ü‰ºö‰øÉËøõÂÆ¢Êà∑Á´ØÂ§öÊ†∑ÂåñÊé¢Á¥¢Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÁöÑË¥ßÂ∏ÅÂåñÔºåÂêåÊó∂ÊúâÂä©‰∫éÂΩ¢ÊàêRelay‰∏éÂÆ¢Êà∑Á´Ø‰πãÈó¥ÁöÑÁªèÊµéÂÖ±ËØÜÔºåÂª∫Á´ãRelayÁöÑÊøÄÂä±Ê®°Âûã„ÄÇ\n![image](https://hackmd.io/_uploads/SJgPSXCWC.png)\n\n**Figure 6.ÂÆ¢Êà∑Á´Ø‰∏éRelay‰πãÈó¥ÊøÄÂä±*\n\nÂú®Ââç‰∏ÄÁØáÊñáÁ´†‰∏≠ÔºåÊàë‰ª¨ËÆ®ËÆ∫‰∫ÜYakiHonneÂÆûÁé∞[Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÁöÑ2Â§ßÊîØÊü±](https://research.dorahacks.io/2023/12/12/two-pillars/)ÔºöÂéª‰∏≠ÂøÉÂåñÂá∫ÁâàÂíåÂéª‰∏≠ÂøÉÂåñÂÆ°Êü•„ÄÇÂâçËÄÖ‰øùËØÅÂÜÖÂÆπÊ∞∏‰∏ç‰∏¢Â§±ÔºõÂêéËÄÖÂàõÈÄ†‰∫Ü‰∏ÄÁßçÊñ∞ÁöÑÊàêÊú¨ÊøÄÂä±Ê®°ÂûãÔºåÁ°Æ‰øùÂú®ÂÜÖÂÆπÂíåÂÆ°Ê†∏ÂèòÂæóÊó†ÈúÄÊùÉÈôêÊó∂ÔºåÂπ≥Âè∞‰ªçËÉΩÁª¥ÊåÅÁúüÂÆûÊÄßÂíåÊàêÊú¨ÊïàÁõä„ÄÇÁé∞Âú®ÔºåYakiHonneÂ∑≤ÁªèÊîØÊåÅ[ÈïøÊñá](https://yakihonne.com/articles)„ÄÅ[Âø´ËÆØ](https://yakihonne.com/flash-news)„ÄÅ[Á≠ñÂ±ï](https://yakihonne.com/curations)„ÄÅ[ËßÜÈ¢ë](https://yakihonne.com/videos)„ÄÅ[ÊäóÂÆ°Êü•Á¨îËÆ∞ (Uncensored Notes)](https://yakihonne.com/uncensored-notes)Á≠âÂ§öÁßçÂÜÖÂÆπÂΩ¢ÂºèÁöÑÂéª‰∏≠ÂøÉÂåñÂá∫Áâà„ÄÇÈÄöËøáÊäóÂÆ°Êü•Á¨îËÆ∞ÂØπÂÜÖÂÆπÂÆ°Ê†∏ÔºåËøõ‰∏ÄÊ≠•‰øÉËøõ‰∫ÜYakiHonneÁöÑË¥ßÂ∏ÅÂåñÂíåÂéª‰∏≠ÂøÉÂåñ„ÄÇÂú®YakiHonneÔºåÊØèÂèëÂ∏É‰∏ÄÊù°Âø´ËÆØËá≥Â∞ëÈúÄÊîØ‰ªò800 satsÔºåÈÉ®ÂàÜÊî∂ÂÖ•ÂèØÁî®‰∫éÊøÄÂä±RelayÁöÑËøêËê•ÂíåÁ§æÂå∫Á¨îËÆ∞„ÄÇÈïøÊñáÂÜÖÂÆπÂΩ¢ÂºèÂàôÂèØ‰ª•ÈÄöËøáËÆ¢ÈòÖ„ÄÅÂπøÂëäÁîöËÄÖÂÆ¢Êà∑Á´ØÁöÑË¥¢Âä°È¢ÑÁÆóÊù•ÊîØ‰ªòRelayÁöÑÂ≠òÂÇ®Ë¥πÔºåÂ¶Ç[Âõæ7]()ÊâÄÁ§∫„ÄÇ\n\n![image](https://hackmd.io/_uploads/rJA6BQA-R.png)\n**Âõæ7.YakiHonneÂØπRelayÁöÑÊøÄÂä±*\n\n2. RelayÁöÑÁõ¥Êé•Êî∂ÂÖ•\nÂú® Nostr ‰∏≠Ôºå‰∏≠ÁªßÁöÑÂèëÂ±ïÊõ¥Â§öÊòØ‰æßÈáç‰∫éÊÄßËÉΩ‰ºòÂåñÔºåËÄå‰∏çÊòØÊñ∞ÂäüËÉΩÁöÑÂºÄÂèë„ÄÇ‰∏≠Áªß‰πüËÆ∏ÂèØ‰ª•ÈÄöËøáÊèê‰æõÁâπÂÆöÂäüËÉΩ„ÄÅÂ≠òÂÇ®‰∏çÂêåÁ±ªÂûãÁöÑ‰∫ã‰ª∂Êù•‰øÉËøõÊî∂ÂÖ•„ÄÇÈÄöËøáÁâπÂÆöÂäüËÉΩËµöÂèñÊî∂ÂÖ•ÈúÄË¶ÅÂÆ¢Êà∑Á´ØÂíå‰∏≠ÁªßÁöÑÂπøÊ≥õÈááÁî®ÔºåÂê¶ÂàôÂèØËÉΩ‰ºöÂØºËá¥‰∏≠ÂøÉÂåñÈ£éÈô©ÊàñÂÆûÊñΩÂ§±Ë¥• ([Hodlbod: relay Function,2023 ](https://yakihonne.com/article/naddr1qqxnzdesxqcn2df5xymnzdp4qgsf03c2gsmx5ef4c9zmxvlew04gdh7u94afnknp33qvv3c94kvwxgsrqsqqqa28q3wd45))„ÄÇRelayÂ≠òÂÇ®‰∏çÂêåÁ±ªÂûã‰∫ã‰ª∂Êù•Ëé∑ÂèñÊî∂ÂÖ•ÊàñËÆ∏ÊòØ‰∏Ä‰∏™ÂèØË°åÊñπÊ°à„ÄÇÂú®‰øùÊåÅÂØπÂêÑÁßçÂÜÖÂÆπÁöÑÂºÄÊîæÊÄßÁöÑÂêåÊó∂Ôºå‰∏≠ÁªßÂèØ‰ª•Âú®Êï∞ÊçÆÊ£ÄÁ¥¢Êó∂‰ΩøÁî®ÂÖ≥ÈîÆËØçËøáÊª§Âô®Êù•ÊòæÁ§∫ÁâπÂÆö‰∏ªÈ¢òÔºå‰ªéËÄå‰øÉËøõÂü∫‰∫éËÆ¢ÈòÖÁöÑ‰ªòË¥πÊ®°Âºè„ÄÇÊ≠§Â§ñÔºåRelayÂíåÂÆ¢Êà∑Á´ØÂèØ‰ª•Â∞±ËÆ¢ÈòÖË¥πÁî®ÂΩ¢ÊàêÂàÜÊàêÂçèËÆÆÔºåËøô‰∏ç‰ªÖÊúâÂä©‰∫éÂ¢ûÂä†Êî∂ÂÖ•ÔºåËøòËÉΩ‰øÉËøõÂèåÊñπÂú®ÁªèÊµé‰∏äËææÊàêÂÖ±ËØÜ„ÄÇ\n\n## Âõõ„ÄÅRelayÂÜÖÂÆπÁöÑËØÅÊòé\n\nÊï∞ÊçÆÂú®Â§ö‰∏™Relay‰∏äÁöÑÈáçÂ§çÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢ËÆæËÆ°Á°Æ‰øù‰∫ÜÂÜÖÂÆπÁöÑÈ´òÂèØÁî®ÊÄßÔºå‰ΩÜÂπ∂‰∏çËÉΩÂÆåÂÖ®‰øùËØÅÂÜÖÂÆπÁöÑ‰∏çÂèØÁØ°ÊîπÊÄß„ÄÇÁêÜËÆ∫‰∏ä‰ªçÂèØ‰ª•ÈÄöËøáÂΩ±ÂìçÊüê‰∫õRelayËäÇÁÇπÊù•ÁØ°ÊîπÊàñÂà†Èô§‰ø°ÊÅØ„ÄÇ‰∏∫‰∫ÜËß£ÂÜ≥Ëøô‰∏ÄÈóÆÈ¢òÔºåÊàë‰ª¨ÈúÄË¶Å‰∏∫Áé∞Âú®ÁöÑ‰∏≠ÁªßÁ≥ªÁªüÂºïÂÖ•‰∏ÄÁßç‰∫íË°•ÁöÑËØÅÊòéÊú∫Âà∂ÔºåÊù•Â¢ûÂº∫ÂÜÖÂÆπÁöÑÂèØÈù†ÊÄß„ÄÇ\n\nÊúâÂ§öÁßçÊñπÊ≥ïÂèØ‰ª•ÂÆûÁé∞ËøôÁßçËØÅÊòé„ÄÇ‰Ωú‰∏∫ÊúÄÂéª‰∏≠ÂøÉÂåñÁöÑÁ§æ‰∫§Â™í‰ΩìÂ∫ïÂ±ÇÂçèËÆÆÔºåNostrÂú®ÊØîÁâπÂ∏ÅÁ§æÂå∫‰∏≠ÂæóÂà∞‰∫ÜÂπøÊ≥õËÆ§ÂèØ„ÄÇÁÑ∂ËÄåÔºåÊäÄÊúØ‰∏ä‰ΩøÁî®ÊØîÁâπÂ∏ÅÁΩëÁªúÊù•È™åËØÅ‰ø°ÊÅØÁöÑËÆ®ËÆ∫Â∞öÊú™Â±ïÂºÄ„ÄÇÂ¶ÇÊûúÈúÄË¶ÅÂØπ Nostr ÁΩëÁªú‰∏äÊâòÁÆ°ÁöÑÂÜÖÂÆπËøõË°åËØÅÊòéÔºåÂ∫îËØ•Âú®ÊØîÁâπÂ∏ÅÁΩëÁªú‰∏äËøõË°å„ÄÇ\n\n‰∏∫‰∫ÜÂú® Nostr ‰∏≠ÁªßÁΩëÁªú‰∏äËØÅÊòéÂíåÈ™åËØÅÂ§ßÈáèÂÜÖÂÆπÔºåÂú®ÊØîÁâπÂ∏ÅÁΩëÁªú‰∏äËØÅÊòéÊØè‰∏Ä‰∏™Â∏ñÂ≠êÊàñÊØè‰∏ÄÁØá ÊñáÁ´†Ôºà[Nip-23](https://github.com/nostr-protocol/nips/blob/master/23.md)ÔºâÂú®ÁªèÊµé‰∏äÊòØ‰∏çÂèØË°åÁöÑ„ÄÇÂú®ËøõË°åËØÅÊòé‰πãÂâçÔºåÊï∞ÊçÆÂ∫îËØ•Ë¢´ÂéãÁº©ÂíåÊúâÊïàÁªÑÁªá„ÄÇ[ÈªòÂÖãÂ∞îÊ†ë](https://en.wikipedia.org/wiki/Merkle_tree)ÊòØ‰∏ÄÁßçÈ´òÊïà‰∏îÂÆâÂÖ®ÁöÑÊï∞ÊçÆÈ™åËØÅÊú∫Âà∂„ÄÇÊï∞ÊçÆÁöÑÂáÜÁ°ÆÊÄßÂèØ‰ª•‰ªÖÈÄöËøáÈªòÂÖãÂ∞îÊ†πÂíåÁõ∏ÂÖ≥ÁöÑÂìàÂ∏åË∑ØÂæÑÊù•È™åËØÅÔºåÂ¶Ç[Âõæ8]()ÊâÄÁ§∫„ÄÇÂõ†Ê≠§ÔºåÂØπÂ§ßÈáèÂÜÖÂÆπÁöÑÊúÄÁªàËÆ§ËØÅÂèØ‰ª•ÊòØÂêëÊØîÁâπÂ∏ÅÁΩëÁªúÊèê‰∫§‰∏Ä‰∏™ÈªòÂÖãÂ∞îÊ†π„ÄÇ‰∏ÄÊó¶Êèê‰∫§ÔºåÊâÄÊúâÂú®Ê≠§ÈªòÂÖãÂ∞îÊ†π‰∏ãË°®Á§∫ÁöÑÂÜÖÂÆπÈÉΩÂ∞ÜÂèòÂæó‰∏çÂèØÊõ¥Êîπ„ÄÇ\n\n![image](https://hackmd.io/_uploads/BJpBIXC-C.png)\n\n**Âõæ8. ÈªòÂÖãÂ∞îÊ†ë‰∏äÂìàÂ∏åÂ§ÑÁêÜÁöÑÂÜÖÂÆπ*\n\nÂΩìÈúÄË¶ÅÈ™åËØÅÂ≠òÂÇ®Âú®‰∏≠Áªß‰∏äÁöÑÂÜÖÂÆπÊòØÂê¶Êú™Ë¢´ÁØ°ÊîπÊó∂ÔºåÈ¶ñÂÖà‰ªé‰∏≠ÁªßÊ£ÄÁ¥¢ÂÜÖÂÆπÂπ∂ÈáçÊñ∞ËÆ°ÁÆóÂÖ∂ÂìàÂ∏åÂÄº„ÄÇÁÑ∂ÂêéÔºå‰ΩøÁî®Ëøô‰∏™ÂìàÂ∏åÂÄºÂíåÂÖ∂‰ªñÁõ∏ÂÖ≥ÁöÑ‰∏≠Èó¥ÂìàÂ∏åÂÄºÔºåÈ™åËØÅËøáÁ®ãÊ≤øÁùÄÈªòÂÖãÂ∞îÊ†ëÂêë‰∏äËøõË°åÔºåÁõ¥Âà∞ËææÂà∞ËÆ∞ÂΩïÂú®ÊØîÁâπÂ∏ÅÂå∫ÂùóÈìæ‰∏äÁöÑÈªòÂÖãÂ∞îÊ†π„ÄÇÊúÄÂêéÔºåÈÄöËøáÂ∞ÜËøô‰∏™ËÆ°ÁÆóÂá∫ÁöÑÈªòÂÖãÂ∞îÊ†π‰∏éÂå∫ÂùóÈìæ‰∏äËÆ∞ÂΩïÁöÑÊ†πÂìàÂ∏åËøõË°åÊØîËæÉÔºåÁ°ÆËÆ§ÂÜÖÂÆπÁöÑÂÆåÊï¥ÊÄßÂíåÁúüÂÆûÊÄß„ÄÇËØ•ËøáÁ®ãÂ¶Ç[Âõæ9]((https://hackmd.io/_uploads/rkQcUX0WC.png))ÊâÄÁ§∫„ÄÇ\n\n![image](https://hackmd.io/_uploads/rkQcUX0WC.png)\n\n**Âõæ9. Relay‰∏äÂÜÖÂÆπÁöÑËØÅÊòé*\n\nÈáçÂ§çËøô‰∏™ËøáÁ®ãÂ∞ÜÊúÄÁªàÁ°Æ‰øùÊâÄÊúâÁªèËøáËØÅÊòéÁöÑÂÜÖÂÆπÈÉΩÊòØÁúüÂÆûÁöÑ„ÄÇÁªìÊûúÔºå‰∏≠ÁªßÂ∞ÜÊèê‰æõÂÜÖÂÆπÁöÑÂèØÁî®ÊÄßÂíåÂÜó‰ΩôÔºåÂêåÊó∂ÊØîÁâπÂ∏ÅÁΩëÁªúÂ∞ÜÊâπÈáèÈ™åËØÅNostrÂÜÖÂÆπ„ÄÇ\n\n## ‰∫î„ÄÅÁªìËÆ∫\n\nRelay ÁΩëÁªúÊòØ YakiHonne ÊûÑÂª∫Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÁöÑÊ†∏ÂøÉÂü∫Á°ÄËÆæÊñΩ‰πã‰∏Ä„ÄÇÈÄöËøáÂØπ Nostr ÁöÑÂéª‰∏≠ÂøÉÂåñÁâπÊÄßËøõË°åÊï∞ÊçÆÂàÜÊûêÔºåÂèëÁé∞ Nostr ÁöÑÊäÄÊúØÊû∂ÊûÑÂ∑≤‰ΩøÂÖ∂Êàê‰∏∫ÁõÆÂâçÊúÄÂÖ∑Âéª‰∏≠ÂøÉÂåñÁâπÁÇπÁöÑÂ™í‰ΩìÂçèËÆÆ„ÄÇÁÑ∂ËÄåÔºåRelay ÁΩëÁªúÁõÆÂâçÈù¢‰∏¥ÁùÄÂèØÁî®ÊÄßÊåëÊàòÔºå‰∏ªË¶ÅÂõ†‰∏∫Áº∫‰πèÊúâÊïàÁöÑÁªèÊµéÊøÄÂä±„ÄÇÊú¨ÊñáÊé¢ËÆ®‰∫ÜÂá†ÁßçÂèØËÉΩÁöÑRelayÁªèÊµéÊøÄÂä±Ê®°ÂûãÔºåÂ∞ΩÁÆ°Ëøô‰∫õÊ®°ÂûãÂ≠òÂú®ËÆ∏Â§ö‰∏çÁ°ÆÂÆöÊÄßÂíåÊåëÊàòÔºå‰ΩÜÊòéÁ°Æ‰∫ÜÊåÅÁª≠ÊøÄÂä±ÁöÑÂØπÊäóÂÆ°Êü•ÁΩëÁªúÁöÑÈáçË¶ÅÊÄß„ÄÇÊ≠§Â§ñÔºåËÄÉËôëÂà∞ Relay ÁΩëÁªúÂΩìÂâçÁº∫‰πè‰∏çÂèØÁØ°ÊîπÊÄßÔºåÊàë‰ª¨ÊèêÂá∫ËØÅÊòéÊú∫Âà∂‰ª•ÊèêÈ´òRelayÁ≥ªÁªüÁöÑÂèØÈù†ÊÄß„ÄÇÈÄöËøáÊîπËøõ Relay ÁöÑÂèØÈù†ÊÄßÂíåÂèØÁî®ÊÄßÔºåÂ∞ÜÊúâÂä©‰∫é‰øÉËøõÊï¥‰∏™‰∏≠ÁªßÁîüÊÄÅÁ≥ªÁªüÁöÑÂèØÊâ©Â±ïÊÄßÂíåÁπÅËç£Ôºå‰∏∫ÊûÑÂª∫Âéª‰∏≠ÂøÉÂåñÂ™í‰ΩìÊèê‰æõÂùöÂÆûÁöÑÊîØÊåÅ„ÄÇ","sig":"9db1f909196e1aa336b54ba733d35899a76b0b40a4275c97590a3fda9a3aa92331ce9af8771c8572acfe633681c46abcdd9cfa5a9690694228e683caa1c14a12"},"naddr1qq2j6ezsgu69j7n92cmxxmfsgyeyyvjtxfuk7qgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygrwvjurc8m8f7cq5hces9kzj7myzjlk0uq4398qfh2vv4lfgypwaqpsgqqqw4rsklwcek":{"kind":30023,"id":"e053bd17c3e36ea81d69ae382aefedf0f53188fc4f95e67b21ce35a38dc9a1e2","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745439814,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745183349"],["d","-dPG4YzeV6cm0A2B2K2yo"],["image","https://image.nostr.build/f708db07b85c002b20b3159b48447d51cbcb0bae0f5717ce6dbc060580c8b35d.jpg"],["title","How to Run Your Own Nostr Relay on Android with Cloudflare Domain"],["summary","Step-by-step guide to running a personal Nostr relay on Android using Citrine and Cloudflare Tunnels. Learn how to set up secure WebSocket connections, manage relay lists, and maintain a reliable private relay with your custom domain."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","nostr"],["t","relay"],["t","citrine"],["t","cloudflare"],["t","tunnel"],["t","outbox"],["p","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","mention"]],"content":"# How to Run Your Own Nostr Relay on Android with Cloudflare Domain\n\n## Prerequisites\n1. Install Citrine on your Android device:\n   - Visit https://github.com/greenart7c3/Citrine/releases\n   - Download the latest release using:\n     - zap.store\n     - Obtainium\n     - F-Droid\n     - Or download the APK directly\n   - **Note:** You may need to enable \"Install from Unknown Sources\" in your Android settings\n\n2. Domain Requirements:\n   - Purchase a domain if you don't have one\n   - Transfer your domain to Cloudflare if it's not already there (for free SSL certificates and cloudflared support)\n\n3. Tools to use:\n   - nak (the nostr army knife):\n     - Download from https://github.com/fiatjaf/nak/releases\n     - Installation steps:\n       - For Linux/macOS:\n         ```bash\n         # Download the appropriate version for your system\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-linux-amd64  # for Linux\n         # or\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-darwin-amd64  # for macOS\n         \n         # Make it executable\n         chmod +x nak-*\n         \n         # Move to a directory in your PATH\n         sudo mv nak-* /usr/local/bin/nak\n         ```\n       - For Windows:\n         ```batch\n         # Download the Windows version\n         curl -L -o nak.exe https://github.com/fiatjaf/nak/releases/latest/download/nak-windows-amd64.exe\n         \n         # Move to a directory in your PATH (e.g., C:\\Windows)\n         move nak.exe C:\\Windows\\nak.exe\n         ```\n     - Verify installation:\n       ```bash\n       nak --version\n       ```\n\n## Setting Up Citrine\n1. Open the Citrine app\n2. Start the server\n3. You'll see it running on `ws://127.0.0.1:4869` (local network only)\n4. Go to settings and paste your npub into \"Accept events signed by\" inbox and press the + button. This prevents others from publishing events to your personal relay.\n\n## Installing Required Tools\n1. Install Termux from Google Play Store\n2. Open Termux and run:\n\n```bash\npkg update \u0026\u0026 pkg install wget\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64.deb\ndpkg -i cloudflared-linux-arm64.deb\n```\n\n## Cloudflare Authentication\n1. Run the authentication command:\n```bash\ncloudflared tunnel login\n```\n2. Follow the instructions:\n   - Copy the provided URL to your browser\n   - Log in to your Cloudflare account\n   - If the URL expires, copy it again after logging in\n\n## Creating the Tunnel\n1. Create a new tunnel:\n```bash\ncloudflared tunnel create \u003cTUNNEL_NAME\u003e\n```\n   - Choose any name you prefer for your tunnel\n   - Copy the tunnel ID after creating the tunnel\n\n2. Create and configure the tunnel config:\n```bash\ntouch ~/.cloudflared/config.yml\nnano ~/.cloudflared/config.yml\n```\n\n3. Add this configuration (replace the placeholders with your values):\n```yaml\ntunnel: \u003cTUNNEL_UUID\u003e\ncredentials-file: /data/data/com.termux/files/home/.cloudflared/\u003cTUNNEL_UUID\u003e.json\ningress:\n  - hostname: nostr.yourdomain.com\n    service: ws://localhost:4869\n  - service: http_status:404\n```\n   - **Note:** In nano editor:\n     - `CTRL+O` and Enter to save\n     - `CTRL+X` to exit\n   - **Note:** Check the credentials file path in the logs\n\n4. Validate your configuration:\n```bash\ncloudflared tunnel validate\n```\n\n5. Start the tunnel:\n```bash\ncloudflared tunnel run my-relay\n```\n\n## Preventing Android from Killing the Tunnel\nRun these commands to maintain tunnel stability:\n```bash\ndate \u0026\u0026 apt install termux-tools \u0026\u0026 termux-setup-storage \u0026\u0026 termux-wake-lock\necho \"nameserver 1.1.1.1\" \u003e $PREFIX/etc/resolv.conf\n```\n\n**Tip:** You can open multiple Termux sessions by swiping from the left edge of the screen while keeping your tunnel process running.\n\n## Updating Your Outbox Model Relays\n\nOnce your relay is running and accessible via your domain, you'll want to update your relay list in the Nostr network. This ensures other clients know about your relay and can connect to it.\n\n### Decoding npub (Public Key)\n\nPrivate keys (nsec) and public keys (npub) are encoded in bech32 format, which includes:\n- A prefix (like nsec1, npub1 etc.)\n- The encoded data\n- A checksum\n\nThis format makes keys:\n- Easy to distinguish\n- Hard to copy incorrectly\n\nHowever, most tools require these keys in hexadecimal (hex) format.\n\nTo decode an npub string to its hex format:\n\n```bash\nnak decode nostr:npub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4\n```\n\nChange it with your own npub.\n\n```bash\n{\n  \"pubkey\": \"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8\"\n}\n```\n\nCopy the pubkey value in quotes.\n\n### Create a kind 10002 event with your relay list:\n\n- Include your new relay with write permissions\n- Include other relays you want to read from and write to, omit 3rd parameter to make it both read and write\n\nExample format:\n\n```json\n{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://your-relay-domain.com\", \"write\"],\n    [\"r\", \"wss://eden.nostr.land/\"],\n    [\"r\", \"wss://nos.lol/\"],\n    [\"r\", \"wss://nostr.bitcoiner.social/\"],\n    [\"r\", \"wss://nostr.mom/\"],\n    [\"r\", \"wss://relay.primal.net/\"],\n    [\"r\", \"wss://nostr.wine/\", \"read\"],\n    [\"r\", \"wss://relay.damus.io/\"],\n    [\"r\", \"wss://relay.nostr.band/\"],\n    [\"r\", \"wss://relay.snort.social/\"]\n  ],\n  \"content\": \"\"\n}\n```\n\nSave it to a file called `event.json`\n\n**Note:** Add or remove any relays you want. To check your existing 10002 relays:\n  - Visit https://nostr.band/?q=by%3Anpub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4+++kind%3A10002\n  - nostr.band is an indexing service, it probably has your relay list.\n  - Replace `npub1xxx` in the URL with your own npub\n  - Click \"VIEW JSON\" from the menu to see the raw event\n  - Or use the `nak` tool if you know the relays\n    ```bash\n    nak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n    ```\n\n    Replace `\u003cyour-pubkey\u003e` with your public key in hex format (you can get it using `nak decode \u003cyour-npub\u003e`)\n\n2. Sign and publish the event:\n   - Use a Nostr client that supports kind 10002 events\n   - Or use the `nak` command-line tool:\n   ```bash\n   nak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n   ```\n\n**Important Security Notes:**\n1. Never share your nsec (private key) with anyone\n2. Consider using NIP-49 encrypted keys for better security\n3. Never paste your nsec or private key into the terminal. The command will be saved in your shell history, exposing your private key. To clear the command history:\n   - For bash: use `history -c`\n   - For zsh: use `fc -W` to write history to file, then `fc -p` to read it back\n   - Or manually edit your shell history file (e.g., `~/.zsh_history` or `~/.bash_history`)\n4. if you're using `zsh`, use `fc -p` to prevent the next command from being saved to history\n5. Or temporarily disable history before running sensitive commands:\n\n```bash\nunset HISTFILE\nnak key encrypt ...\nset HISTFILE\n```\n\n## How to securely create NIP-49 encypted private key\n\n```bash\n# Read your private key (input will be hidden)\nread -s SECRET \n# Read your password (input will be hidden)\nread -s PASSWORD\n# encrypt command\necho \"$SECRET\" | nak key encrypt \"$PASSWORD\"\n# copy and paste the ncryptsec1 text from the output\nread -s ENCRYPTED\nnak key decrypt \"$ENCRYPTED\"\n# clear variables from memory\nunset SECRET PASSWORD ENCRYPTED\n```\n\nOn a Windows command line, to read from stdin and use the variables in `nak` commands, you can use a combination of `set /p` to read input and then use those variables in your command. Here's an example:\n\n```bash\n@echo off\nset /p \"SECRET=Enter your secret key: \"\nset /p \"PASSWORD=Enter your password: \"\n\necho %SECRET%| nak key encrypt %PASSWORD%\n\n:: Clear the sensitive variables\nset \"SECRET=\"\nset \"PASSWORD=\"\n```\n\nIf your key starts with `ncryptsec1`, the `nak` tool will securely prompt you for a password when using the `--sec` parameter, unless the command is used with a pipe `\u003c \u003e` or `|`. \n\n```bash\nnak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n```\n\n3. Verify the event was published:\n   - Check if your relay list is visible on other relays\n   - Use the `nak` tool to fetch your kind 10002 events:\n```bash\nnak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n```\n\n4. Testing your relay:\n   - Try connecting to your relay using different Nostr clients\n   - Verify you can both read from and write to your relay\n   - Check if events are being properly stored and retrieved\n   - **Tip:** Use multiple Nostr clients to test different aspects of your relay\n\n**Note:** If anyone in the community has a more efficient method of doing things like updating outbox relays, please share your insights in the comments. Your expertise would be greatly appreciated!\n","sig":"abd9291f7bc17a6d396b33f5a5f8f2dd7e8c6c1fe81b41ef7c28b2132c0af012e2686e453304e78f8d9875b34dd4d6257e475b7debfd39af983cff578144a21c"},"naddr1qq2nynzewfjkkvpc25c9vmj9g9j4zj23xe395qgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qyg930lxd7pa6ywrlqw9ngsn8yrxk35gjm7frhj3tak8ccvymwgg325psgqqqw4rsgmy4qh":{"kind":30023,"id":"db4118082e711c647fecf46096fb201cf4d872778e3cad8b8fe5137b11625c31","pubkey":"b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155","created_at":1718198291,"tags":[["d","2LYrek08U0VnEAeQIQ6bZ"],["title","ü™ßNew PostgreSQL üêò bonus guide + other related improvements"],["summary",""],["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1717445059915"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1712391115"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717488715"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717488715"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717445059915"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717445059915"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717575115"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpvtlen0s0w3rslcr3v6yyeeqe45dzykljgau52ld37xrpxmjzy24qq2nynzewfjkkvpc25c9vmj9g9j4zj23xe395lj3wss"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717575115"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717575115"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717970400"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["t","minibolt"],["t","bitcoin"],["t","noderunner"],["t","guide"],["t","sovereign"],["t","DIY"],["t","lightning"],["t","zerotrust"],["t","database"],["t","postgresql"],["t","relay"],["t","configuration"],["t","download"],["t","migrate"],["t","backend"],["t","renovate"],["t","generate"],["t","use"],["image","https://image.nostr.build/a78fde11ed11d01c379da369c995ceb087435645697352d99c0f762714022859.png"],["a","34550:b17fccdf07ba2387f038b34426720cd68d112df923bca2bed8f8c309b7211155:MiniBolt"],["published_at","1717575115"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"]],"content":"####  **üÜï What's changed:**\n\n-----------\n\n- [New bonus guide dedicated to install/upgrade/uninstall PostgreSQL](https://v2.minibolt.info/bonus-guides/system/postgresql)\n- [Modified the LND guide to use PostgreSQL instead of bbolt](https://v2.minibolt.info/lightning/lightning/lightning-client)\n- [Modified the Nostr relay guide to use PostgreSQL instead of SQLite (experimental)](https://v2.minibolt.info/bonus-guides/bitcoin/nostr-relay#configuration)\n- [Modified the BTCPay Server bonus guide according to these changes](https://v2.minibolt.info/bonus-guides/bitcoin/btcpay-server)\n- Used the [lndinit MiniBolt org fork](https://github.com/minibolt-guide/lndinit), to add an [extra section to migrate an existing LND bbolt database to PostgreSQL](https://v2.minibolt.info/lightning/lightning/lightning-client#migrate-an-existing-bbolt-database-to-postgresql) (üö®‚ö†Ô∏è[Experimental](https://github.com/lightninglabs/lndinit/pull/21) - use it behind your responsibility‚ö†Ô∏èüö®)\n- [New Golang bonus guide](https://v2.minibolt.info/bonus-guides/system/go) as a common language for the [lndinit compile](https://v2.minibolt.info/lightning/lightning/lightning-client#migrate-an-existing-bbolt-database-to-postgresql)\n- [Updated LND to v0.18](https://v2.minibolt.info/lightning/lightning/lightning-client#download-binaries)\n- [New Bitcoin Core extra section to renovate Tor \u0026 I2P addresses](https://v2.minibolt.info/bitcoin/bitcoin/bitcoin-client#renovate-your-bitcoin-core-tor-and-i2p-addresses)\n- [New Bitcoin Core extra section to generate a full `bitcoin.conf` file](https://v2.minibolt.info/bitcoin/bitcoin/bitcoin-client#generate-a-full-bitcoin.conf-example-file)\n- [Rebuilt some homepage sections and general structure](https://v2.minibolt.info/)\n- Deleted the `$` symbol of the commands to easy copy-paste to the terminal\n- [Deleted the initial incoming and the outgoing rules configuration of UFW, due to it being by default](https://v2.minibolt.info/system/system/security)\n\nü™ß PD: If you want to use the old database backend of the LND or Nostr relay, follow the next extra sections:\n\n- [Use the default bbolt database backend for the LND](https://v2.minibolt.info/lightning/lightning/lightning-client#use-the-default-bbolt-database-backend)\n- [Use the default SQLite database backend for the Nostr relay](https://v2.minibolt.info/bonus-guides/bitcoin/nostr-relay#use-the-default-sqlite-database-backend)\n\n‚ö†Ô∏è**Attention**‚ö†Ô∏è: [The migration process](https://v2.minibolt.info/lightning/lightning/lightning-client#migrate-an-existing-bbolt-database-to-postgresql) was tested on testnet mode from an existing bbolt database backend to a new PostgreSQL database using lndinit and the results were successful. However, It wasn't tested on mainnet,[according to the developer](https://github.com/lightninglabs/lndinit/pull/21), it is in experimental status which could damage your existing LND database.üö® Use it behind your responsibility üßº\n\n**üîß PR related**: https://github.com/minibolt-guide/minibolt/pull/93\n\n-----------\n\n#### ‚ôªÔ∏è Migrate the PostgreSQL database location\n\n**If you installed [NBXplorer + BTCPay Server](https://v2.minibolt.info/bonus-guides/bitcoin/btcpay-server)**, it is probably you have the database of the PostgreSQL cluster on the default path (`/var/lib/postgresql/16/main/`), follow the next instructions to migrate it to the new dedicated location on `/data/postgresdb` folder:\n\n* With user `admin` create the dedicated PostgreSQL data folder\n\n```\nsudo mkdir /data/postgresdb\n```\n\n* Assign as the owner to the `postgres` user\n\n```\nsudo chown postgres:postgres /data/postgresdb\n```\n\n* Assign permissions of the data folder only to the `postgres` user\n\n```\nsudo chmod -R 700 /data/postgresdb\n```\n\n* Stop NBXplorer and BTCPay Server\n\n```\nsudo systemctl stop nbxplorer \u0026\u0026 sudo systemctl stop btcpayserver\n```\n\n* Stop PostgreSQL\n\n```\nsudo systemctl stop postgresql\n```\n\n* Use the rsync command to copy all files from the existing database on (`/var/lib/postgresql/16/main`) to the new destination directory (`/data/postgresdb`)\n\n```\nsudo rsync -av /var/lib/postgresql/16/main/ /data/postgresdb/\n```\n\nExpected output:\n\n```\nsending incremental file list\n./\nPG_VERSION\npostgresql.auto.conf\npostmaster.opts\npostmaster.pid\nbase/\nbase/1/\nbase/1/112\nbase/1/113\nbase/1/1247\nbase/1/1247_fsm\nbase/1/1247_vm\nbase/1/1249\nbase/1/1249_fsm\nbase/1/1249_vm\n[...]\npg_wal/000000010000000000000009\npg_wal/archive_status/\npg_xact/\npg_xact/0000\n\nsent 164,483,875 bytes  received 42,341 bytes  36,561,381.33 bytes/sec\ntotal size is 164,311,368  speedup is 1.00\n```\n\n* Edit the PostgreSQL data directory on configuration, to redirect the store to the new location\n\n```\nsudo nano /etc/postgresql/16/main/postgresql.conf --linenumbers\n```\n\n* Replace the line 42 to this. Save and exit\n\n```\ndata_directory = '/data/postgresdb'\n```\n\n* Start PostgreSQL to apply changes and monitor the correct status of the main instance and sub-instance monitoring sessions before\n\n```\nsudo systemctl start postgresql\n```\n\n* You can monitor the PostgreSQL main instance by the systemd journal and check the log output to ensure all is correct. You can exit the monitoring at any time with Ctrl-C\n\n```\njournalctl -fu postgresql\n```\n\nExample of the expected output:\n\n```\nNov 08 11:51:10 minibolt systemd[1]: Stopped PostgreSQL RDBMS.\nNov 08 11:51:10 minibolt systemd[1]: Stopping PostgreSQL RDBMS...\nNov 08 11:51:13 minibolt systemd[1]: Starting PostgreSQL RDBMS...\nNov 08 11:51:13 minibolt systemd[1]: Finished PostgreSQL RDBMS.\n```\n\n* You can monitor the PostgreSQL sub-instance by the systemd journal and check log output to ensure all is correct. You can exit monitoring at any time with Ctrl-C\n\n```\njournalctl -fu postgresql@16-main\n```\n\nExample of the expected output:\n\n```\nNov 08 11:51:10 minibolt systemd[1]: Stopping PostgreSQL Cluster 16-main...\nNov 08 11:51:11 minibolt systemd[1]: postgresql@16-main.service: Succeeded.\nNov 08 11:51:11 minibolt systemd[1]: Stopped PostgreSQL Cluster 16-main.\nNov 08 11:51:11 minibolt systemd[1]: postgresql@16-main.service: Consumed 1h 10min 8.677s CPU time.\nNov 08 11:51:11 minibolt systemd[1]: Starting PostgreSQL Cluster 16-main...\nNov 08 11:51:13 minibolt systemd[1]: Started PostgreSQL Cluster 16-main.\n```\n\n* Start NBXplorer and BTCPay Server again\n\n```\nsudo systemctl start nbxplorer \u0026\u0026 sudo systemctl start btcpayserver\n```\n\n* Monitor to make sure everything is as you left it. You can exit monitoring at any time with Ctrl-C\n\n```\njournalctl -fu nbxplorer\n```\n\n```\njournalctl -fu btcpayserver\n```\n\nEnjoy it MiniBolter! üíô","sig":"0af3d8c90e086c0c1f04d74714d6b8e39301884ad3f4152107489392457900d653354f7f6b050a16bc9f015e8e66bddf5931930b7a3767cd778bd35aab18ebc4"},"naddr1qq4hgmmj94ex2mrp0ykkummyv5kk7mnfdahz6ctyv3ex2umn945xjeryv4hz6um9wfmxjcm9qyxhwumn8ghj7mn0wvhxcmmvqgs0plu8uaukh2r0ep95spajtfw7ugrdwfxx7cd23pfewk3emmh07kqrqsqqqa28tkv6mw":{"kind":30023,"id":"c0465f56924f6a79b67acaa1a22012d8261f61571de8e86441f7f0f698af2cd1","pubkey":"f0ff87e7796ba86fc84b4807b25a5dee206d724c6f61aa8853975a39deeeff58","created_at":1684721355,"tags":[["d","tor-relay-node-onion-address-hidden-service"],["title","Double TuTORial: Setting Up a Non-Exit Relay and Adding an Onion Address to Your Website"],["summary","How does onion routing work? What's the point of an onion address for a clearnet website? How do I run a non-exit node? Why shouldn't I run an exit note? These questions and more, answered."],["published_at","1680398834"],["t","Tor"],["t","the onion router"],["t","onion routing"],["t","privacy"],["t","security"],["t","relay"],["t","node"],["t","tutorial"],["t","Linux"],["t","VPS"],["image","https://cdn.2nodez.com/Tor.png"]],"content":"[The Onion Network](https://www.torproject.org/) - aka Tor - is a great tool for privacy and security. And the more people who use it and participate in it, the better it is at providing those things.\n\nIn this post I will teach you how you can do that while at the same time providing extra privacy for visitors to your website by providing an onion URL for it.\n\nYou might be asking what the point is if you run your site through a regular domain already. After all, people can put a normal clearnet URL into the Tor Browser already, right?\n\nYes, they can, but visiting a Tor hidden service is still a lot more secure than using Tor to access \"clearnet\" URLs. This is true even if you are running a normal website accessible over the regular internet.\n\nI'll explain why, along with how to set your site to redirect to the onion service if someone using Tor visits the normal URL, and how you can help out the decentralised Tor network stay decentralised and secure by running a \"middle relay.\"\n\nAs luck would have it, the explanation for why the onion URL increases privacy for your users and what a middle relay is are connected, so I'll start off there.\n\n## Only as strong as your weakest point: the problem with exit nodes\n\n![](https://i.imgur.com/gtK0ACE.png)\n\nWhen you access Tor, your traffic is bounced around between at least three nodes. [Each performs a different function](https://community.torproject.org/relay/types-of-relays/) and, vitally, exit nodes present the greatest risks to both those who run them and those who use them. If you cut out exit nodes entirely, you are increasing your OPSEC on Tor significantly.\n\nBut why? It's actually pretty simple.\n\nWhen you fire up the Tor Browser it makes the first connection through a guard relay, also known as an entry node. This is your first \"hop\" on the circuit. Whenever you connect to Tor, the first relay you connect to is always a guard relay, which is why I prefer the entry node terminology.\n\nA guard/entry relay is not actually a separate type of node, but rather just a middle relay that's been around long enough to have [built up a good reputation](https://blog.torproject.org/lifecycle-of-a-new-relay/) as being fast and reliable for a reasonable amount of time as measured by the consensus protocol. The longer your relay has been active and stable, the more likely it is to get chosen by clients as an entry node.\n\nA middle relay is one that routes traffic between the entry and the next hop, which could be another middle relay, an exit node, or an onion service. Because all traffic inside Tor is end-to-end encrypted, neither the entry or middle relays can see the contents of your traffic.\n\nFinally there are exit nodes. There are separate from entry and middle relays, as most Tor relays are not exit nodes. This is because while the main risks of running an entry/middle node are mere inconveniences, opting to act as an exit node comes with serious legal risk.\n\n### The importance of hidden services even for clearnet sites, and the importance of not running an exit node\n\nIf you typed a normal URL like, say, [stacker.news](https://stacker.news/r/xanny), your traffic must be routed through an exit node. Because the traffic is now exiting Tor and being routed to the clearnet, it is decrypted by the exit node. This means the exit node is able to view all that decrypted traffic and monitor it. Of course, as its aim is providing as close to anonymity as is possible, Tor doesn't exactly include logging software on exit nodes, but the Tor Project also can't really do much to stop malicious exit node operators using third party tools to sniff traffic passing through their own machines.\n\nAt the same time, honest exit node operators are taking a big risk. The Tor Project itself [warns of these risks](https://community.torproject.org/relay/community-resources/eff-tor-legal-faq/) and [advises against](https://community.torproject.org/relay/community-resources/tor-exit-guidelines/) individuals running exit nodes without first forming an organisation such as a limited liability company and hiring a lawyer, and even then, they explicitly warn against running exit nodes from personal internet connections. This is because if a Tor user was routed through a certain exit node while engaging in illicit activity, for example hacking, guess which IP address is going to be found in the logs? Yes, the exit node. And even though there is [a public directory](https://metrics.torproject.org/) of all Tor relays that includes whether or not one hosted at any given IP address is an exit node, the feds are still gonna bust down your door before anyone else's.\n\nThe use of exit nodes, then, is not ideal for either party and is more of a necessary evil than an ideal solution.\n\n### Enter hidden services\n\nThe above is what happens if you enter a regular clearnet domain. What happens if you instead type an onion address?\n\nContinuing the previous example, here's the onion address for [stacker.news:](https://stacker.news/privacy/r/xanny)\n\n`snsnsnya6h3ot563f3p566wuhfoklkg5f62hokdlaqzcaub3gf4xlxyd.onion`\n\nPaste that into the Tor Browser and the first steps are the same - your traffic is still routed through entry and middle relays - but this time instead of being decrypted by an exit node, the traffic is fully end-to-end encrypted as it is all routed through Tor. This means it is only decrypted once it reaches the server of the site you are visiting. Naturally, because this connection happens inside Tor, the server doesn't know your IP address and you don't know theirs.\n\nAs for the Tor relays, as I have mentioned, the entry and middle routes only pass through encrypted traffic. They do not need to decrypt the traffic and therefore don't have any access to the keys required to do so. This is the magic of end-to-end encryption. A connection is established between two parties (in this case, yourself and the server) and only those two parties have the keys to decrypt the data. The route responsible for transmissing the data can't see it. This includes your own ISP - all they can see is you are connected to Tor, not what you are doing within it.\n\n![](https://i.imgur.com/fJxxymp.png)\n\nAs you can see, when visiting an onion address, the circuit pings through multiple relays but doesn't require an exit node as the circuit ends at the destination within the Tor network.\n\nAt no point is an exit node required to be part of the circuit between the client (your computer) and a hidden service (the server of the onion URL you're accessing). This is not the case if you enter a regular domain name.\n\n### TL;DR! What does this mean for me?\n\nAs the owner of a website, you provide your visitors with much more private access through Tor if you provide both a clearnet domain and a Tor hidden service onion URL.\n\nAs the runner of a Tor relay, you can run a non-exit node with very low risk. If you have a lot of unused bandwidth on an existing VPS, you can even put it to use by running one on your existing server. It's easy and quick to do.\n\nI won't focus on running a non-exit Tor relay from your local network here because, although you can do it, dynamic IP addresses can cause issues with reliability, you may notice your bandwidth getting bogged down especially during peak times, your ISP might throttle you, and various websites will likely start blocking your IP address. If you know what you are doing and can mitigate these risks, you probably don't need this tutorial anyway. For everyone else, I'll leave complex home networking setups for another day.\n\n### Bonus: Tor hidden services allow you to easily and privately host a website, Bitcoin node, or other publicly accessible service without exposing your IP address or opening ports\n\nWhile I recommend against running a relay from your home network, a cool thing you can do with Tor hidden services is use them to host something you can access remotely from a physical computer within your home network without exposing your IP address, forwarding any ports, or messing with your firewall. Tor is able to traverse NAT, provide a persistant domain without setting up reverse DNS, and provide anonymity all at the same time, making it much easier and safer to run a website, Bitcoin node, or whatever else directly from your home network.\n\nNote that in order for this to stay private, you need to ensure the your machine is exposed to the outside world *only* through Tor, i.e. it has to act as a \"darknet\" website. Don't let the negative connotations put you off - this simply means something is only accessible via Tor rather than the regular internet.\n\nYou can even use a reverse proxy or a Cloudflare tunnel to make your home server accessible on the clearnet while still keeping your home network private, but that's a topic that deserves its own post. If you run a Bitcoin node through [Umbrel](https://umbrel.com/) or something similar, you are likely already using an Onion address to access your node remotely without opening your home network.\n\n## First step for both: installing Tor on the VPS\n\nThis is really quite simple. I am assuming you have a VPS running and are familiar with SSH and Linux. That's all that is required.\n\nSo, first we SSH into your VPS and install the Tor packages.\n\nFirstly you make sure you have the package required to use repos that use HTTPS:\n\n```bash\nsudo apt install apt-transport-https\n```\n\nNow just check the codename for the Linux OS running on your system:\n\n```bash\nlsb_release -c\n```\n\nKeep a mental note of it for the next bit.\n\nHere we create the repo on the VPS:\n\n```bash\nsudo nano /etc/apt/sources.list.d/tor.list\n```\n\nNow you just paste the repo details in, making sure to substitute `jammy` (the latest Ubuntu LTS at the time of writing) with the version running on your own VPS. Unless it's actually `jammy` in which case you can just copy and paste the below exactly as they are:\n\n```bash\ndeb     [signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] https://deb.torproject.org/torproject.org jammy main\ndeb-src [signed-by=/usr/share/keyrings/tor-archive-keyring.gpg] https://deb.torproject.org/torproject.org jammy main\n```\n\nSave and exit then add the PGP key to your keyring by running this:\n\n```bash\nwget -qO- https://deb.torproject.org/torproject.org/A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89.asc | gpg --dearmor | sudo tee /usr/share/keyrings/tor-archive-keyring.gpg \u003e/dev/null\n```\n\nNow we just install the Tor packages:\n\n```bash\nsudo apt update\nsudo apt install tor deb.torproject.org-keyring\n```\n\nIn the next portion we move on to running a non-exit Tor relay, then we go through setting up an onion service. You can do just one of these or you can do both. Up to you!\n\n### How to set up a non-exit Tor relay\n\nFire up the Tor config file:\n\n```bash\nsudo nano /etc/tor/torrc\n```\n\nNow either uncomment or paste in the following lines:\n\n```bash\nSocksPort   0\nORPort 443\nRunAsDaemon 1\nNickname lettersandd1g1ts0nly\nExitPolicy reject *:*\nExitRelay   0\n```\n\nThese six short lines are all that is required to configure Tor as a non-exit relay.\n\nBy default, your host's reverse DNS will show up under the public Tor relay directory. If you wish to display a domain there instead, you can make a subdomain of one you own and point the A and AAAA records at your VPS. Or you can just register one cheaply. If you do register a domain, uncomment or paste this in the torrc file too:\n\n```bash\nAddress adomain.thatyouown.tld\n```\n\nYou don't need to configure a reverse proxy here unless you wish to serve a website through that same domain or subdomain. Even if you already run a website from that VPS, there won't be any clashes as Tor itself uses SOCKS natively, not HTTP, so it won't \"fight\" with your existing server for the port.\n\nIf you have limited bandwidth on your VPS, you can throttle the connection by speed:\n\n```bash\nRelayBandwidthRate 100 KB  # Throttle traffic to 100KB/s (800Kbps)\nRelayBandwidthBurst 200 KB # But allow bursts up to 200KB/s (1600Kbps)\n```\n\nAnd/or by amount of data used during the day:\n\n```bash\nAccountingMax 4 GB\nAccountingStart day 00:00\n```\n\nOr per month:\n\n```bash\nAccountingStart month 3 15:00\n```\n\nIf you're happy with how it's all set up, you can get it going by restarting the systemd service:\n\n```bash\nsudo systemctl restart tor\n```\n\nVerify it's working by checking the logs:\n\n```bash\nsudo journalctl -xeu tor\n```\n\nFinally, if you want to add some extra protections against potential DDoS attacks on the Tor network affecting your VPS, you can install [this set of scripts](https://github.com/Enkidu-6/tor-ddos) and configure them to your liking by following the directions in the repo.\n\nKeep in mind, there is a basic level of DDoS protection built into Tor already, but it is based on simple methods like rate limiting. The scripts are dynamically updated with a list of specific IP addresses to block if a DDoS attack has actually been been detected.\n\n### How to add an onion service to your existing website\n\nFire up the Tor config file:\n\n```bash\nsudo nano /etc/tor/torrc\n```\n\nTo start off with, I'm going to run through the standard instructions which assume you do not care about having a vanity onion URL. DuckDuckGo has a perfect example of a vanity onion address:\n\n`duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion`\n\nNotice how the the address begins neatly with `duckduckgo`.\n\nI'll explain how these work in a minute, but first let's go through the normal process where your onion is randomly generated.\n\nNow either uncomment or paste in the following lines:\n\n```bash\nRunAsDaemon 1\nDataDirectory /var/lib/tor\nHiddenServiceDir /var/lib/tor/onion_service/\nHiddenServicePort 80 127.0.0.1:80\nHiddenServicePort 80 unix:/var/run/tor-my-website.sock\n```\n\nRestart Tor:\n\n```bash\nsudo systemctl restart tor\n```\n\nIf it all worked, you should see a randomly generated onion address when you run this:\n\n```bash\ncat /var/lib/tor/onion_service/hostname\n```\n\nCopy the output then we just need to add it to your webserver config. For the sake of this tutorial I'll assume you're using Nginx, so just open up your vhost:\n\n```bash\ncd /etc/nginx/sites-enabled\nsudo nano [your vhost]\n```\n\nNow copy the main server block only, ignoring any that exist only to redirect to HTTPS etc, go right down to the bottom of the vhost and paste it.\n\nRemove anything to do with SSL/TLS/HTTPS as it's not needed for Tor. Change to port 80 or use the unix sock we created in the Tor config. Make sure you change the server name to the onion address.\n\nThe end result should be something like this:\n\n```bash\nserver {\n\t# Listen on port 80 over 1pv4\n\tlisten 80;\n\t# Listen on port 80 over ipv6\n\tlisten [::]:80;\n\t# Or listen for the SOCKS proxy\n\tlisten unix:/var/run/tor-my-website.sock;\n\t# Stick your onion address here\n\tserver_name yourlongonionaddresshere.onion;\n\n\t# Blah blah blah your config\n\t# Remember to remove any SSL/TLS/HTTPS lines\t\n}\n```\n\nIf you wish to make the regular site redirect to the onion address when some visits through Tor, go to the main server block (not the Tor one) and add this new header:\n\n```bash\nadd_header Onion-Location yourlongonionaddresshere.onion;\n```\n\nOne more step to make sure we don't get any errors because the onion address is an unusually long hostname. Save and exit the vhost config then open up `nginx.conf`:\n\n```bash\nsudo nano /etc/nginx/nginx.conf\n```\n\nGo to the top of the `http` block and add this inside:\n\n```bash\nserver_names_hash_bucket_size 128;\n```\n\nSave, close, then restart Nginx:\n\n```bash\nsudo systemctl restart nginx\n```\n\nNow you can open up Tor Browser and paste your onion address in there. Keep in mind it can take a few minutes for a new onion address to propegate across Tor, so if it doesn't work straight away don't worry just yet!\n\n### How to add a vanity onion address\n\nThat's all well and good, you might be saying, but I want a custom onion address like the cool kids. Where do I get one of those?\n\nAs you can probably tell already, an onion address is not a domain name in the traditional sense. There's nowhere to go and register and buy them.\n\nInstead, a v3 onion address is actually an Ed25519 keypair. The address is a base32 encoded version of the public key.\n\nSo in order to get a custom one you use [this tool](https://github.com/cathugger/mkp224o) to bruteforce a load of keypairs and filter for the ones that match the pattern you enter in their base32 encoded form. The only restriction is the names cannot include the digits 0, 1, 8, or 9 as these are not valid in base32.\n\nSince this is bruteforce work, shorter filters are faster. There is [a page](https://github.com/cathugger/mkp224o/blob/master/OPTIMISATION.txt) on optimising the performance which is worth reading, because some non-default settings can greatly increase speed. But I have found pretty consistently that anything five characters or less will be virtually instant, whereas anything over will likely be significantly slower.\n\nTo state the obvious, unless you have a really good VPS, you should do this on your local machine else it could take ages on an average $5 VPS.\n\nCompiling on a Linux system is easy:\n\n```bash\nsudo apt install gcc libc6-dev libsodium-dev make autoconf\n./autogen.sh\n./configure\nmake\n```\n\nOnce you compile the program you can run it like this:\n\n```bash\nmkdir output\n./mkp224o test -d output\n```\n\nWhere `test` is the string you want your onion to start off with and `output` is the directory the successfully generated addresses along with their keypairs will be stored.\n\nOnce you have found one you like, you can stop the program, go to the folder for the one you like, upload the three files via `sftp`, make sure they're in the same directory, then move that directory to the folder Tor expects:\n\n```bash\nsudo mv -r output /var/lib/tor/myonion\n```\n\nThe `myonion` folder can be called whatever, but make sure it contains the three files from the generated keypair you liked and it's in `/var/lib/tor`.\n\nYou will find Tor will fail to load unless you set the correct permissions, so make sure you do that once they're in the right place on your VPS:\n\n```bash\nsudo chmod -R u+rwX,og-rwx /var/lib/tor/myonion\nsudo chown -R debian-tor /var/lib/tor/myonion\n```\n\nNow just open up the Tor config again:\n\n```bash\nsudo nano /etc/tor/torrc\n```\n\nAnd change the `onion_service` directory to the new one:\n\n```bash\nHiddenServiceDir /var/lib/tor/myonion/\n```\n\nReatart Tor:\n\n```bash\nsudo systemctl restart tor\n```\n\nAgain you may have to wait a few minutes for the new onion to propegate, then it should work in the Tor Browser.\n\n## That's all folks!\n\nIn this tuTORial you've learned:\n\n* The basic structure of onion routing\n* Why an onion address is useful even for a clearnet site\n* The difference between an exit and non-exit relay\n* How to set up a non-exit relay\n* How to set up a hidden service\n* How to create a custom onion address\n* How to redirect a clearnet site to an onion site\n\nFuture posts will go over further topics such as using Tor to self-host everything from websites to Bitcoin and Lightning nodes from your own machine and internet connection without opening ports and exposing your IP address. If you are intimidated by the terminal you need not worry as multiple automated user interfaces exist to sort all the details out for you.\n\nIf you liked this post and want more you can follow me on Nostr.\n\nMy NIP-05 is `xanny@nostr.xanny.family`.\n\n[Here is a link via Snort.social](https://snort.social/p/npub17rlc0emedw5xljztfqrmykjaacsx6ujvdas64zznjadrnhhwlavq4jjtgg) and here is my npub:\n\n`npub17rlc0emedw5xljztfqrmykjaacsx6ujvdas64zznjadrnhhwlavq4jjtgg`\n\nIf you're feeling generous enough to zap some sats you can do so via Nostr or by using [this link](https://getalby.com/p/xanny) or the lightning address `xanny@xanny.family` - thank you for reading this far! PV!","sig":"b4d2c213815552f01996da7551ee2b07c1b8f832fd5c9c7734c94c8899ab3ba2db7cea159129732d5afb4dfe75dc5cd2b4e922e82746465608cee4104ded37aa"},"naddr1qq84yatwt9hh2uj0wah9yetvv9uszrthwden5te0dehhxtnvdakqygq2k593nzpy7nkesm60f9lkz60smyp3y272599ukywwe5aeyffzhspsgqqqw4rsu8jugh":{"kind":30023,"id":"c820908b738774c17f8d1897f140d7cd79d13c530aae6a0e51cf5c0c0802bbf8","pubkey":"0ab50b198824f4ed986f4f497f6169f0d903122bcaa14bcb11cecd3b922522bc","created_at":1689873822,"tags":[["d","RunYourOwnRelay"],["title","How to run your own relay"],["summary","How to build, install, run and update nostr-rs-relay."],["published_at","1689871348"],["t","nostr"],["t","nostr-rs-relay"],["t","relay"],["t","bitcoin"],["t","P2P"],["image","https://cdn.nostr.build/i/62f77eade142e0ef98f5fe9f12b03388581e30a25b3979b45fcd769bcab5755e.jpg"],["a","34550:6a61e1d870393e7963c6c9a23988b587349daef6572a5296c40ee052adf0a254:nostr"]],"content":"# Introduction\n\nThis short post goes through a quick way to setup and host your own #nostr relay, on any kind of hardware--from smols like Raspberry Pi, to heavyweight VPSes or baremetal servers.\n\nI'll be covering the `nostr-rs-relay` #relay, which is a great, feature-complete, and lightweight relay software. It writes to an sqlite3 database, but postgres is also supported (currently experimental).\n\n# Requirements\n\nYou'll need:\n\n- Some kind of machine to host it on.\n- DNS controls, so some kind of domain/subdomain to point it to.\n- Some knowledge of #CLI terminal-based software build and deployment.\n- Linux, and general administrative knowledge. Debian/Ubuntu-based systems are fairly easy to get it all working, and stay updated.\n\n# Getting started\n\nOverall, if you have the above requirements, it's not too difficult to get up and running in a few minutes/hours (depends how quickly you can build the software, and how proficient you are with command line).\n\nThe best tutorial article I have found on building and installing the relay can be found here: [https://github.com/BlockChainCaffe/Nostr-Relay-Setup-Guide](https://github.com/BlockChainCaffe/Nostr-Relay-Setup-Guide). It should get you running fairly quickly. You will need to be familiar with building software, as well as generating certificates via Let's Encrypt. Be sure to enable access at your firewall, if desired.\n\nFor further details, you can check the official repo, [here](https://github.com/scsibug/nostr-rs-relay).\n\n# Configuration\n\nCheck out the configuration options and useful comments to help configure your instance, [here](https://github.com/scsibug/nostr-rs-relay/blob/master/config.toml). \n\nI recommend you pay particular attention to:\n\n- `pubkey`, which needs a **hex-based public key**, not `npub` format.\n- `[limits]` section, where you can define sane resource limits.\n- `[logging]` section, where you can configure where you want the logs to go.\n- Running a paid relay is beyond the scope of this document but you can easily set this up within this configuration file.\n\n# Staying updated\n\nIf you are running from the git repo, you'll want to re-build and update your `nostr-rs-relay` binary regularly, to stay updated with the latest bugfixes and features.\n\nTo update your binary:\n\n- Go to the directory where you cloned the git repo.\n- Run: `git pull`\n- If there are changes (new commits), re-build the binary: `cargo build --release`\n- Replace your `nost-rs-relay` binary, wherever it is located, with the newly built binary.\n\n# Monitoring\n\nYou can `tail` the daily logfiles to get an idea of what's happening with the relay.\n\n# Conclusion\n\nThat's pretty much it! You now have a nostr relay running as a service on your box. You can make it public, to assist the network, or you can run it privately to ensure your posts belong to you at all times. Your workflow will likely change and evolve as you become more familiar with the relay software, the sqlite3 database, the logs, etc.. \n\nIf you'd like me to cover any additional details, don't hesitate to let me know. Thanks for reading! üò∏‚ö°","sig":"7f2ddb6eda1ca617cc86ecccefde843e9e9210e161876835433fa872fd00da60925f770c5ed378cbffa480383b122b335ccd2a3a1797fdc142dee0b8eca93e2f"},"naddr1qqfk67tjv4kxz7fwwpskwefdwcczuv3wxqq3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qgswwud0pvzu362lehm0av6sq4zd97cue5uy0z8f7jgtk0hz368dvmcrqsqqqa28nc0kez":{"kind":30023,"id":"17818333da96d74120c6533126eb69aabdb1e1b4793d753ae3e5e7689c5d1c17","pubkey":"e771af0b05c8e95fcdf6feb3500544d2fb1ccd384788e9f490bb3ee28e8ed66f","created_at":1713565783,"tags":[["d","myrelay.page-v0.2.0"],["title","myrelay.page transforms your relay's landing page into a customizable micro-client"],["summary","An article about new myrelay.page features and NIP-78 "],["published_at","1713552596"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpem34u9stj8ftlxldl4n2qz5f5hmrnxns3uga86fpwe7u28ga4n0qqfk67tjv4kxz7fwwpskwefdwcczuv3wxqd85rsn"],["published_at","1713552596"],["published_at","1713552596"],["published_at","1713552596"],["t","relay"],["t","relays"],["t","client"],["t","clients"],["t","microapp"],["t","opensats"],["t","todo"],["image","https://image.nostr.build/31d12263485957f8d13f127e2bbe9559b03dac60714d506ea3c179b656d777bd.png"],["published_at","1713552596"]],"content":"Have you ever seen a relay and out of curiosity visited the https canonical of a relay by swapping out the `wss` with `https`? I sure have, and I believe others have too. When I ran `https://nostr.sandwich.farm` in late 2022/2023, I had thousands of hits to my relay's https canonical. Since then, I've dreamed of improving the look and feel of these generic default _landing pages_.\n\nWith the release of [myrelay.page v0.2](https://github.com/sandwichfarm/myrelay.page), relays can now host their own customizable micro-client at their _https canonical_.\n\nTransform your relay's landing page from this:\n![strfry default page](https://image.nostr.build/de9d56c610fe164e51e255a829a292a437359e8c23cfe26b931f5fdd33d04b2d.png)\n\nor this:\n![nostr-rs-relay default page](https://image.nostr.build/4b320b11f664de0484d00e53a33d7fbe6737116bfc0d5ce330c427719eb9b5ab.png)\n\nto something _like_ this: \n![nostr-rs-relay default page](https://image.nostr.build/90bd6370e45aab262dea3f68731b7f756ce66602d55b4bbc1cf8bc809cafb216.png)\n\nI say \"something _like_ this\" because each page is customizable at runtime via the page itself.\n\n# In a nutshell\n\n[myrelay.page](https://github.com/sandwichfarm/myrelay.page) is a self-configuring, Client-Side Rendered (CSR) micro-client specifically built to be hosted at relay canonicals, customizable at runtime via NIP-78. Check out a [live example](https://lunchbox.sandwich.farm).\n\n# Features: \n1. Dark or light theme\n2. Join relay\n3. Relay operator profile and feed\n4. Zap relay operator \n5. See people you follow who are on the relay \n6. Customizable by the relay operator\n  - Enable/disable blocks\n  - Sort blocks\n  - Add HTML blocks\n  - Add image blocks\n  - Add markdown blocks\n  - Add feed blocks, with two layouts (grid/list) and customizable filters. \n\n**You can find a full list of features complete and todo [here](https://github.com/sandwichfarm/myrelay.page?tab=readme-ov-file#todo)**\n\n# Why I created myrelay.page\n\nFor several different reasons. \n\nFirstly, the default, bland relay pages always seemed like a missed opportunity. I jotted down an idea to build a relay micro-client in early January 2023, but never had the time to start it.\n\nNext, I've been ramping up the refactor of [nostr.watch](https://nostr.watch) and first need to catch up on client-side technologies and validate a few of my ideas. To do this, I have been conducting short research \u0026 development projects to prepare and validate ideas before integrating them into an app I intend to support long-term. One of those R\u0026D projects is [myrelay.page](https://github.com/sandwichfarm/myrelay.page).\n\nAdditionally, I wanted to explore NIP-78 a bit more, a NIP that came into fruition after a conversation I had with @fiatjaf on February 23rd, 2023. It stemmed from the desire to store application-specific data for app customization. I have seen clients use NIP-78, but from what I've seen, their implementations are limited and do not demonstrate the full potential of NIP-78. _There's more on NIP-78 towards the end of this article_\n\nThe convergence of these needs and ideas, in addition to having an itch I needed to scratch, resulted in the creation of myrelay.page.\n\n\u003e *_Could be wrong, please let me know in the comments if you have examples of nostr clients that utilize NIP-78 for propagating customizations to other visitors_.\n\n# Editor Flow\n\nNow I'm going to give you a brief example of the Editor Flow on myrelay.page. There's a lot that isn't covered here, but I want to be as brief as possible.\n\n_Note: [myrelay.page](https://github.com/sandwichfarm/myrelay.page) is alpha, there are bugs, quality of life issues and things are far from perfect._\n\n## Login\n\u003e Presently, myrelay.page only supports NIP-07 authentication, but other authentication methods will be implemented at a later date.\n\n\u003eIn order to customize your page, you need to have a **valid NIP-11** document that provides a valid **hex** `pubkey` value that is the same as the key you use to login.\n\n![image of the header with login button](https://image.nostr.build/9beab8ce9d863f75d0dcaad44f44f99e59361900c27d458b0f0cb77ec499e2bf.png)\n\n## Click \"Edit\"\n\n![image of the header with edit button](https://image.nostr.build/b70d5c96bd0999e5556323b5b0c135931ac95b0e162fdcb4b2981f79e95032a8.png)\n\n## Add a block \nFor brevity, I'm going to add a markdown block\n\n![add block interface](https://image.nostr.build/9ec7ba8a87053f55f1434993efc78218b10d3aaa82650b1a78058eb2104378a9.png)\n\n## Configure the block \nAdd a title to the block and a sentence with markdown syntax. \n\n![image of the page editor](https://image.nostr.build/6fdeb917b1cc9dda49479419f85a897f531b641a4be947b89d5176c04b76a20f.png)\n\n## Publish the configuration\nClick publish and confirm the event, once it's been published to relays the page will refresh. \n\n_Note: Again it's alpha, so the page doesn't refresh after a few seconds, the publish probably failed. Press publish until it refreshes. Error handling here will improve with time._\n\n## Confirm state persistence\nAfter reload, you should see your block persisted. Anyone who visits your page will see your newly configured page. Big caveat: Given the blessing of relays who store your configuration note, if your configuration cannot be found or you cannot connect to your relays, visitors will only see your relay's NIP-11.\n\n![updated page](https://image.nostr.build/ed97a9c818371aaf28a4c99e93bd2ecbc7448a88dd5a9bce07383c92e5959965.png)\n\n# Interested?\n\n[myrelay.page](https://github.com/sandwichfarm/myrelay.page) is alpha and only has two releases, so if you want to be an early adopter, you'll need the skillset and patience of an early adopter. That said, as long as you have some basic development and sysadmin skills as well as understand your reverse-proxy of choice, it's a quick, easy and low-risk side project that can be completed in about 20 minutes.\n\n## 1. Build\n\n`yarn build` or `npm run build` or `pnpm run build` (note: I had issues with pnpm and cannot guarantee they are resolved!)\n\n## 2. Deploy\n\nMove the contents of `build` folder to your relay server (or another server that you can reverse-proxy to from your relay)\n\n## 3. Update your reverse-proxy configuration\n\nYou'll need to split your relay traffic from the http traffic, this ranges from easy to difficult, depending on your server of choice. \n  - **caddy**: By far the easiest, see an example configuration for strfry [here](https://github.com/sandwichfarm/myrelay.page/blob/main/caddy/strfry/Caddyfile) (easily adapted by those with experience to other relay software)\n  - **nginx**: A little more stubborn, here's the [most recent nginx config I got to work](https://gist.github.com/dskvr/4ea1937bd5c2161249146bc1edd2682e). You'll need to serve the static site from an internal port (`8080` in the aforementioned nginx conf)\n  - **haproxy**: Should be easier than nginx or maybe even caddy, haven't tried yet.\n  - **no reverse-proxy**: **shrugs**\n\nIf any of that's over your head, I'll be providing detailed guides for various deployment shapes within the next few weeks.\n\n# Exploring NIP-78\n\nOne of the special things about NIP-78 is that it is application specific, meaning, you don't need to conform to any existing NIP to make magic happen. Granted there are limits to this, as interoperability reigns supreme on nostr. However, there are many use cases where interoperability is not particularly desirable nor beneficial. It doesn't change the care needed to craft events, but it does enable a bunch of unique opportunities.\n\n1. A nostr client that is fully configurable and customized by the user.\n2. A nostr powered CMS that can be edited entirely on the client-side.\n3. Any use case where an application has special functionality or complex data structures that present no benefit in the context of interoperability (since they are \"Application Specific\").\n\n# Final thoughts\n\nI was surprised at how quickly I was able to get [myrelay.page](https://github.com/sandwichfarm/myrelay.page) customizable and loading within an acceptable timeframe; `NIP-11`, the operator's `NIP-65` and the _myrelay.page_ `NIP-78` events all need to be fetched before the page is hydrated! While there is much to do around optimization, progressive page-loading, and general functionality, I'm very happy with the outcome of this short side project.\n\nI'll be shifting my focus over to another micro-app to validate a few concepts, and then on to the next [nostr.watch](https://nostr.watch). Rebuilding nostr.watch has been a high-priority item since shortly after Jack lit a flame under nostr in late 2022, but due to personal circumstances in 2023, I was unable to tackle it. Thanks to [@opensats](https://opensats.org/) I am able to realize my ideas and explore ideas that have been keeping me up at night for a year or more.\n\nAlso, if you're a relay developer and are curious about making it easier for developers to deploy [myrelay.page](https://github.com/sandwichfarm/myrelay.page), get in touch. \n\nNext article will likely be about the micro-app I briefly mentioned and [nostr.watch](https://nostr.watch). Until then, be well.\n","sig":"4f02383d3bf59136c5397b4ace99a7eb1bbabaa5c5214bf705587a7ecfc6a4308119436872466ebb7f16aa50f227aced4e3fcbe43ca605fbfc7fe2d029cc5e90"},"naddr1qqn4w6rpwsk5zun9946xsefdg9a85ctdduk5ummnw3ez65n9d3shjuedv3exuvenv5q3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qgsfff483fdwhwayp0g64g3rfqgpxtpdsqzthythv9kyz0fuph0nyrsrqsqqqa28v6uhmw":{"kind":30023,"id":"5f715eaa62384ce9fe469d21130c49f54492cebad5a0e62815c019937d8a71ea","pubkey":"94a6a78a5aebbba40bd1aaa2234810132c2d8004bb9177616c413d3c0ddf320e","created_at":1732736172,"tags":[["title","What Are the Azzamo Nostr Relays?"],["image","https://blossom.primal.net/84a41f0d655e6408c0a273daf2c596f886ccfc3eef8552027516b8b235b16323.png"],["t","grownostr"],["t","nostr"],["t","relay"],["t","paidrelays"],["t","relaystr"],["t","azzamo"],["t","introductions"],["published_at","1732736167"],["d","What-Are-the-Azzamo-Nostr-Relays-drn33e"]],"content":"The backbone of your Nostr experience lies in relays‚Äîservers that transmit your notes, zaps, and private messages across the decentralized network. Azzamo offers three specialized relays to suit different user needs, ensuring reliability, performance, and privacy.\n\n### **1. Free Relay**\n\n- **URL:** `wss://nostr.azzamo.net`\n- **Overview:** Azzamo‚Äôs Free Relay is perfect for newcomers to Nostr. It‚Äôs open-access, reliable, and ensures fair use with moderate rate limits.\n- **Key Features:**\n  - Free to use.\n  - Notes older than one month are purged daily.\n  - Accessible gateway for decentralized communication.\n\n---\n\n### **2. Paid Relay**\n\n- **URL:** `wss://relay.azzamo.net`\n- **Overview:** Designed for power users, the Paid Relay offers unmatched performance with 99.9% uptime and low latency.\n- **Key Features:**\n  - Scalable for heavy users.\n  - Fewer users for faster, consistent connections.\n  - Premium support included for paid users.\n\n---\n\n### **3. Inbox Relay**\n\n- **URL:** `wss://inbox.azzamo.net`\n- **Overview:** Never miss a private message again with the Inbox Relay, optimized for secure, spam-free direct messaging.\n- **Key Features:**\n  - Guaranteed message delivery.\n  - Optimized for NIP-17 private messages.\n  - Optimized for NIP-19 group chats.\n  - Premium users enjoy advanced support.\n\n---\n\n### **Why Choose Azzamo Relays?**\n\nLife on Nostr is easier with Azzamo relays. They‚Äôre fast, reliable, and built to handle whatever you throw at them. The Paid Relay keeps your connections strong, the Inbox Relay makes sure no private message gets lost, and the Free Relay is always there to get you started. Supporting Azzamo by going premium helps keep this decentralized network growing‚Äîand you get priority support while you‚Äôre at it. Azzamo has your back on Nostr! \n\nüîó **Start now:**\n\n- Free Relay: `wss://nostr.azzamo.net`\n- Paid Relay: [azzamo.net/pay](https://azzamo.net/pay)\n- Inbox Relay: [azzamo.net/inbox](https://azzamo.net/inbox)\n\nSupport the network and upgrade your experience‚Äîadd time to your account via the [Azzamo Dashboard](https://azzamo.net/nostr-dashboard/). Choose Azzamo, and take control of your Nostr journey today!","sig":"2ea1bd15874117a7529af5b69f97f3a17d6b1b8f233989f19dda2720a7286fd810748214391c21777597056c6c42b3464aa1e3ccef661dcefa87447827167243"},"naddr1qqrkgwnxv4jkgucpzpmhxue69uhkummnw3ezuamfdejsygrlts45uj9qa8lv5caydvfumwpy386qyquc6c9zqu9fdr92sxxht5psgqqqw4rsel4l4k":{"kind":30023,"id":"4e7c9b95b31cd13e9389892ae16baf855750f0f9f1a5f1c83a71241a830cdd50","pubkey":"7f5c2b4e48a0e9feca63a46b13cdb82489f4020398d60a2070a968caa818d75d","created_at":1685348196,"tags":[["d","d:feeds"],["title","Feeds: Nostr Content Curation that Rewards"],["summary","A new Nostr tool that brings content curation to the next level was released. Let's dive in to see how it works."],["published_at","1685015198"],["t","Nostr"],["t","content"],["t","curation"],["t","nostr features"],["t","relay"],["t","moderation"],["image","https://nostr.build/p/nb9417.png "]],"content":"\u003e This guide is also available in Spanish thanks to nostr:nprofile1qqsp3ca0rm0wedc9gt4huqqv7hzragxk6wmeawmyer3vnze5r4pwthcpr9mhxue69uhhyetvv9ujumn0wd68y6trdqhxcctwvsq3jamnwvaz7tmsw4exzanfv3sjumn0wd68ytnvv9hxgqg4waehxw309ahx7um5wghxjmn0wd6xztnrvvq32amnwvaz7tmwdaehgu3wd45kcmm49ekx7mqpzemhxue69uhhyetvv9ujumn0wd68ytnzv9hxgqgswaehxw309ahx7um5wgh8w6twv5qkvamnwvaz7tmxd9k8getj9ehx7um5wgh8w6twv5hkuur4vgcnqcth0f4ku6n8x4er2mrpdfh8ydfnxsensmnyvduk57tvvachxunwwf68zdt8wfengwf4wc6ryutrxeshwum2xs6hjueh8a38ymmpv33kzum58468yat9qyt8wumn8ghj7cnfw33k76twv4ezuum0vd5kzmqprfmhxue69uhhyetvv9ujummjv9hxwetsd9kxctnyv4mqzxnhwden5te0wfjkccte9ehx7um5wfcxcetzwvhxxmmdqyw8wumn8ghj7atwd9mx2unnv5hxummnw3exjcmg9ekxzmnyqyw8wumn8ghj7mn0wd68ytndw46xjmnewaskcmr9wshxxmmdqy2hwumn8ghj7etyv4hzumn0wd68ytnvv9hxgqgcwaehxw309aex2mrp0yhxummnw3exzarf9e3k7mgrnqzy8: nostr:naddr1qqxnzd3cx5ersdehxycn2venqyvhwumn8ghj7un9d3shjtnwdaehgunfvd5zumrpdejqzxthwden5te0wp6hyctkd9jxztnwdaehgu3wd3skueqpz4mhxue69uhkummnw3ezu6twdaehgcfwvd3sz9thwden5te0dehhxarj9ekkjmr0w5hxcmmvqyt8wumn8ghj7un9d3shjtnwdaehgu3wvfskueqpzpmhxue69uhkummnw3ezuamfdejszenhwden5te0ve5kcar9wghxummnw3ezuamfdejj7mnsw43rzvrpwaaxkmn2vu6hydtvv94xuu34xv6rxwrwv33hj6ned3nhzumjdee8guf4vae8xdpex4mrgvn3vvmxzamndg6r27tnxulkyun0v9jxxctnws7hgun4v5q3vamnwvaz7tmzd96xxmmfdejhytnnda3kjctvqyd8wumn8ghj7un9d3shjtn0wfskuem9wp5kcmpwv3jhvqg6waehxw309aex2mrp0yhxummnw3e8qmr9vfejucm0d5q3camnwvaz7tm4de5hvetjwdjjumn0wd68y6trdqhxcctwvsq3camnwvaz7tmwdaehgu3wd46hg6tw09mkzmrvv46zucm0d5q32amnwvaz7tm9v3jkutnwdaehgu3wd3skueqprpmhxue69uhhyetvv9ujumn0wd68yct5dyhxxmmdqgsp3ca0rm0wedc9gt4huqqv7hzragxk6wmeawmyer3vnze5r4pwthcrqsqqqa28uadjqd.\n\nA new tool\n----------\n\nA new Nostr tool was released by the invisible Nostr warrior nostr:npub1xdtducdnjerex88gkg2qk2atsdlqsyxqaag4h05jmcpyspqt30wscmntxy, a man behind [nostr.band](https://nostr.band/). Nostr Band empowers renowned Nostr clients like [Snort](https://snort.social/), [Amethyst](https://github.com/vitorpamplona/amethyst), and [Iris](https://iris.to/global) with its backend tools. Moreover, Nostr Band serves as a versatile Swiss Army knife for end users, offering a wide range of services and features including [search](https://nostr.band/), [statistics](https://stats.nostr.band/), [Nostr addresses](https://nip05.nostr.band/), and more. Notably, the tool incorporates a robust relay system, previously discussed in [one of my comprehensive guides](https://lnshort.it/nostr-relays). I invite you to explore the possibilities this service presents by visiting [https://nostr.band/](https://nostr.band/).\n\nBut today, I am thrilled to share the latest development in the ecosystem of Nostr Band: Feeds.\n\nContent curation on Nostr¬†\n--------------------------\n\nNostr, being a relatively young protocol, has primarily focused on laying the foundation and ensuring core functionality. As a result, the implementation of certain features and possibilities has taken time. One such area that has been lacking is content curation. Until now, end users have had limited options to shape the content they consume, relying on [tweaking relay bundles](https://lnshort.it/nostr-relays) or using specific clients that offer more flexibility in adjusting feeds, such as [Primal](https://primal.net/home).\n\nAmong the available tools is the powerful microapp by nostr:npub1zuuajd7u3sx8xu92yav9jwxpr839cs0kc3q6t56vd5u9q033xmhsk6c2uc, known as [listr.lol](https://listr.lol/). It allows users to create and manage lists to curate content from participating sources. However, its integration into popular Nostr clients is still a work in progress, making its usage somewhat inconvenient. Besides, current implementations mostly focus on profile lists, which limits one's ability to do topic-based curation..\n\nAnother option is [Zapddit](https://zapddit.com/feed), a Reddit-like client developed by nostr:npub1ltx67888tz7lqnxlrg06x234vjnq349tcfyp52r0lstclp548mcqnuz40t. Zapddit enables users to follow desired topics by subscribing to hashtags and ignore some conversations by muting unwanted hashtags. However, reliance on hashtags poses limitations as not all users consistently utilize them, potentially resulting in missed content or exposure to undesired content.\n\nUnique approach\n---------------\n\nFeeds by Nostr.Band bring a whole new way to curate Nostr content, giving readers the power to customize their information intake and letting curators create unique information flows while earning recognition for their efforts. Remember when I mentioned how there aren't many tools out there that let you shape your feeds? Well, it's true! We all have different tastes when it comes to the content we want to see. Just think about the variety of traditional platforms we have -- Twitter for quick and snappy updates, Instagram for breezy visual content, and so on. But do we really need a separate app for every mood? I don't think so.\n\n\u003chttps://nostr.build/p/nb9416.jpg\u003e\n\nEnter Nostr Feeds, the solution that lets you curate your own content experience without the need for multiple apps. Tailor your feed to your preferences -- whether you crave bite-sized updates, popular notes or captivating visuals. Say goodbye to one-size-fits-all feeds and hello to a whole new level of content curation. Subscribe to the feeds that interest you and receive curated content tailored to your preferences. Make your feed truly yours!\n\nSounds interesting? Let's dive into how this works!\n\n### The consumer¬†\n\nAs a content consumer all you've got to do is add a feed to your relays list and start receiving corresponding content in your Global feed a.k.a. \"The Universe\". Don't want to follow the feed you subscribed to? You are free to remove the relay from the bundle you use. Explore an ever-growing collection of feeds on [this dedicated page](https://feeds.nostr.band/index.html). More creators are joining in to provide their own curated content, expanding your options.\n\nI'd like to show you a simple example of how this works by sharing a feed I've created to quench the thirst of the community for high quality memes. Hungry for memes? Simply add **wss://feeds.nostr.band/meme** to your relays list. Now your Global feed will display the memes üê∏ I am handpicking with love üíú especially for you. Moreover, you no longer have to follow every single meme connoisseur to have the best memes available on Nostr at your fingertips. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9408.gif\u003e\n\nBelieve it or not, there's more to it! Let me share a little trick that could revolutionize how we engage with content. But first, let's dive into an example.\n\nPicture this: you've had a long day in the fiat mines... Even the greatest philosophers need a break to clear their heads. There is no better way than indulging in a fresh dose of memes, don't you agree? To immerse yourself in the world of memes, simply mute all the relays you are connected to in your Global feed and only keep the connection to **wss://feeds.nostr.band/meme**. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9411.gif\u003e\n\nThat's it. You've got your desired feed delivering the content you want without having to scroll through other topics, which you don't feel like consuming at the moment.\n\nOther useful feeds include Pictures (**wss://feeds.nostr.band/pics**) and Popular (**wss://feeds.nostr.band/popular**). As I mentioned, you will see many new ones pop up as this tool gains popularity. \n\n### The curator\n\nImagine the possibilities of creating your very own feed. Whether it's for a close-knit circle of friends or aspiring to be a global curator in the Nostr Universe, the power is in your hands. Are you an art connoisseur, a car enthusiast, or an educator? Craft your own feed and guide your tribe towards a world of high-quality, handpicked content.\n\nIn a world inundated with information, separating the signal from the noise is a priceless skill. With limited tools available to end users, being able to offer truly valuable content makes you a true champion in your field. By curating your feed, you become a beacon of knowledge, guiding others to the most valuable and selective content.\n\nIt's time to redefine content consumption and elevate the Nostr experience. Join the ranks of content curators and make a difference in the sea of excessive information.¬†\n\n#### Creating a feed\n\n1. Visit \u003chttps://feeds.nostr.band/index.html?create=true\u003e\n\n2. Fill up required fields\n\n\u003chttps://nostr.build/p/nb9414.png\u003e\n\n3. Pay the invoice to gain access to your own relay.\n\n\u003e Unlocking a feed comes with a monthly subscription, granting you access to a powerful tool backed by the nostr.band relay and user-friendly UI tools. This infrastructure ensures seamless and effortless curation at your fingertips.\n\nBeing in its early stages, feeds' potential for enhancements is boundless. By getting in on the ground floor, you position yourself to reach new heights before others.\n\n\u003chttps://nostr.build/p/nb9415.png\u003e\n\n4. That's it. You've got your feed ready to collect and share the best content!\n\n#### Managing a feed\n\nWhile tools to simplify curation process are being developed as we speak, here are the steps currently required to manage your feed:\n\n1. Copy the `noteId` of an event you'd like to add to your feed (or search for it on nostr.band)\n\n2. Visit nostr.band and paste the `noteId` into the search field\n\n3. Click on the note you'd like to add to the feed\n\n4. Press the **Label** button below the note and select the label that corresponds to the feed you'd like to add the note to. \n\n\u003chttps://nostr.build/p/nb9413.png\u003e\n\n\u003e üí° All notes labeled by you will be highlighted green for your convenience.\n\nCongrats! You now have your own Nostr feed you can curate. Share your feed in the comments below -- let's see who comes up with the most creative and useful feeds.\n\n\u003e ‚ö°Ô∏è I'll spare 21k sats for the feed operators with the most interesting feed ideas. To get some sats, share your feed in the comments and make sure to maintain it. I'll¬† check back in a week or so to zap the most impressive feed operators.\n\nBenefits of running own feed\n----------------------------\n\nApart from being a good-old uncle Jim helping out the circle of close friends and family receive curated content, you can potentially benefit from increased exposure in the community and even earn sats for running your own quality feed. There already are a few options in this regard (keep in mind that there are many more to come):\n\n1. As you spin up your own feed you automatically turn into a Nostr relay operator and become discoverable in the relay info tab. This helps increase your discoverability and allows users, who value your input, zap your profile.\n\n\u003chttps://nostr.build/p/nb9418.png\u003e\n\n2. Some clients, like Snort, support a so-called [Zap Pool](https://snort.social/zap-pool), which allows users to allocate a desired percentage of zaps to favorite infrastructure contributors. As by spinning up a feed you become a relay operator, you may become discoverable on Snort's Zap Pool and start receiving sats with every zap sent by Snort users who enabled this feature.\n\n\u003chttps://nostr.build/p/nb9419.png\u003e\n\n\u003e See the next section for upcoming features which will help you monetize your efforts.\n\nPerspectives\n------------\n\nToday Nostr Band Feeds can be considered a playground for the inquisitive minds. They require some skills and determination to operate and lots of improvements are yet to be implemented. I believe this idea is powerful and will gain traction, pushing Nostr client developers to natively integrate the tools necessary to make the feed runners' workflow silky smooth.\n\nAmong the expected improvements are:\n\n-   Supporting multiple maintainers to run the feed\n\n-   Feed management automation\n\n-   Paid feed subscriptions\n\n... and more\n\nAs you can see, we are still early, which makes everyone who jumps aboard now a first-mover. Embrace the power of Nostr and become the curator to grow your tribe and help everyone around you receive truly valuable content.\n\nBelieve me, Nostr users reward proactive and determined creators like nobody else does. This is why our community is so strong; this is why we are winning! \n\n* * * * *\n\n-   Enjoy memes? Don't forget to add wss://feeds.nostr.band/meme to your relay bundle.¬†\n\n- Want to learn about the best relay set up out there? Have a look at my guide on Nostr relays [here](https://lnshort.it/nostr-relays).","sig":"0dbd7a30b986472306f41691f44ff17fa3e0dd31e79f04cc9932c65b13b759ed63523d3f84d159950efa6a31b3af9b1013e79bb31645308730d8a36d07386238"},"naddr1qqxhyetvv9ukuet9v3ekjar9qyg8wumn8ghj7mn0wd68ytnhd9hx2q3qy3uh89v5a4vq92t8q0j6su94zhvcdxpywjn3l6hpsr5welarqtrqxpqqqp65w006dnj":{"kind":30023,"id":"54d8d66355fad0a5c8cfe9dde4873287ada612f2575f1063fb634513f5a9b1d9","pubkey":"2479739594ed5802a96703e5a870b515d986982474a71feae180e8ecffa302c6","created_at":1683751863,"tags":[["d","relayneedsite"],["title","Why Your Nostr Relay Needs a Website "],["summary","Relays need a site at the base URL to give users more information about the relay with Terms of Service, Privacy Policy, and general usage information. "],["published_at","1683751863"],["t","relay"],["t","relays"],["t","NIP-11"],["image","https://nostr.build/i/548b1edf8afcf53c69959a58b46d0914f98fa0a86ba283873af592c9e49fe4cc.jpg"]],"content":"We've all seen it. You go to relay.somedomain.xyz and get the text returned \"Please use a Nostr client to connect.\".\n\nIf you are an advanced user, you might use curl to see what the [NIP-11](https://github.com/nostr-protocol/nips/blob/master/11.md) of the relay is:\n\n`curl -H 'accept: application/nostr+json' https://relayable.org`\n\n**Above example output:**\n`{\"contact\":\"hello@citizenry.technology\",\"description\":\"A new way to relay.\",\"name\":\"Relayable.org\",\"pubkey\":\"npub16fcy8ynknssdv7s487nh4p2h4vr3aun64lpfea45d7h4sts9jheqevshgh\",\"software\":\"git+https://github.com/hoytech/strfry.git\",\"supported_nips\":[1,9,11,12,15,16,20,22],\"version\":\"v103-e5ec135\"}`\n\nBut this is only a limited amount of general information about the relay. What is needed is a basic webpage at the root of the relay's domain name. Better yet, a detailed page with a Terms of Service and Privacy Policy. Outlining what is and is not allowed on the relay and how admin(s) handle Spam and bad bots.\n\nYou can quickly generate this page using [Jekyll](https://jekyllrb.com/) or [MkDocs](https://www.mkdocs.org/) and keep it updated. Along with adding general information about where geographically the relay is hosted, on what provider(s), and data retention practices (e.g., Do you delete data over X days or months old?).\n\nRelay operators may also look into the legal (aka no fun) side of running a relay. \n\n* Do you fall under GDPR?\n* Do you need to have a DMCA contact address (https://www.copyright.gov/dmca-directory/)?\n* Are there other local regulations that might get you in trouble depending on what is allowed on your relay?\n\nThere are many more. These are just examples. At the least, you may want to add verbiage in your ToS or Privacy Policy to cover your ass for things like those mentioned above.\n\n## How to add a site to your relay address with nginx:\nhttps://relayable.org/nginx-top-level-domain-websockets-site.html\n\nWe use this approach with Relayable.org:  \nhttps://relayable.org \u0026 wss://relayable.org  \n  \n  \n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n","sig":"273ead07cc1d6e96091826b20d88d340d0aab6046431e0c9671db7e1823d7fac4c87bacdfcda09ce9ec0f550ba714521f8100cb4c07b86aae3f5cd22980cd1fa"},"naddr1qqxnzd3cx5crzv35xv6rxv3cqyg8wumn8ghj7mn0wd68ytnhd9hx2q3q0awzknjg5r5lajnr53438ndcyjylgqsrnrtq5grs495v42qc6awsxpqqqp65w38a6ph":{"kind":30023,"id":"971ef32ffc1f18fea673cc5affa7a37811589b61e3713df6ba4a6493524dc3a9","pubkey":"7f5c2b4e48a0e9feca63a46b13cdb82489f4020398d60a2070a968caa818d75d","created_at":1685015198,"tags":[["d","1685012434328"],["title","Feeds: Nostr Content Curation that Rewards"],["summary","A new Nostr tool that brings content curation to the next level was released. Let's dive in to see how it works."],["published_at","1685015198"],["t","Nostr"],["t","content"],["t","curation"],["t","nostr features"],["t","relay"],["t","moderation"],["image","https://nostr.build/p/nb9417.png "]],"content":"A new tool\n----------\n\nA new Nostr tool was released by the invisible Nostr warrior nostr:npub1xdtducdnjerex88gkg2qk2atsdlqsyxqaag4h05jmcpyspqt30wscmntxy, a man behind [nostr.band](https://nostr.band/). Nostr Band empowers renowned Nostr clients like [Snort](https://snort.social/), [Amethyst](https://github.com/vitorpamplona/amethyst), and [Iris](https://iris.to/global) with its backend tools. Moreover, Nostr Band serves as a versatile Swiss Army knife for end users, offering a wide range of services and features including [search](https://nostr.band/), [statistics](https://stats.nostr.band/), [Nostr addresses](https://nip05.nostr.band/), and more. Notably, the tool incorporates a robust relay system, previously discussed in [one of my comprehensive guides](https://lnshort.it/nostr-relays). I invite you to explore the possibilities this service presents by visiting [https://nostr.band/](https://nostr.band/).\n\nBut today, I am thrilled to share the latest development in the ecosystem of Nostr Band: Feeds.\n\nContent curation on Nostr¬†\n--------------------------\n\nNostr, being a relatively young protocol, has primarily focused on laying the foundation and ensuring core functionality. As a result, the implementation of certain features and possibilities has taken time. One such area that has been lacking is content curation. Until now, end users have had limited options to shape the content they consume, relying on [tweaking relay bundles](https://lnshort.it/nostr-relays) or using specific clients that offer more flexibility in adjusting feeds, such as [Primal](https://primal.net/home).\n\nAmong the available tools is the powerful microapp by nostr:npub1zuuajd7u3sx8xu92yav9jwxpr839cs0kc3q6t56vd5u9q033xmhsk6c2uc, known as [listr.lol](https://listr.lol/). It allows users to create and manage lists to curate content from participating sources. However, its integration into popular Nostr clients is still a work in progress, making its usage somewhat inconvenient. Besides, current implementations mostly focus on profile lists, which limits one's ability to do topic-based curation..\n\nAnother option is [Zapddit](https://zapddit.com/feed), a Reddit-like client developed by nostr:npub1ltx67888tz7lqnxlrg06x234vjnq349tcfyp52r0lstclp548mcqnuz40t. Zapddit enables users to follow desired topics by subscribing to hashtags and ignore some conversations by muting unwanted hashtags. However, reliance on hashtags poses limitations as not all users consistently utilize them, potentially resulting in missed content or exposure to undesired content.\n\nUnique approach\n---------------\n\nFeeds by Nostr.Band bring a whole new way to curate Nostr content, giving readers the power to customize their information intake and letting curators create unique information flows while earning recognition for their efforts. Remember when I mentioned how there aren't many tools out there that let you shape your feeds? Well, it's true! We all have different tastes when it comes to the content we want to see. Just think about the variety of traditional platforms we have -- Twitter for quick and snappy updates, Instagram for breezy visual content, and so on. But do we really need a separate app for every mood? I don't think so.\n\n\u003chttps://nostr.build/p/nb9416.jpg\u003e\n\nEnter Nostr Feeds, the solution that lets you curate your own content experience without the need for multiple apps. Tailor your feed to your preferences -- whether you crave bite-sized updates, popular notes or captivating visuals. Say goodbye to one-size-fits-all feeds and hello to a whole new level of content curation. Subscribe to the feeds that interest you and receive curated content tailored to your preferences. Make your feed truly yours!\n\nSounds interesting? Let's dive into how this works!\n\n### The consumer¬†\n\nAs a content consumer all you've got to do is add a feed to your relays list and start receiving corresponding content in your Global feed a.k.a. \"The Universe\". Don't want to follow the feed you subscribed to? You are free to remove the relay from the bundle you use. Explore an ever-growing collection of feeds on [this dedicated page](https://feeds.nostr.band/index.html). More creators are joining in to provide their own curated content, expanding your options.\n\nI'd like to show you a simple example of how this works by sharing a feed I've created to quench the thirst of the community for high quality memes. Hungry for memes? Simply add **wss://feeds.nostr.band/meme** to your relays list. Now your Global feed will display the memes üê∏ I am handpicking with love üíú especially for you. Moreover, you no longer have to follow every single meme connoisseur to have the best memes available on Nostr at your fingertips. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9408.gif\u003e\n\nBelieve it or not, there's more to it! Let me share a little trick that could revolutionize how we engage with content. But first, let's dive into an example.\n\nPicture this: you've had a long day in the fiat mines... Even the greatest philosophers need a break to clear their heads. There is no better way than indulging in a fresh dose of memes, don't you agree? To immerse yourself in the world of memes, simply mute all the relays you are connected to in your Global feed and only keep the connection to **wss://feeds.nostr.band/meme**. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9411.gif\u003e\n\nThat's it. You've got your desired feed delivering the content you want without having to scroll through other topics, which you don't feel like consuming at the moment.\n\nOther useful feeds include Pictures (**wss://feeds.nostr.band/pics**) and Popular (**wss://feeds.nostr.band/popular**). As I mentioned, you will see many new ones pop up as this tool gains popularity. \n\n### The curator\n\nImagine the possibilities of creating your very own feed. Whether it's for a close-knit circle of friends or aspiring to be a global curator in the Nostr Universe, the power is in your hands. Are you an art connoisseur, a car enthusiast, or an educator? Craft your own feed and guide your tribe towards a world of high-quality, handpicked content.\n\nIn a world inundated with information, separating the signal from the noise is a priceless skill. With limited tools available to end users, being able to offer truly valuable content makes you a true champion in your field. By curating your feed, you become a beacon of knowledge, guiding others to the most valuable and selective content.\n\nIt's time to redefine content consumption and elevate the Nostr experience. Join the ranks of content curators and make a difference in the sea of excessive information.¬†\n\n#### Creating a feed\n\n1. Visit \u003chttps://feeds.nostr.band/index.html?create=true\u003e\n\n2. Fill up required fields\n\n\u003chttps://nostr.build/p/nb9414.png\u003e\n\n3. Pay the invoice to gain access to your own relay.\n\n\u003e Unlocking a feed comes with a monthly subscription, granting you access to a powerful tool backed by the nostr.band relay and user-friendly UI tools. This infrastructure ensures seamless and effortless curation at your fingertips.\n\nBeing in its early stages, feeds' potential for enhancements is boundless. By getting in on the ground floor, you position yourself to reach new heights before others.\n\n\u003chttps://nostr.build/p/nb9415.png\u003e\n\n4. That's it. You've got your feed ready to collect and share the best content!\n\n#### Managing a feed\n\nWhile tools to simplify curation process are being developed as we speak, here are the steps currently required to manage your feed:\n\n1. Copy the `noteId` of an event you'd like to add to your feed (or search for it on nostr.band)\n\n2. Visit nostr.band and paste the `noteId` into the search field\n\n3. Click on the note you'd like to add to the feed\n\n4. Press the **Label** button below the note and select the label that corresponds to the feed you'd like to add the note to. \n\n\u003chttps://nostr.build/p/nb9413.png\u003e\n\n\u003e üí° All notes labeled by you will be highlighted green for your convenience.\n\nCongrats! You now have your own Nostr feed you can curate. Share your feed in the comments below -- let's see who comes up with the most creative and useful feeds.\n\n\u003e ‚ö°Ô∏è I'll spare 21k sats for the feed operators with the most interesting feed ideas. To get some sats, share your feed in the comments and make sure to maintain it. I'll¬† check back in a week or so to zap the most impressive feed operators.\n\nBenefits of running own feed\n----------------------------\n\nApart from being a good-old uncle Jim helping out the circle of close friends and family receive curated content, you can potentially benefit from increased exposure in the community and even earn sats for running your own quality feed. There already are a few options in this regard (keep in mind that there are many more to come):\n\n1. As you spin up your own feed you automatically turn into a Nostr relay operator and become discoverable in the relay info tab. This helps increase your discoverability and allows users, who value your input, zap your profile.\n\n\u003chttps://nostr.build/p/nb9418.png\u003e\n\n2. Some clients, like Snort, support a so-called [Zap Pool](https://snort.social/zap-pool), which allows users to allocate a desired percentage of zaps to favorite infrastructure contributors. As by spinning up a feed you become a relay operator, you may become discoverable on Snort's Zap Pool and start receiving sats with every zap sent by Snort users who enabled this feature.\n\n\u003chttps://nostr.build/p/nb9419.png\u003e\n\n\u003e See the next section for upcoming features which will help you monetize your efforts.\n\nPerspectives\n------------\n\nToday Nostr Band Feeds can be considered a playground for the inquisitive minds. They require some skills and determination to operate and lots of improvements are yet to be implemented. I believe this idea is powerful and will gain traction, pushing Nostr client developers to natively integrate the tools necessary to make the feed runners' workflow silky smooth.\n\nAmong the expected improvements are:\n\n-   Supporting multiple maintainers to run the feed\n\n-   Feed management automation\n\n-   Paid feed subscriptions\n\n... and more\n\nAs you can see, we are still early, which makes everyone who jumps aboard now a first-mover. Embrace the power of Nostr and become the curator to grow your tribe and help everyone around you receive truly valuable content.\n\nBelieve me, Nostr users reward proactive and determined creators like nobody else does. This is why our community is so strong; this is why we are winning! \n\n* * * * *\n\n-   Enjoy memes? Don't forget to add wss://feeds.nostr.band/meme to your relay bundle.¬†\n\n- Want to learn about the best relay set up out there? Have a look at my guide on Nostr relays [here](https://lnshort.it/nostr-relays).","sig":"adea6cd0da46964d5220ef5ff46aebf5e7d92c141f0da9eeb76611037286627ef02635834d652feeef52ba58a33a20c2a9a0fce2edda222fa82e4396f1a56b2a"},"naddr1qqxnzd3cxccrqdfjxv6nywpcqyg8wumn8ghj7mn0wd68ytnhd9hx2q3qy3uh89v5a4vq92t8q0j6su94zhvcdxpywjn3l6hpsr5welarqtrqxpqqqp65w0q3pju":{"kind":30023,"id":"84d0415c8b3b4d9174f02e1d234fe885f29f557c7c6b895f4b9e8bacaa6ae252","pubkey":"2479739594ed5802a96703e5a870b515d986982474a71feae180e8ecffa302c6","created_at":1686005706,"tags":[["d","1686005235288"],["title","Stream to Relayable.org from Your Strfry Relay"],["summary","How to add service to stream your relay events to Relayable.org using strfry relay."],["published_at","1686005706"],["t","strfry"],["t","relay"],["t","howto"],["t","nostr"],["t","relayable"],["t","v4v"]],"content":"\nAdd new service file to `/etc/systemd/system/strfry-relayable.service`\n\nAdd options, change user and paths as needed.\n```\n[Unit]\nDescription=strfry stream up to relayable\n\n[Service]\nUser=strfry\nExecStart=/usr/local/bin/strfry stream wss://relayable.org --dir up\nRestart=on-failure\nRestartSec=5\nProtectHome=yes\nNoNewPrivileges=yes\nProtectSystem=full\nLimitCORE=524288\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEnable it to start automatically on reboot:  \n\n```\nsudo systemctl enable strfry-relayable.service\n```\n\n\nStart service:\n\n```\nsudo systemctl start strfry-relayable\n```\n\n\nCheck Status:\n\n```\nsudo systemctl status strfry-relayable\n```\n\nMirrored at https://write.bz/jascha/stream-to-relayable-org-from-your-strfry-relay","sig":"36a949dd1cefb9bd3d385fe73a19a008a7f9644ab4bfba41ba2991104aa1157a78efacb652994a97b38612661efcaec49b2bf2d190f6db5012d0a1f1ffab0221"},"naddr1qqxnzd3cxgcnsveexqur2d3eqyg8wumn8ghj7mn0wd68ytnhd9hx2q3qnftkhktqglvcsj5n4wetkpzxpy4e5x78wwj9y9p70ar9u5u8wh6qxpqqqp65wun3heg":{"kind":30023,"id":"e5a59d30c4cafd5f4bd1465d37528ccf26f32cc7aa37ef09b693bc88d01c785b","pubkey":"9a576bd96047d9884a93abb2bb0446092b9a1bc773a452143e7f465e538775f4","created_at":1682185083,"tags":[["d","1682183908569"],["title","Where I'm publishing"],["summary","Here's a list of relays I'm currently using"],["published_at","1682184051"],["t","relay"],["t","nostr"],["image","https://nostr.build/i/nostr.build_0c83522611686db911e6f565607eb47adeac4cb4db8e93585d4f8d600f283914.jpg"]],"content":"Relays are where the clients are publishing their events and note. At the beginning it's not very important to find relays but at some point, if you want to connect with a particular community, selecting good relays could be useful. \n\nHere's a list of relays I'm currently using, it may help. Feel free to share yours\n_Note: some relays charge for publishing to them, it's a nice way to help and participate of the costs_\n\n \n* [wss://relay.damus.io/](wss://relay.damus.io/)\n* [wss://nostr-pub.wellorder.net/](wss://nostr-pub.wellorder.net/)\n* [wss://offchain.pub/](wss://offchain.pub/)\n* [wss://nostr.relayer.se/](wss://nostr.relayer.se/)\n* [wss://nostr.sethforprivacy.com/](wss://nostr.sethforprivacy.com/)\n* [wss://nostr.swiss-enigma.ch/](wss://nostr.swiss-enigma.ch/)\n* [wss://relay.nostr.band/](wss://relay.nostr.band/)\n* [wss://nostr.wine/](wss://nostr.wine/)\n* [wss://relay.nostromo.social/](wss://relay.nostromo.social/)\n* ‚Çø [wss://nostr.inosta.cc/](wss://nostr.inosta.cc/) **pay to [nostr.inosta.cc](https://nostr.inosta.cc/invoices)**\n* ‚Çø [wss://eden.nostr.land/](wss://eden.nostr.land/) **pay to [eden.nostr.land](https://eden.nostr.land/invoices)** \n* [wss://relay.nostrgraph.net/](wss://relay.nostrgraph.net/)\n* [wss://nostr.itas.li/](wss://nostr.itas.li/)","sig":"e4b2c57cc2672c83c37bf49a43cc8dd06e52540b58748a30d0f567f3f868f271fb8355332b0d03baaa538f3280e44b30b5ae82f9211a1d7d632ae319cd5a63b6"},"naddr1qqxnzd3cxy6nwwfnx5mrsvfeqyg8wumn8ghj7mn0wd68ytnhd9hx2q3qte0uzs6vj29umjaxlqqct82j8q6ppyefrxq06dhr8d6pvwfatgkqxpqqqp65we3lp2y":{"kind":30023,"id":"543b21db0018717d89de7413d88635762e5d670365c446d823e077dadf61fb3d","pubkey":"5e5fc1434c928bcdcba6f801859d5238341093291980fd36e33b7416393d5a2c","created_at":1728684954,"tags":[["d","1681579356819"],["title","Nostr Relay Management ‚Äì User‚Äôs Responsibility"],["summary","Basic guide to nostr relay management"],["published_at","1681581367"],["t","relay"],["t","nostr"],["t","list"],["t","select"],["t","guide"],["t","basics"],["t","plebchain"],["image","https://nostr.build/i/nostr.build_dde92b83fc7ea975dbdf693bbd04f4ee7f292e9e51f14d1b3013bc5ce5bb31b1.jpg"],["a","30023:d61f3bc5b3eb4400efdae6169a5c17cabf3246b514361de939ce4a1a0da6ef4a:Lightning-fast UI for Nostr"]],"content":"We are now given a choice of digital freedom #nostr .\n\nCreativity for every nostrich is now unleashed from the cage of bigtech censorship , rules and algo. But freedom comes with responsibility so pick right one(s). I will try share here some learning experience both technical and also from fundamental point of view. Just wanted kick start this article n fill as we go like living reference document. \n\nNostr itself is an application layer protocol that can used beyond just social media mirco or long  blogging. Each nostr client heavily dependent on back-end servers call nostr \"Relay servers\" or in short \"rs\" or \"relays\" Relays can hosted anywhere in clearnet internet, onion net , vpn , i2p , nym \nRelays are controlled by their respective admins based NIP specs that they select  to implement according to own decisions.  Relays can have certain ToS (Terms of Service) Rules to adhered too.\n\nNew users can choose and pick client or app (ios / android/ windows) with preset of relays in the simplest form , but other advanced users need to do a regular manual relay management.\n\nRelay management is an active regular task based on where when n how you are using.\n\nRelay list are saved within you npub profile backup file which can edited and broadcast anytime.\n\nRelay management is an active regular task based on where when and how you are using. \n\nRelay list always need to be updated time to time as and when needed.  \n\n2 Users MUST a common RELAY between them even if one only need to follow another.\nOccasionally you may notice certain npub accounts you are following already but cannot see frequent notes publish by them ‚Äì one of cause maybe you not sharing a common relay\n\nMost nostr client applications has SETTINGS where user choose add/remove relays\nAlso user choose which function to enable - READ or WRITE \n\nRelay list for your account  is always saved within you npub profile backup file which can edited and broadcast anytime.  Hence any app or browser when u login with you npub the same relay list will be enforced.  There could valid reasons why u need have list for if you trying to save bandwidth and traveling.\n\nFunctions in  app.getcurrent.io and primal.net app for mobile apple or android are ideal for user traveling abroad and wanted to save bandwidth since relay management is done the providers in backend and saves hassle for basic usage.\n\nRemember if someone is selecting relay on your behalf then you may not be necessarily able to pull and get some specific and special content that you may need.  Such providers like coracle and nostrid also give option to override the default relays they selected.\n\nRelay types:  They can be categorized by various features or policy or technologies.\n\nFREE PUBLIC Relays vs PAID PUBLIC Relays\n\nPAID relays provide unrestricted access / write / filtering options than FREE relays but both are public clearnet relays. Just subscribing to PAID relays will not solve all problems unless you choose the relays properly and enable settings correctly.\n\nPrivate Replay or Tor Relays ‚Äì normally not easily visible until unless someone tell you.\nYou can also host own private relay not opened to internet of archive and back of your own notes.\n\nThe technical landscape in nostr can be fast changing as more NIPs get proposed or updated.\nRelays admin can choose implement certain NIPs or not based on policy or technical limitations.\n\nExample NIP33 defines ‚Äúlong notes‚Äù aka blogs as you now reading this in habla site which #1 UI and site for \"Editable\" long notes ‚Äì some relays donot implement or allow this.\nNIP07 is used for client authentication like nos2x and is implemented by all relays in fact.\nNostr is so fasting changing-hence many links many broken Pushing long note again.\n\nTo be continued again ... reference pics will added later also\nHope this help you understand \"why when what\" to tune and maintain active set of proper relays.\nRelay Proxy, Relay aggregator or Relay multiplexer ‚Äì Paid, Public, Free, Private, Event, Relays \nThat‚Äôs all for now n more later  ... Thank you üôè ! ‚ö°Ô∏è https://getalby.com/p/captjack ‚ö°Ô∏è PV üíú ü§ô\n\nReferences:\nhttps://habla.news/relays\nhttps://relay.exchange/\nhttps://relays.vercel.app/\nhttps://nostr.info/relays/\nhttps://nostrudel.ninja/#/relays\n\nRelated Articles:\nhttps://thebitcoinmanual.com/articles/types-nostr-relays/\nnostr:naddr1qqd5c6t8dp6xu6twvukkvctnwss92jfqvehhygzwdaehguszyrtp7w79k045gq80mtnpdxjuzl9t7vjxk52rv80f888y5xsd5mh55qcyqqq823cf39s98\nhttps://habla.news/u/current@getcurrent.io/1694434022411\n","sig":"ed875a399bb01090fa894168cfa2d41ce63575a104c1c5193f4bad20aa936019f2c78c96c40809df6b5b354c8e90ebcc4a26e5ae054dbf6b439bb695edd4803a"},"naddr1qqxnzd3exyerqv3jxymrxv3cqyg8wumn8ghj7mn0wd68ytnhd9hx2q3qejn774qahqmgjsfajawy7634unk88y26yktvwuzp9kfgdeejx9mqxpqqqp65w8jscep":{"kind":30023,"id":"5de53e74ba6b5c4f0fd1abb54486774768bb7b44dd8cac9396117d71e3969eaa","pubkey":"cca7ef541db83689413d975c4f6a35e4ec73915a2596c770412d9286e7323176","created_at":1691207808,"tags":[["d","1691202216328"],["title","‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Relay"],["summary","‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤ Nostr ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡πá‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏Å‡∏• ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ \"Relay\" ‡∏´‡∏£‡∏∑‡∏≠ \"‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠\" ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ"],["published_at","1691206643"],["t","thainostrich"],["t","relay"],["t","nostr"],["image","https://i.imgur.com/OpkkitO.png"],["a","34550:cca7ef541db83689413d975c4f6a35e4ec73915a2596c770412d9286e7323176:Siamstr"]],"content":"‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Relay ‡πÉ‡∏ô Nostr ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ Nostr ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÜ ‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Nostr ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á\n\n##  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢\n‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤ Nostr ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡πá‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏Å‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô.. ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ **\"Relay\"** ‡∏´‡∏£‡∏∑‡∏≠ **\"‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠\"** ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ\n\n‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á Nostr ‡∏ô‡∏±‡πâ‡∏ô.. Relay ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏£‡∏∑‡∏≠ \"notes\" ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå) ‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡πá‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô.. ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤ Relay ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏¢‡∏£‡∏±‡∏ö‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ\n\nhttps://i.imgur.com/qKEXUWM.png\n\n‡πÅ‡∏ï‡πà Relay ‡πÉ‡∏ô Nostr ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏Ñ‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏ô‡∏±‡πà‡∏ô‡∏Ñ‡∏∑‡∏≠.. ***‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå*** ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô Relay ‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Nostr ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÉ‡∏Ñ‡∏£‡πÑ‡∏î‡πâ\n\n### ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Relay ‡πÉ‡∏ô Nostr ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?\n \n‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏ô‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á \"note\" ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Relay ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì Relay ‡∏à‡∏∞‡∏£‡∏±‡∏ö \"note\" ‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Relay ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡∏à‡∏ô‡∏Å‡∏£‡∏∞‡∏ó‡∏±‡πà‡∏á \"note\" ‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n\n‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤.. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á Relay ‡∏Ñ‡∏∑‡∏≠ ‡∏°‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÉ‡∏ô Nostr ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏ö‡∏ô‡πÇ‡∏•‡∏Å ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô Nostr ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Relay ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á\n\n## **Relay ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?**\nRelay ‡πÉ‡∏ô Nostr ‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå Nostr ‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏ß‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á Relay ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏à‡∏∂‡∏á‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤ Nostr ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡πâ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö Relay ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå Nostr ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤ ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Relay ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏° Relay ‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏ö‡∏≤‡∏á‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û) ‡πÉ‡∏ô‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n## **Relay ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ü‡∏£‡∏µ ‡πÅ‡∏•‡∏∞ Relay ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£**\n‡πÉ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏°‡∏µ Relay ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ü‡∏£‡∏µ‡πÜ ‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Relay (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡∏î‡πå‡∏ß‡∏¥‡∏î‡∏ò‡πå) ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏à‡∏∂‡∏á‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ Relay ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Relay ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏ï‡∏±‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∑‡∏≠ ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏´‡∏•‡∏•‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞ note ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô Relay ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ \"proof of work\" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Relay ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡πÅ‡∏õ‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n\nhttps://i.imgur.com/UE2tiHi.png\n\n\n## **Relay ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°**\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏≠‡∏á Relay ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà Relay Exchange: https://nostr.how/en/relays\n\n\n## **‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á Relay ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô?**\n\n‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á Public relay ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏Ñ‡∏∑‡∏≠ Nostr.watch site: https://nostr.watch/\n\n\n## **‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤ Relay ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô?**\n\n‡∏ñ‡πâ‡∏≤ Relay ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏ï‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏õ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ó‡∏µ‡πà Nostr ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Relay ‡∏´‡∏•‡∏≤‡∏¢‡πÜ ‡∏ï‡∏±‡∏ß‡πÑ‡∏î‡πâ ‚Äì ‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏ô‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πá‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏®‡∏∂‡∏Å‡∏≤‡∏©‡∏≤‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô Relay ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á (Private relay)\n\n\n## **‡πÄ‡∏£‡∏≤‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô Relay ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?**\n\n‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà ‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∏‡πà‡∏á‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏à‡∏≠ ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏û‡∏≠‡∏à‡∏∞‡∏°‡∏µ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Relay ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô Relay ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á \n\n‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà Jakk Gooday ‡∏û‡∏∂‡πà‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ô Public relay ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ü‡∏£‡∏µ‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Nostr ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Æ‡∏≤‡∏£‡πå‡∏î‡∏î‡∏¥‡∏™‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏°‡∏±‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡πÅ‡∏û‡∏™‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≠‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤-‡∏ô‡πâ‡∏≥‡∏≠‡∏≠‡∏Å Public relay ‡πÉ‡∏ô‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡∏´‡∏°‡∏±‡πà‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á Relay ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÜ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Private relay ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÜ ‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß \n\n‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô Relay ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Nostr ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å Andre Neves ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Relay Nostr https://andreneves.xyz/p/set-up-a-nostr-relay-server-in-under\n\nhttps://i.imgur.com/QmrjkYb.png\n‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: https://nostr.how/en/relays","sig":"fff3f37c7bb5d98894f64869f29e47d463e56918d8d3e7a35d6aa97c7197990f651f699bf6ae798017178fe20e42a405f461837fbc3c2d0a0c10b79543409733"},"naddr1qqxnzde3xsensvphxsursd34qyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyzedvux72we8dywqcdqqyfdkts66ymgxpyaucs053l78rcys07w55qcyqqq823ccfhyx5":{"kind":30023,"id":"9ae1e41092b6f376990a6f55a9b3f5437cef8fa456b4babfb7bfdce433025e74","pubkey":"b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","created_at":1740594467,"tags":[["d","1714380748865"],["title","Onion Service Nostr Clients list"],["summary",""],["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1714381522"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["published_at","1714381522"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpvkkwr098vnkj8qvxsqzykm9cddzd5rqjw7vg86gllr3uzg8l822qqxnzde3xsensvphxsursd3422uart"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["p","63fe6318dc58583cfe16810f86dd09e18bfd76aabc24a0081ce2856f330504ed"],["p","877308276be50ce9bafa7e5e374e4fcbf5e9859a21918f34baefd000746b7d35"],["p","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["published_at","1714381522"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["p","266815e0c9210dfa324c6cba3573b14bee49da4209a9456f9484e5106cd408a5"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["published_at","1714381522"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["published_at","1714381522"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["p","d36e8083fa7b36daee646cb8b3f99feaa3d89e5a396508741f003e21ac0b6bec"],["t","relay"],["t","tor"],["t","onion"],["t","nostr"],["image","https://image.nostr.build/da007cd53465ed0ed3d83dcc2d00fe137641d20dfaeeeaf21310594456afc66d.jpg"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["zap","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","","100"],["published_at","1714381522"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"]],"content":"This is a list of nostr clients exposed as onion services. The list is currently actively maintained on [GitHub](https://github.com/0xtrr/onion-service-nostr-clients). Contributions are always appreciated!\n\n| Client name | Onion URL | Source code URL | Admin | Description |\n| --- | --- | --- | --- | --- |\n| Snort | http://agzj5a4be3kgp6yurijk4q7pm2yh4a5nphdg4zozk365yirf7ahuctyd.onion | https://git.v0l.io/Kieran/snort | [operator](nostr:nprofile1qyvhwumn8ghj7un9d3shjtnndehhyapwwdhkx6tpdshszxnhwden5te0wpuhyctdd9jzuenfv96x5ctx9e3k7mf0qqsx8lnrrrw9skpulctgzruxm5y7rzlaw64tcf9qpqww9pt0xvzsfmg9umdvr) | N/A |\n| moStard | http://sifbugd5nwdq77plmidkug4y57zuqwqio3zlyreizrhejhp6bohfwkad.onion/ | https://github.com/rafael-xmr/nostrudel/tree/mostard | [operator](nostr:nprofile1qyv8wumn8ghj7un9d3shjtnddaehgctjvshx7un89uq36amnwvaz7tmzdaehgu3wvf5hgcm0d9h8g7r0ddhjucm0d5hsqgy8wvyzw6l9pn5m47n7tcm5un7t7h5ctx3pjx8nfwh06qq8g6max5zadtyx) | minimalist monero friendly nostrudel fork |\n| Nostrudel | http://oxtrnmb4wsb77rmk64q3jfr55fo33luwmsyaoovicyhzgrulleiojsad.onion/ | https://github.com/hzrd149/nostrudel | [operator](nostrnpub1ktt8phjnkfmfrsxrgqpztdjuxk3x6psf80xyray0l3c7pyrln49qhkyhz0) | Runs latest tagged docker image |\n| Nostrudel Next | http://oxtrnnumsflm7hmvb3xqphed2eqpbrt4seflgmdsjnpgc3ejd6iycuyd.onion/ | https://github.com/hzrd149/nostrudel | [operator](nostr:npub1ktt8phjnkfmfrsxrgqpztdjuxk3x6psf80xyray0l3c7pyrln49qhkyhz0) | Runs latest \"next\" tagged docker image |\n| Nsite | http://q457mvdt5smqj726m4lsqxxdyx7r3v7gufzt46zbkop6mkghpnr7z3qd.onion/ | https://github.com/hzrd149/nsite-ts | [operator](nostr:nprofile1qqszv6q4uryjzr06xfxxew34wwc5hmjfmfpqn229d72gfegsdn2q3fgpz3mhxue69uhhyetvv9ujuerpd46hxtnfduqs6amnwvaz7tmwdaejumr0dsxx2q3a) | Runs nsite. You can read more about nsite [here](https://github.com/lez/nsite). |\n| Shopstr | http://6fkdn756yryd5wurkq7ifnexupnfwj6sotbtby2xhj5baythl4cyf2id.onion/ | https://github.com/shopstr-eng/shopstr-hidden-service | [operator](nostr:nprofile1qqsdxm5qs0a8kdk6aejxew9nlx074g7cnedrjeggws0sq03p4s9khmqpz9mhxue69uhkummnw3ezuamfdejj7qgwwaehxw309ahx7uewd3hkctcpzemhxue69uhksctkv4hzucmpd3mxztnyv4mz747p6g5) | Runs the latest `serverless` branch build of Shopstr.   |\n","sig":"73b60720a775e7a39488e96bced1e5f8b85a20bc26e68b9f1dc7827c0588de261e18f45b80acee03dc8334d0e5cbca324fa51c939d723e16e3e633b7476dfc50"},"naddr1qqxnzde3xserjdfjxvurjvp4qyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyzedvux72we8dywqcdqqyfdkts66ymgxpyaucs053l78rcys07w55qcyqqq823cugklap":{"kind":30023,"id":"d519178b1a2b55ee0d82a1173457353a1e99e694763adaa4a22d196b8cc90f8f","pubkey":"b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a","created_at":1740760778,"tags":[["d","1714295238905"],["title","Onion Service Nostr Relay list"],["summary","A list of nostr relays exposed as Onion services."],["published_at","1714297665"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpvkkwr098vnkj8qvxsqzykm9cddzd5rqjw7vg86gllr3uzg8l822qqxnzde3xserjdfjxvurjvp497akz0"],["p","b2d670de53b27691c0c3400225b65c35a26d06093bcc41f48ffc71e0907f9d4a"],["p","63fe6318dc58583cfe16810f86dd09e18bfd76aabc24a0081ce2856f330504ed"],["p","72f9755501e1a4464f7277d86120f67e7f7ec3a84ef6813cc7606bf5e0870ff3"],["p","52b4a076bcbbbdc3a1aefa3735816cf74993b1b8db202b01c883c58be7fad8bd"],["p","ece3317bf8163930b5dafae50596b740b0608433b78568886a9a712a91a5d59b"],["p","0e29efc2a3eb6966403e8c61cb8bea6d78527af5e0565a2baa0f313eff142af2"],["p","44dc1c2db9c3fbd7bee9257eceb52be3cf8c40baf7b63f46e56b58a131c74f0b"],["p","4918eb332a41b71ba9a74b1dc64276cfff592e55107b93baae38af3520e55975"],["published_at","1714297665"],["p","58b295a1a5f7b8e7d507777acbcbf7691a0b39c768da2695220a89a6da85ca67"],["published_at","1714297665"],["published_at","1714297665"],["p","b12b632c887f0c871d140d37bcb6e7c1e1a80264d0b7de8255aa1951d9e1ff79"],["published_at","1714297665"],["p","2b67e480b7f99d2835684a8f7276d86edbe8e318ea55cf77ccfd559c5f24f645"],["published_at","1714297665"],["published_at","1714297665"],["p","2cbc2ba5724ca790d4ddf08d7cb218bd80d6676510d5a682bb25f9a6e9418a01"],["published_at","1714297665"],["p","3ffac3a6c859eaaa8cdddb2c7002a6e10b33efeb92d025b14ead6f8a2d656657"],["p","4503baa127bdfd0b054384dc5ba82cb0e2a8367cbdb0629179f00db1a34caacc"],["published_at","1714297665"],["p","33c74427f3b2b73d5e38f3e6c991c122a55d204072356f71da49a0e209fb6940"],["published_at","1714297665"],["p","0e8c41eb946657188ea6f2aac36c25e393fff4d4149a83679220d66595ff0faa"],["t","relay"],["t","tor"],["t","onion"],["t","nostr"],["image","https://blossom.oxtr.dev/2e17f11cac57626d452375245c856e640caddc720580240335bd41bef3ec0c78.jpeg"],["published_at","1714297665"],["p","94a6a78a5aebbba40bd1aaa2234810132c2d8004bb9177616c413d3c0ddf320e"]],"content":"# onion-service-nostr-relays\nA list of nostr relays exposed as onion services.\n\n## The list\n\n| Relay name | Description | Onion url | Operator | Payment URL | Payment options |\n| --- | --- | --- | --- | --- | --- |\n| nostr.oxtr.dev | Same relay as clearnet relay nostr.oxtr.dev | ws://oxtrdevav64z64yb7x6rjg4ntzqjhedm5b5zjqulugknhzr46ny2qbad.onion | [operator](nostr:nprofile1qqst94nsmefmya53crp5qq39kewrtgndqcynhnzp7j8lcu0qjple6jspz3mhxue69uhkummnw3ezummcw3ezuer9wcq3gamnwvaz7tmjv4kxz7fwv3sk6atn9e5k7jxrgyy) | N/A | N/A |\n| relay.snort.social | Same relay as clearnet relay relay.snort.social | wss://skzzn6cimfdv5e2phjc4yr5v7ikbxtn5f7dkwn5c7v47tduzlbosqmqd.onion | [operator](nostr:nprofile1qqsx8lnrrrw9skpulctgzruxm5y7rzlaw64tcf9qpqww9pt0xvzsfmgpzpmhxue69uhkummnw3ezuamfdejszxrhwden5te0wfjkccte9eekummjwsh8xmmrd9skct9tyup) | N/A | N/A |\n| nostr.thesamecat.io | Same relay as clearnet relay nostr.thesamecat.io | ws://2jsnlhfnelig5acq6iacydmzdbdmg7xwunm4xl6qwbvzacw4lwrjmlyd.onion | [operator](nostr:npub1wtuh24gpuxjyvnmjwlvxzg8k0elhasagfmmgz0x8vp4ltcy8ples54e7js) | N/A | N/A |\n| nostr.land | The nostr.land paid relay (same as clearnet) | ws://nostrland2gdw7g3y77ctftovvil76vquipymo7tsctlxpiwknevzfid.onion | [operator](nostr:npub12262qa4uhw7u8gdwlgmntqtv7aye8vdcmvszkqwgs0zchel6mz7s6cgrkj) | [Payment URL](http://nostrland2gdw7g3y77ctftovvil76vquipymo7tsctlxpiwknevzfid.onion) | BTC LN |\n| bitcoiner.social | No auth required, currently | ws://bitcoinr6de5lkvx4tpwdmzrdfdpla5sya2afwpcabjup2xpi5dulbad.onion | [operator](nostr:npub1an3nz7lczcunpdw6ltjst94hgzcxpppnk7zk3zr2nfcj4yd96kdse6twjd) | N/A | N/A |\n| relay.westernbtc.com | The westernbtc.com paid relay | ws://westbtcebhgi4ilxxziefho6bqu5lqwa5ncfjefnfebbhx2cwqx5knyd.onion | [operator](nostr:npub1pc57ls4rad5kvsp733suhzl2d4u9y7h4upt952a2pucnalc59teq33dmza) | [Payment URL](hjar34h5zwgtvxr345q7rncso3dhdaryuxgri3lu7lbhmnzvin72z5ad.onion) | BTC LN |\n| freelay.sovbit.host | Free relay for sovbit.host | ws://sovbitm2enxfr5ot6qscwy5ermdffbqscy66wirkbsigvcshumyzbbqd.onion | [operator](nostr:npub1gnwpctdec0aa00hfy4lvadftu08ccs9677mr73h9ddv2zvw8fu9smmerrq) | N/A | N/A |\n| nostr.sovbit.host | Paid relay for sovbit.host | ws://sovbitgz5uqyh7jwcsudq4sspxlj4kbnurvd3xarkkx2use3k6rlibqd.onion | [operator](nostr:npub1gnwpctdec0aa00hfy4lvadftu08ccs9677mr73h9ddv2zvw8fu9smmerrq) | N/A | N/A |\n| nostr.wine | üç∑ [nostr.wine](https://nostr.wine) relay | ws://nostrwinemdptvqukjttinajfeedhf46hfd5bz2aj2q5uwp7zros3nad.onion | [operator](nostr:npub1fyvwkve2gxm3h2d8fvwuvsnkell4jtj4zpae8w4w8zhn2g89t96s0tsfuk) | [Payment URL](http://nostrwinemdptvqukjttinajfeedhf46hfd5bz2aj2q5uwp7zros3nad.onion) | BTC LN, BTC, Credit Card/CashApp (Stripe) |\n| inbox.nostr.wine | üç∑ [inbox.nostr.wine](https://inbox.nostr.wine) relay | ws://wineinboxkayswlofkugkjwhoyi744qvlzdxlmdvwe7cei2xxy4gc6ad.onion | [operator](nostr:npub1fyvwkve2gxm3h2d8fvwuvsnkell4jtj4zpae8w4w8zhn2g89t96s0tsfuk) | [Payment URL](http://wineinboxkayswlofkugkjwhoyi744qvlzdxlmdvwe7cei2xxy4gc6ad.onion) | BTC LN, BTC |\n| filter.nostr.wine | üç∑ [filter.nostr.wine](https://filter.nostr.wine) proxy relay | ws://winefiltermhqixxzmnzxhrmaufpnfq3rmjcl6ei45iy4aidrngpsyid.onion | [operator](nostr:npub1fyvwkve2gxm3h2d8fvwuvsnkell4jtj4zpae8w4w8zhn2g89t96s0tsfuk) | [Payment URL](http://nostrwinemdptvqukjttinajfeedhf46hfd5bz2aj2q5uwp7zros3nad.onion/add-time) | BTC LN, BTC |\n| N/A | N/A | ws://pzfw4uteha62iwkzm3lycabk4pbtcr67cg5ymp5i3xwrpt3t24m6tzad.onion:81 | [operator](nostr:nprofile1q9z8wue69uhky6t5vdhkjmnjxejx2dtvddm8sdr5wpmkgmt6wfjxversd3sn2umevyexzenhwp3kzcn2w4cry7rsdy6kgatvvfskgtn0de5k7m30q9z8wue69uhk77r5wfjx2anpwcmrg73kx3ukydmcxeex5ee5de685ut2dpjkgmf4vg6h56n3w4k82emtde585u35xeh8jvn3vfskgtn0de5k7m30qqs93v545xjl0w8865rhw7kte0mkjxst88rk3k3xj53q4zdxm2zu5ectdn2z6) | N/A | N/A |\n| nostr.fractalized.net | Free relay for fractalized.net | ws://xvgox2zzo7cfxcjrd2llrkthvjs5t7efoalu34s6lmkqhvzvrms6ipyd.onion | [operator](nostr:npub1ky4kxtyg0uxgw8g5p5mmedh8c8s6sqny6zmaaqj44gv4rk0plaus3m4fd2) | N/A | N/A |\n| nfrelay.app | [nfrelay.app](https://nfrelay.app) aggregator relay (nostr-filter-relay) | ws://nfrelay6saohkmipikquvrn6d64dzxivhmcdcj4d5i7wxis47xwsriyd.onion | [operator](nostr:npub19dn7fq9hlxwjsdtgf28hyakcdmd73cccaf2u7a7vl42echey7ezs2hwja7) | N/A | N/A\n| relay.nostr.net | Public relay from nostr.net (Same as clearnet) | ws://nostrnetl6yd5whkldj3vqsxyyaq3tkuspy23a3qgx7cdepb4564qgqd.onion | [operator](https://nostr.at/aljaz@nostr.si) | N/A | N/A |\n| nerostrator | Free to read, pay XMR to relay | ws://nerostrrgb5fhj6dnzhjbgmnkpy2berdlczh6tuh2jsqrjok3j4zoxid.onion | [operator](nostr:npub19j7zhftjfjnep4xa7zxhevschkqdvem9zr26dq4myhu6d62p3gqs3htnca) |[Payment URL](http://nerostrrgb5fhj6dnzhjbgmnkpy2berdlczh6tuh2jsqrjok3j4zoxid.onion) | XMR¬†|\n| nostr.girino.org | Public relay from nostr.girino.org | ws://gnostr2jnapk72mnagq3cuykfon73temzp77hcbncn4silgt77boruid.onion | [operator](nostr:npub18lav8fkgt8424rxamvk8qq4xuy9n8mltjtgztv2w44hc5tt9vets0hcfsz) | N/A | N/A |\n| wot.girino.org | WoT relay from wot.girino.org | ws://girwot2koy3kvj6fk7oseoqazp5vwbeawocb3m27jcqtah65f2fkl3yd.onion | [operator](nostr:npub18lav8fkgt8424rxamvk8qq4xuy9n8mltjtgztv2w44hc5tt9vets0hcfsz) | N/A | N/A |\n| haven.girino.org/{outbox, inbox, chat, private} | Haven smart relay from haven.girino.org | ws://ghaven2hi3qn2riitw7ymaztdpztrvmm337e2pgkacfh3rnscaoxjoad.onion/{outbox, inbox, chat, private} | [operator](nostr:npub18lav8fkgt8424rxamvk8qq4xuy9n8mltjtgztv2w44hc5tt9vets0hcfsz) | N/A | N/A |\n| relay.nostpy.lol | Free Web of Trust relay (Same as clearnet) | ws://pemgkkqjqjde7y2emc2hpxocexugbixp42o4zymznil6zfegx5nfp4id.onion | [operator](nostr:nprofile1qy08wumn8ghj7mn0wd68yttsw43zuam9d3kx7unyv4ezumn9wshszxrhwden5te0dehhxarj9enx6apwwa5h5tnzd9az7qpqg5pm4gf8hh7skp2rsnw9h2pvkr32sdnuhkcx9yte7qxmrg6v4txqr5amve) |N/A | N/A |\n| Poster.place Nostr Relay | N/A | ws://dmw5wbawyovz7fcahvguwkw4sknsqsalffwctioeoqkvvy7ygjbcuoad.onion | [operator](nostr:nprofile1qqsr836yylem9deatcu08ekfj8qj9f2aypq8ydt0w8dyng8zp8akjsqpz3mhxue69uhhyetvv9ujuerpd46hxtnfduqs6amnwvaz7tmwdaejumr0ds6xxx6y) | N/A | N/A¬†|\n| Azzamo Relay        | [Azzamo](https://azzamo.net/relays/) Premium Nostr relay. (paid)    | ws://q6a7m5qkyonzb5fk5yv4jyu3ar44hqedn7wjopg737lit2ckkhx2nyid.onion | [operator](nostr:npub1jjn20zj6awa6gz73423zxjqszvkzmqqyhwghwctvgy7ncrwlxg8qdavknm) | [Payment URL](https://azzamo.net/pay) | BTC LN |\n| Azzamo Inbox Relay  | [Azzamo](https://azzamo.net/inbox-relay/) Group and Private message relay. (Freemium) | ws://gp5kiwqfw7t2fwb3rfts2aekoph4x7pj5pv65re2y6hzaujsxewanbqd.onion | [operator](nostr:npub1jjn20zj6awa6gz73423zxjqszvkzmqqyhwghwctvgy7ncrwlxg8qdavknm) | [Payment URL](https://azzamo.net/pay) | BTC LN |\n| Noderunners Relay | The official [Noderunners](https://noderunners.network) Nostr Relay. | ws://35vr3xigzjv2xyzfyif6o2gksmkioppy4rmwag7d4bqmwuccs2u4jaid.onion | [operator](nostr:nprofile1qqsqarzpaw2xv4cc36n092krdsj78yll7n2pfx5rv7fzp4n9jhlsl2spz3mhxue69uhhwmm59esh57npd4hjumn9wsq3gamnwvaz7tmjv4kxz7fwv3sk6atn9e5k7tqd6ns) | [Payment URL](https://noderunners.azzamo.net) | BTC LN |\n\n\n## Contributing\n\nContributions are encouraged to keep this document alive. Just open a PR and I'll have it tested and merged. The onion URL is the only mandatory column, the rest is just nice-to-have metadata about the relay. Put `N/A` in empty columns.\n\nIf you want to contribute anonymously, please contact me on [SimpleX](https://simplex.chat/contact#/?v=2\u0026smp=smp%3A%2F%2F0YuTwO05YJWS8rkjn9eLJDjQhFKvIYd8d4xG8X1blIU%3D%40smp8.simplex.im%2FZ_4q0Nv91wCk8Uekyiaas7NSr-nEDir7%23%2F%3Fv%3D1-2%26dh%3DMCowBQYDK2VuAyEAvdSLn5QEwrfKQswQGTzlwtXeLMXbzxErv-zOJU6D0y8%253D%26srv%3Dbeccx4yfxxbvyhqypaavemqurytl6hozr47wfc7uuecacjqdvwpw2xid.onion) or send a DM on nostr using a disposable npub. \n\n### Operator column\nIt is generally preferred to use something that includes a NIP-19 string, either just the string or a url that contains the NIP-19 string in it (e.g. an njump url).\n","sig":"4bfe109b6f8b8cff53948ba8211df6f778a5f44c81d3e49cf3ec31cdeceadb68642cb9b6a80e842d09e0a990a32e1b419e6be58c6db28070da7d9f81d32375a3"},"naddr1qqxnzde5xg6nvdfjxucrswfhqyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzypr0e03svh40rtncz9r9jf8y3y3nv0ln75nt6mmn6lqcfvttmr8y6qcyqqq823chv7pjq":{"kind":30023,"id":"8f3837252f44c0a0ff1b4dc697e175fb65cf30c923de362a255c9887611118cf","pubkey":"46fcbe3065eaf1ae7811465924e48923363ff3f526bd6f73d7c184b16bd8ce4d","created_at":1742565431,"tags":[["d","1742565270897"],["title","PPQ Deep Research Report: The Nostr Ecosystem and Future Disruptions"],["summary",""],["t","LLM"],["t","AI"],["t","nostr"],["published_at","1742565426"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzq3huhccxt6h34eupz3jeynjgjgek8lel2f4adaea0svyk94a3njdqqxnzde5xg6nvdfjxucrswfhpzaey0"],["t","introduction"],["t","overview"],["t","use"],["t","user"],["t","network"],["t","challenges"],["t","replication"],["t","relay"],["t","disruption"],["t","twitter"],["t","decentralized"],["t","future"],["t","protocol"],["t","forecasting"],["t","networking"],["t","conclusions"]],"content":"## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Overview of the Nostr Ecosystem](#overview)\n3. [Current Use Cases and Quantitative Metrics](#use-cases)\n   - [User Adoption Metrics](#user-adoption)\n   - [Network Resilience and Decentralization](#network-resilience)\n4. [Operational Challenges and Scalability](#challenges)\n   - [Replication Overhead and Bandwidth Issues](#replication-overhead)\n   - [Relay Downtime and Financial Sustainability](#relay-downtime)\n5. [Market Disruption and Sentiment](#disruption)\n   - [Disrupting Twitter and Centralized Social Platforms](#twitter-disruption)\n   - [Impact on Decentralized Social Media and Censorship Resistance](#decentralized-social-media)\n6. [Future Trends and 5-Year Outlook](#future-outlook)\n   - [Innovative Protocol Developments](#protocol-innovations)\n   - [Quantitative Forecasting and Diffusion Modeling](#forecasting)\n   - [Networking and Integration with Emerging Technologies](#networking-integration)\n7. [Conclusions and Strategic Recommendations](#conclusions)\n\n---\n\n## 1. Introduction \u003ca name=\"introduction\"\u003e\u003c/a\u003e\n\nThe Nostr ecosystem has emerged as a powerful decentralized alternative to traditional social media networks, particularly as a potential disruptor of Twitter and other centralized‚Äîand even existing decentralized‚Äîsocial media platforms. Developed using a protocol based on cryptographic key pairs and a multi-relay system, Nostr is unique in its provision of censorship resistance and user sovereignty. In this report, we provide a detailed analysis of the current state, scalability challenges, and market disruption potential of Nostr, followed by speculative insights on its trajectory over the next five years.\n\n---\n\n## 2. Overview of the Nostr Ecosystem \u003ca name=\"overview\"\u003e\u003c/a\u003e\n\nLaunched in 2022, Nostr (Notes and Other Stuff Transmitted by Relays) has rapidly gained traction as an open and decentralized social network. Some of the core features include:\n\n- **Decentralized Communication:** Relying on independent relays across multiple countries and autonomous systems, Nostr offers an architecture that ensures posts are not stored on a single centralized server.\n- **Censorship Resistance:** With cryptographic authentication and a decentralized relay structure, content censorship becomes significantly more difficult than in traditional networks.\n- **User Sovereignty:** Empowering users with cryptographic key pairs allows for enhanced privacy and data ownership.\n- **Wide Geographic Distribution:** The ecosystem spreads over 44 countries and 151 autonomous systems, underscoring its global reach.\n\nNotable endorsements from figures such as Jack Dorsey, Edward Snowden, Vitalik Buterin, and Sen. Cynthia Lummis have bolstered its reputation as an experimental yet promising alternative to centralized social platforms.\n\n---\n\n## 3. Current Use Cases and Quantitative Metrics \u003ca name=\"use-cases\"\u003e\u003c/a\u003e\n\n### User Adoption Metrics \u003ca name=\"user-adoption\"\u003e\u003c/a\u003e\n\n- **User Base:** In just two years, the Nostr network has attracted over 4 million users, a significant figure given its nascent stage and decentralized nature.\n- **Content Generation:** With over 60 million posts, the volume of content mirrors the rapid adoption and active usage seen in more centralized models.\n- **Post Replication:** Empirical measurements indicate that there are 17.8 million text notes among these posts, replicated on an average of 34.6 relays per post. This level of replication underlines robust resilience and availability even if significant portions of the network experience downtime.\n\n### Network Resilience and Decentralization \u003ca name=\"network-resilience\"\u003e\u003c/a\u003e\n\n- **Global Distribution:** Nostr‚Äôs decentralized network ensures high availability with \u003e90% post accessibility even under simulated network failures (e.g., removal of key relays or autonomous systems).\n- **Robustness:** The dispersion across 712 relays illustrates that decentralization is not only a design choice but also a working reality, which contributes to the network‚Äôs reliability.\n\n---\n\n## 4. Operational Challenges and Scalability \u003ca name=\"challenges\"\u003e\u003c/a\u003e\n\nWhile the Nostr ecosystem demonstrates significant promise, it faces noteworthy operational challenges.\n\n### Replication Overhead and Bandwidth Issues \u003ca name=\"replication-overhead\"\u003e\u003c/a\u003e\n\n- **Excessive Redundancy:** Detailed studies have shown that nearly 98.2% of retrieval traffic is redundant. In practice, this equates to an estimated 144 TiB of unnecessary bandwidth consumption.\n- **Optimization Proposals:** To mitigate these inefficiencies, there's a proposal to limit post replications from 34.6 relays to between 10 and 20 relays per post. This could reduce redundant data copies by between 380 million to 480 million instances, potentially lowering operational costs and improving bandwidth utilization.\n- **Scaling Concerns:** With a projected network load of 10 million events per day (or approximately 2 TB annually), the throughput requirement of ~115 TPS is putting a strain on the current architecture. This has led to debates on whether solutions like the current outbox mechanism are sufficient or if further fundamental redesigns and emergent moderation systems are needed.\n\n### Relay Downtime and Financial Sustainability \u003ca name=\"relay-downtime\"\u003e\u003c/a\u003e\n\n- **Relay Stability:** Data indicates roughly 20% of relays suffer from significant downtime (exceeding 40% operational time), and 132 relays have been classified as 'dead'. This is a concern for maintaining network integrity.\n- **Economic Model Challenges:** With 95% of free-to-use relays unable to cover operational costs due to minimal zap-based income, there is an urgent need for innovative monetization or community funding models to ensure long-term sustainability.\n\n---\n\n## 5. Market Disruption and Sentiment \u003ca name=\"disruption\"\u003e\u003c/a\u003e\n\nNostr is positioned as both a disruptor to traditional centralized social platforms‚Äîmost notably Twitter‚Äîand a catalyst for change within decentralized social media.\n\n### Disrupting Twitter and Centralized Platforms \u003ca name=\"twitter-disruption\"\u003e\u003c/a\u003e\n\n- **User Shift:** While Twitter remains the most well-known platform, the high-profile endorsements and robust user base of Nostr indicate that there is both market intrigue and a gradual shift among early adopters. Disruption here is measured not only in user numbers but also in the paradigm shift towards decentralized content distribution.\n- **Market Penetration:** Current metrics (4 million users, 60 million posts) suggest that Nostr is challenging Twitter's centralized model insofar as it appeals to users prioritizing censorship resistance, data sovereignty, and resiliency against centralized failures. However, mainstream adoption on par with Twitter is still not realized, and there remains a gap in user experience and feature richness.\n\n### Impact on Decentralized Social Media and Censorship Resistance \u003ca name=\"decentralized-social-media\"\u003e\u003c/a\u003e\n\n- **Complementary Integrations:** As decentralized social media ecosystems continue to mature, integration between Nostr and other censorship-resistant platforms is increasingly likely. This can include interoperability protocols, shared identity management systems, and cross-platform content replication.\n- **Comparative Advantage:** Nostr's network design offers unique advantages over other decentralized social media, particularly in its straightforward, relay-based communication protocol. This positions Nostr to potentially serve as an underpinning technology for a broader decoherent ecosystem of social networks.\n- **Sentiment Toward Scalability Innovations:** Discussions around scaling Nostr often focus on the balance between ensuring redundancy (for resilience) and reducing overhead (for efficiency). The sentiment is one of cautious optimism: while outbox solutions offer a stopgap, many experts advocate for more fundamental architectural redesigns in the long-term.\n\n---\n\n## 6. Future Trends and 5-Year Outlook \u003ca name=\"future-outlook\"\u003e\u003c/a\u003e\n\nLooking forward, the evolution of Nostr will likely be shaped by several interrelated trends and emerging technical innovations.\n\n### Innovative Protocol Developments \u003ca name=\"protocol-innovations\"\u003e\u003c/a\u003e\n\n- **Decentralized Identity and Reputation Mechanisms:** The next phase may see the introduction of distributed reputation systems and rating mechanisms that aid in spam management and improve trustworthiness without compromising decentralization.\n- **Optimistic Replication and Selective Mirroring:** Innovations such as selective content mirroring and event pruning will be key in managing bandwidth and storage demands while remaining true to the decentralized philosophy.\n\n### Quantitative Forecasting and Diffusion Modeling \u003ca name=\"forecasting\"\u003e\u003c/a\u003e\n\n- **Forecast Models:** By integrating modified Bass diffusion models and learning curve effects, predictions suggest that Nostr can potentially spur significant market disruption within five years. Recent studies indicate that forecasting models in disruptive technology fields have reached accuracies of up to 82% for demand projections.\n- **Hybrid Quantitative Techniques:** Leveraging methods like LDA2Vec and patent citation network analysis, combined with multi-criteria decision-making models (as seen in extended UTAUT approaches), will be crucial for accurately estimating future adoption and cost efficiencies.\n- **Metrics to Monitor:** Future research should focus on user growth rates, relay uptime percentages, cost reductions achieved through replication optimizations, and overall sentiment analysis using advanced deep learning architectures that overcome traditional pitfalls (e.g., sarcasm and multipolarity in text data).\n\n### Networking and Integration with Emerging Technologies \u003ca name=\"networking-integration\"\u003e\u003c/a\u003e\n\n- **Integration with Other Decentralized Platforms:** One promising avenue is exploring cross-platform interoperability with other decentralized and blockchain-based social networks, which could lead to a more cohesive ecosystem. This would not only enhance user experience but also enable shared security and moderation frameworks.\n- **Next-Generation Relays:** The deployment of relays that are more resilient through redundancy optimization and financial sustainability models (perhaps incorporating micro-transaction revenue models or community-driven funding) is another critical area. Such improvements could mitigate the issues of relay downtime and excessive network overhead.\n- **Contrarian Approaches:** A contrarian perspective suggests that instead of building on current frameworks, a radical overhaul of the network architecture might be considered, potentially by leveraging novel distributed ledger technologies or leveraging a hybrid centralized-decentralized model during the transition phase to ensure smoother scaling.\n\n---\n\n## 7. Conclusions and Strategic Recommendations \u003ca name=\"conclusions\"\u003e\u003c/a\u003e\n\nThe Nostr ecosystem represents a significant stride toward decentralized, censorship-resistant social media. While its current market adoption and technical design offer a robust alternative to centralized platforms like Twitter, several challenges must be addressed for sustained growth and disruption:\n\n1. **Optimization of Data Replication:** Reducing redundant data transfers without compromising resilience is essential. Limiting the replication factor and exploring optimistic retrieval mechanisms could provide a balance between availability and efficiency.\n\n2. **Relay Stability and Sustainability:** With nearly 20% of relays experiencing significant downtime, innovative financial and technical models (such as micro-payments and community funding) should be deployed to enhance the operational reliability of network nodes.\n\n3. **Enhanced Moderation and Reputation Systems:** Emerging strategies for decentralized content moderation and reputation management could reduce spam and improve content quality while preserving the open nature of the network.\n\n4. **Interoperability with Other Decentralized Platforms:** Fostering integration with other emerging systems could accelerate market disruption across the broader spectrum of social media.\n\n5. **Future-Proofing Through Quantitative Forecasting:** Continual adoption of cutting-edge forecasting models and machine learning techniques to measure sentiment and track network metrics is imperative for proactive evolution.\n\n6. **Exploring Contrarian Innovations:** In addition to incremental changes, it is important not to discount radically new architectures that may emerge from ongoing research in distributed systems and blockchain technologies.\n\n### Final Outlook\n\nIn the coming five years, Nostr has the potential to disrupt not only Twitter but also the broader landscape of both centralized and decentralized social media. Although the current architecture presents significant scaling challenges, proactive investments in replication optimization, relay stability, and cross-platform integration will likely propel the network into a more mature phase of adoption. The ecosystem will benefit from a dual approach that combines both evolutionary improvements and revolutionary changes, ensuring that it remains robust while meeting the demands of a growing, globally distributed user base.\n\n---\n\n## Appendices\n\n### Appendix A: Data and Metrics Summary\n\n- **User Base:** ~4 million\n- **Post Volume:** \u003e60 million posts\n- **Average Relay Replication:** ~34.6 replicas per post\n- **Geographical Distribution:** 44 countries, 151 autonomous systems\n- **Bandwidth Waste:** ~144 TiB due to redundancy\n- **Network Load:** 10 million events/day (~2TB/year)\n- **Throughput Requirement:** ~115 TPS\n\n### Appendix B: Key Technical Proposals\n\n- **Replication Control:** Limit copies to 10‚Äì20 relays for optimal efficiency.\n- **Selective Mirroring:** Implement event pruning and selective content mirroring.\n- **Decentralized Reputation Systems:** Develop distributed rating mechanisms to enhance distributed moderation.\n\n### Appendix C: Forecasting and Quantitative Methods\n\n- **Diffusion Modeling:** Modified Bass models with multi-market dynamics.\n- **Hybrid Quantitative Techniques:** Integration of machine learning (CNN-LSTM, LDA2Vec) with multi‚Äêcriteria decision models.\n\n---\n\n## Recommendations for Further Research\n\n- Investigate the comparative performance of alternative replication strategies in decentralized networks.\n- Explore funding models that can sustain relay operations without compromising neutrality or decentralization.\n- Conduct long-term sentiment analysis using advanced neural architectures to understand evolving user attitudes.\n- Evaluate the prospective benefits of radical design overhauls versus incremental enhancements in ensuring network scalability.\n\n---\n\n*This report is intended for expert analysts and researchers in decentralized network systems and social media disruption. It synthesizes current empirical findings with speculative insights to inform future strategies and academic inquiry.*\n\n\n## Sources\n\n- https://www.voltage.cloud/blog/exploring-6-use-cases-of-nostr-beyond-messaging\n- https://arxiv.org/abs/2402.05709\n- https://arxiv.org/html/2402.05709v1\n- https://papers.ssrn.com/sol3/Delivery.cfm/5146515.pdf?abstractid=5146515\u0026mirid=1\n- https://matchnode.com/blog-and-podcasts/mastering-paid-social-media-advertising-a-comprehensive-guide/\n- https://blockworks.co/news/jack-dorsey-app-to-disrupt-twitter\n- https://www.securities.io/nostr-a-better-twitter/\n- https://medium.com/@jasminedevv/battle-of-the-decentralized-twitter-alternatives-c9f51114614a\n- https://www.murrayrudd.pro/nostrs-relay-revolution-scaling-decentralized-networks-for-growth/\n- https://github.com/nostr-protocol/nips/issues/75\n- https://news.ycombinator.com/item?id=42758579\n- https://www.toptal.com/deep-learning/4-sentiment-analysis-accuracy-traps\n- https://www.researchgate.net/publication/3076742_Forecasting_the_Market_Diffusion_of_Disruptive_and_Discontinuous_Innovation\n- https://www.globenewswire.com/news-release/2025/03/17/3043701/0/en/United-States-Online-Household-Furniture-Market-Report-2025-2029-Analysis-of-Price-Sensitivity-Lifecycle-Customer-Purchase-Basket-Adoption-Rates-and-Purchase-Criteria.html\n- https://northeast.newschannelnebraska.com/story/52583550/laser-welding-market-growth-industrial-adoption-rate\n- https://www.sciencedirect.com/science/article/am/pii/S2405896323014453\n- https://www.marketsandmarkets.com/Market-Reports/industry-5-market-35376359.html","sig":"a60933e1da8adf0652766839903f8dd81d63c1194dbb9e4af7c2048daa947916d6ba4ff04717b47185b31e9abeac8abcebfc597e620c95e987959924496872f6"},"naddr1qqxnzde5xg6rqdpnx56rqv34qyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyqt0rgqsp4x0l77vggcw3c8y9yxvtpyurtwxf4n98ldq0sp3kyr5kqcyqqq823c5laj2t":{"kind":30023,"id":"8e1ae2d5eabf60e04b5ec69bc7586319059c2ded90d728d42dc48e27a9adfbb3","pubkey":"16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b","created_at":1742481145,"tags":[["d","1742404354025"],["title","How to run your own grain üåæ nostr relay"],["summary","This article will serve as the official guide for running a grain nostr relay. This article will be continually updated to reflect any changes in the software."],["published_at","1742415132"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzq9h35qgq6n8ll0xyyv8gurjzjrx9sjwp4hry6ejnlks8cqcmzp6tqqxnzde5xg6rqdpnx56rqv34uyz5g4"],["published_at","1742415132"],["t","guide"],["t","relay"],["t","nostr"],["t","howto"],["t","introduction"],["t","prerequisites"],["t","download"],["t","installation"],["t","run"],["t","congrats"],["t","configuration"],["t","configyml"],["t","1"],["t","2"],["t","3"],["t","4"],["t","5"],["t","6"],["t","7"],["t","8"],["t","9"],["t","whitelistyml"],["t","blacklistyml"],["t","running"],["t","windows"],["t","linux"],["t","more"],["t","replace"],["image","https://happytavern.co/.pictures/thumbs/how-to/grain.png"],["published_at","1742415132"],["a","30023:16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b:1742478448266","","mention"],["p","16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b"]],"content":"grain is a nostr relay built using Go, currently utilizing MongoDB as its database. Binaries are provided for AMD64 Windows and Linux. grain is Go Relay Architecture for Implementing Nostr\n\n# Introduction\n\ngrain is a nostr relay built using Go, currently utilizing MongoDB as its database. Binaries are provided for AMD64 Windows and Linux. grain is Go Relay Architecture for Implementing Nostr\n\n# Prerequisites\n\n* Grain requires a running MongoDB instance. Please refer to this separate guide for instructions on setting up MongoDB: nostr:naddr1qvzqqqr4gupzq9h35qgq6n8ll0xyyv8gurjzjrx9sjwp4hry6ejnlks8cqcmzp6tqqxnzde5xg6rwwp5xsuryd3knfdr7g\n\n# Download Grain\n\nDownload the latest release for your system from the [GitHub releases page](https://github.com/0ceanSlim/grain/releases)\n\n*amd64 binaries provided for Windows and Linux, if you have a different CPU architecture, you can download and install go to build grain from source*\n\n# Installation and Execution\n\n* Create a new folder on your system where you want to run Grain.\n* The downloaded binary comes bundled with a ZIP file containing a folder named \"app,\" which holds the frontend HTML files. Unzip the \"app\" folder into the same directory as the Grain executable.\n\n# Run Grain\n\n* Open your terminal or command prompt and navigate to the Grain directory.\n* Execute the Grain binary.\n\non linux you will first have to make the program executable\n\n`chmod +x grain_linux_amd64`\n\nThen you can run the program\n\n`./grain_linux_amd64`\n\n(alternatively on windows, you can just double click the grain_windows_amd64.exe to start the relay)\n\nYou should see a terminal window displaying the port on which your relay and frontend are running.\n\nIf you get\n\u003e Failed to copy app/static/examples/config.example.yml to config.yml: open app/static/examples/config.example.yml: no such file or directory\n\nThen you probably forgot to put the app folder in the same directory as your executable or you did not unzip the folder.\n\n# Congrats! You're running grain üåæ!\n\nYou may want to change your [NIP11](https://github.com/nostr-protocol/nips/blob/master/11.md) relay information document (relay_metadata.json) This informs clients of the capabilities, administrative contacts, and various server attributes. It's located in the same directory as your executable.\n\n# Configuration Files\n\nOnce Grain has been executed for the first time, it will generate the default configuration files inside the directory where the executable is located. These files are:\n\n```bash\nconfig.yml\nwhitelist.yml\nblacklist.yml\n```\n\n*Prerequisites*:\n- Grain requires a running MongoDB instance. Please refer to this separate guide for instructions on setting up MongoDB: [Link to MongoDB setup guide].\n\n# Download Grain:\n\nDownload the latest release for your system from the [GitHub releases page](https://github.com/0ceanSlim/grain/releases)    \n\n*amd64 binaries provided for Windows and Linux, if you have a different CPU architecture, you can download and install go to build grain from source*\n\n## Installation and Execution:\n\n- Create a new folder on your system where you want to run Grain.\n- The downloaded binary comes bundled with a ZIP file containing a folder named \"app,\" which holds the frontend HTML files. Unzip the \"app\" folder into the same directory as the Grain executable.\n\n## Run Grain:\n\n- Open your terminal or command prompt and navigate to the Grain directory.\n- Execute the Grain binary.\n\non linux you will first have to make the program executable\n\n`chmod +x grain_linux_amd64`\n\nThen you can run the program\n\n`./grain_linux_amd64` \n\n(alternatively on windows, you can just double click the grain_windows_amd64.exe to start the relay)\n\nYou should see a terminal window displaying the port on which your relay and frontend are running.\n\nIf you get \n\u003e  Failed to copy app/static/examples/config.example.yml to config.yml: open app/static/examples/config.example.yml: no such file or directory\n\nThen you probably forgot to put the app folder in the same directory as your executable or you did not unzip the folder. \n\n# Congrats! You're running grain üåæ! \n\nYou may want to change your [NIP11](https://github.com/nostr-protocol/nips/blob/master/11.md) relay information document (relay_metadata.json) This informs clients of the capabilities, administrative contacts, and various server attributes. It's located in the same directory as your executable. \n\n## Configuration Files:\n\nOnce Grain has been executed for the first time, it will generate the default configuration files inside the directory where the executable is located. These files are:\n\n```bash\nconfig.yml\nwhitelist.yml\nblacklist.yml\n```\n\n## Configuration Documentation\n\nYou can always find the latest example configs on [my site](https://happytavern.co/grain) or in the github repo here:\n[config.yml](https://github.com/0ceanSlim/grain/blob/main/app/static/examples/config.example.yml)\n\n[whitelist.yml](https://github.com/0ceanSlim/grain/blob/main/app/static/examples/whitelist.example.yml)\n\n[blacklist.yml](app/static/examples/blacklist.example.yml)\n\n### Config.yml\n\nThis `config.yml` file is where you customize how your Grain relay operates. Each section controls different aspects of the relay's behavior.\n\n**1. `mongodb` (Database Settings)**\n\n* **`uri: mongodb://localhost:27017/`**:\n    * This is the connection string for your MongoDB database.\n    * `mongodb://localhost:27017/` indicates that your MongoDB server is running on the same computer as your Grain relay (localhost) and listening on port 27017 (the default MongoDB port).\n    * If your MongoDB server is on a different machine, you'll need to change `localhost` to the server's IP address or hostname.\n    * The trailing `/` indicates the root of the mongodb server. You will define the database in the next line.\n* **`database: grain`**:\n    * This specifies the name of the MongoDB database that Grain will use to store Nostr events. Grain will create this database if it doesn't already exist.\n    * You can name the database whatever you want. If you want to run multiple grain relays, you can and they can have different databases running on the same mongo server. \n\n**2. `server` (Relay Server Settings)**\n\n* **`port: :8181`**:\n    * This sets the port on which your Grain relay will listen for incoming nostr websocket connections and what port the frontend will be available at.\n* **`read_timeout: 10 # in seconds`**:\n    * This is the maximum time (in seconds) that the relay will wait for a client to send data before closing the connection.\n* **`write_timeout: 10 # in seconds`**:\n    * This is the maximum time (in seconds) that the relay will wait for a client to receive data before closing the connection.\n* **`idle_timeout: 120 # in seconds`**:\n    * This is the maximum time (in seconds) that the relay will keep a connection open if there's no activity.\n* **`max_connections: 100`**:\n    * This sets the maximum number of simultaneous client connections that the relay will allow.\n* **`max_subscriptions_per_client: 10`**:\n    * This sets the maximum amount of subscriptions a single client can request from the relay.\n\n**3. `resource_limits` (System Resource Limits)**\n\n* **`cpu_cores: 2 # Limit the number of CPU cores the application can use`**:\n    * This restricts the number of CPU cores that Grain can use. Useful for controlling resource usage on your server.\n* **`memory_mb: 1024 # Cap the maximum amount of RAM in MB the application can use`**:\n    * This limits the maximum amount of RAM (in megabytes) that Grain can use.\n* **`heap_size_mb: 512 # Set a limit on the Go garbage collector's heap size in MB`**:\n    * This sets a limit on the amount of memory that the Go programming language's garbage collector can use.\n\n**4. `auth` (Authentication Settings)**\n\n* **`enabled: false # Enable or disable AUTH handling`**:\n    * If set to `true`, this enables authentication handling, requiring clients to authenticate before using the relay.\n* **`relay_url: \"wss://relay.example.com/\" # Specify the relay URL`**:\n    * If authentication is enabled, this is the url that clients will use to authenticate.\n\n**5. `UserSync` (User Synchronization)**\n\n* **`user_sync: false`**:\n    * If set to true, the relay will attempt to sync user data from other relays.\n* **`disable_at_startup: true`**:\n    * If user sync is enabled, this will prevent the sync from starting when the relay starts.\n* **`initial_sync_relays: [...]`**:\n    * A list of other relays to pull user data from.\n* **`kinds: []`**:\n    * A list of event kinds to pull from the other relays. Leaving this empty will pull all event kinds.\n* **`limit: 100`**:\n    * The limit of events to pull from the other relays.\n* **`exclude_non_whitelisted: true`**:\n    * If set to true, only users on the whitelist will have their data synced.\n* **`interval: 360`**:\n    * The interval in minutes that the relay will resync user data.\n\n**6. `backup_relay` (Backup Relay)**\n\n* **`enabled: false`**:\n    * If set to true, the relay will send copies of received events to the backup relay.\n* **`url: \"wss://some-relay.com\"`**:\n    * The url of the backup relay.\n\n**7. `event_purge` (Event Purging)**\n\n* **`enabled: false`**:\n    * If set to `true`, the relay will automatically delete old events.\n* **`keep_interval_hours: 24`**:\n    * The number of hours to keep events before purging them.\n* **`purge_interval_minutes: 240`**:\n    * How often (in minutes) the purging process runs.\n* **`purge_by_category: ...`**:\n    * Allows you to specify which categories of events (regular, replaceable, addressable, deprecated) to purge.\n* **`purge_by_kind_enabled: false`**:\n    * If set to true, events will be purged based on the kinds listed below.\n* **`kinds_to_purge: ...`**:\n    * A list of event kinds to purge.\n* **`exclude_whitelisted: true`**:\n    * If set to true, events from whitelisted users will not be purged.\n\n**8. `event_time_constraints` (Event Time Constraints)**\n\n* **`min_created_at: 1577836800`**:\n    * The minimum `created_at` timestamp (Unix timestamp) that events must have to be accepted by the relay.\n* **`max_created_at_string: now+5m`**:\n    * The maximum created at time that an event can have. This example shows that the max created at time is 5 minutes in the future from the time the event is received.\n    * `min_created_at_string` and `max_created_at` work the same way.\n\n**9. `rate_limit` (Rate Limiting)**\n\n* **`ws_limit: 100`**:\n    * The maximum number of WebSocket messages per second that the relay will accept.\n* **`ws_burst: 200`**:\n    * Allows a temporary burst of WebSocket messages.\n* **`event_limit: 50`**:\n    * The maximum number of Nostr events per second that the relay will accept.\n* **`event_burst: 100`**:\n    * Allows a temporary burst of Nostr events.\n* **`req_limit: 50`**:\n    * The limit of http requests per second.\n* **`req_burst: 100`**:\n    * The allowed burst of http requests.\n* **`max_event_size: 51200`**:\n    * The maximum size (in bytes) of a Nostr event that the relay will accept.\n* **`kind_size_limits: ...`**:\n    * Allows you to set size limits for specific event kinds.\n* **`category_limits: ...`**:\n    * Allows you to set rate limits for different event categories (ephemeral, addressable, regular, replaceable).\n* **`kind_limits: ...`**:\n    * Allows you to set rate limits for specific event kinds.\n\nBy understanding these settings, you can tailor your Grain Nostr relay to meet your specific needs and resource constraints.\n\n### whitelist.yml \n\nThe `whitelist.yml` file is used to control which users, event kinds, and domains are allowed to interact with your Grain relay. Here's a breakdown of the settings:\n\n**1. `pubkey_whitelist` (Public Key Whitelist)**\n\n* **`enabled: false`**:\n    * If set to `true`, this enables the public key whitelist. Only users whose public keys are listed will be allowed to publish events to your relay.\n* **`pubkeys:`**:\n    * A list of hexadecimal public keys that are allowed to publish events.\n    * `pubkey1` and `pubkey2` are placeholders, you will replace these with actual hexadecimal public keys.\n* **`npubs:`**:\n    * A list of npubs that are allowed to publish events.\n    * `npub18ls2km9aklhzw9yzqgjfu0anhz2z83hkeknw7sl22ptu8kfs3rjq54am44` and `npub2` are placeholders, replace them with actual npubs.\n    * npubs are bech32 encoded public keys.\n\n**2. `kind_whitelist` (Event Kind Whitelist)**\n\n* **`enabled: false`**:\n    * If set to `true`, this enables the event kind whitelist. Only events with the specified kinds will be allowed.\n* **`kinds:`**:\n    * A list of event kinds (as strings) that are allowed.\n    * `\"1\"` and `\"2\"` are example kinds. Replace these with the kinds you want to allow.\n    * Example kinds are 0 for metadata, 1 for short text notes, and 2 for recommend server.\n\n**3. `domain_whitelist` (Domain Whitelist)**\n\n* **`enabled: false`**:\n    * If set to `true`, this enables the domain whitelist. This checks the domains .well-known folder for their nostr.json. This file contains a list of pubkeys. They will be considered whitelisted if on this list. \n* **`domains:`**:\n    * A list of domains that are allowed.\n    * `\"example.com\"` and `\"anotherdomain.com\"` are example domains. Replace these with the domains you want to allow.\n\n### blacklist.yml\n\nThe `blacklist.yml` file allows you to block specific content, users, and words from your Grain relay. Here's a breakdown of the settings:\n\n**1. `enabled: true`**\n\n* This setting enables the blacklist functionality. If set to `true`, the relay will actively block content and users based on the rules defined in this file.\n\n**2. `permanent_ban_words:`**\n\n* This section lists words that, if found in an event, will result in a permanent ban for the event's author.\n* `- really bad word` is a placeholder. Replace it with any words you want to permanently block.\n\n**3. `temp_ban_words:`**\n\n* This section lists words that, if found in an event, will result in a temporary ban for the event's author.\n* `- crypto`, `- web3`, and `- airdrop` are examples. Replace them with the words you want to temporarily block.\n\n**4. `max_temp_bans: 3`**\n\n* This sets the maximum number of temporary bans a user can receive before they are permanently banned.\n\n**5. `temp_ban_duration: 3600`**\n\n* This sets the duration of a temporary ban in seconds. `3600` seconds equals one hour.\n\n**6. `permanent_blacklist_pubkeys:`**\n\n* This section lists hexadecimal public keys that are permanently blocked from using the relay.\n* `- db0c9b8acd6101adb9b281c5321f98f6eebb33c5719d230ed1870997538a9765` is an example. Replace it with the public keys you want to block.\n\n**7. `permanent_blacklist_npubs:`**\n\n* This section lists npubs that are permanently blocked from using the relay.\n* `- npub1x0r5gflnk2mn6h3c70nvnywpy2j46gzqwg6k7uw6fxswyz0md9qqnhshtn` is an example. Replace it with the npubs you want to block.\n* npubs are the human readable version of public keys.\n\n**8. `mutelist_authors:`**\n\n* This section lists hexadecimal public keys of author of a [kind1000 mutelist](https://github.com/nostr-protocol/nips/blob/master/51.md). Pubkey authors on this mutelist will be considered on the permanent blacklist. This provides a nostr native way to handle the backlist of your relay\n* `- 3fe0ab6cbdb7ee27148202249e3fb3b89423c6f6cda6ef43ea5057c3d93088e4` is an example. Replace it with the public keys of authors that have a mutelist you would like to use as a blacklist. Consider using your own.\n* **Important Note:** The mutelist Event MUST be stored in this relay for it to be retrieved. This means your relay must have a copy of the authors kind10000 mutelist to consider them for the blacklist.\n\n\n## Running Grain as a Service:\n\n### Windows Service:\n\nTo run Grain as a Windows service, you can use tools like NSSM (Non-Sucking Service Manager). NSSM allows you to easily install and manage any application as a Windows service.\n\n    * For instructions on how to install NSSM, please refer to this article: [Link to NSSM install guide coming soon].\n\n1.  **Open Command Prompt as Administrator:**\n    * Open the Windows Start menu, type \"cmd,\" right-click on \"Command Prompt,\" and select \"Run as administrator.\"\n\n2.  **Navigate to NSSM Directory:**\n    * Use the `cd` command to navigate to the directory where you extracted NSSM. For example, if you extracted it to `C:\\nssm`, you would type `cd C:\\nssm` and press Enter.\n\n3.  **Install the Grain Service:**\n    * Run the command `nssm install grain`.\n    * A GUI will appear, allowing you to configure the service.\n\n4.  **Configure Service Details:**\n    * In the \"Path\" field, enter the full path to your Grain executable (e.g., `C:\\grain\\grain_windows_amd64.exe`).\n    * In the \"Startup directory\" field, enter the directory where your Grain executable is located (e.g., `C:\\grain`).\n\n5.  **Install the Service:**\n    * Click the \"Install service\" button.\n\n6.  **Manage the Service:**\n    * You can now manage the Grain service using the Windows Services manager. Open the Start menu, type \"services.msc,\" and press Enter. You can start, stop, pause, or restart the Grain service from there.\n\n### Linux Service (systemd):\n\nTo run Grain as a Linux service, you can use systemd, the standard service manager for most modern Linux distributions.\n\n1.  **Create a Systemd Service File:**\n    * Open a text editor with root privileges (e.g., `sudo nano /etc/systemd/system/grain.service`).\n\n2.  **Add Service Configuration:**\n    * Add the following content to the `grain.service` file, replacing the placeholders with your actual paths and user information:\n\n    ```toml\n    [Unit]\n    Description=Grain Nostr Relay\n    After=network.target\n\n    [Service]\n    ExecStart=/path/to/grain_linux_amd64\n    WorkingDirectory=/path/to/grain/directory\n    Restart=always\n    User=your_user #replace your_user\n    Group=your_group #replace your_group\n\n    [Install]\n    WantedBy=multi-user.target\n    ```\n\n    * Replace `/path/to/grain/executable` with the full path to your Grain executable.\n    * Replace `/path/to/grain/directory` with the directory containing your Grain executable.\n    * Replace `your_user` and `your_group` with the username and group that will run the Grain service.\n\n3.  **Reload Systemd:**\n    * Run the command `sudo systemctl daemon-reload` to reload the systemd configuration.\n\n4.  **Enable the Service:**\n    * Run the command `sudo systemctl enable grain.service` to enable the service to start automatically on boot.\n\n5.  **Start the Service:**\n    * Run the command `sudo systemctl start grain.service` to start the service immediately.\n\n6.  **Check Service Status:**\n    * Run the command `sudo systemctl status grain.service` to check the status of the Grain service. This will show you if the service is running and any recent logs.\n    * You can run `sudo journalctl -f -u grain.service` to watch the logs\n\nMore guides are in the works for setting up tailscale to access your relay from anywhere over a private network and for setting up a cloudflare tunnel to your domain to deploy a grain relay accessible on a subdomain of your site *eg wss://relay.yourdomain.com*","sig":"035e8288daa0a11d9c29dbab84027d97f4218660f912a076cfdfa7d47e280083adaa0ca1bf0dd9cbf8e05df8b191751c3a8298208f14c3fe63d24fffbd070591"},"naddr1qqxnzde5xg6rwwp5xsuryd3kqyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyqt0rgqsp4x0l77vggcw3c8y9yxvtpyurtwxf4n98ldq0sp3kyr5kqcyqqq823ct9xqa5":{"kind":30023,"id":"084be4ce21d2e191da2ae0ee8ef303814f1abc32aaadb1ab755a983dafcadf8e","pubkey":"16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b","created_at":1742481079,"tags":[["d","1742478448266"],["title","How to Install and Run MongoDB Community Server"],["summary","This guide provides step-by-step instructions for installing MongoDB Community Server on Windows and Linux (Ubuntu/Debian). It covers downloading the correct version, running the installer, setting environment variables, creating data directories, and starting the MongoDB service. Basic commands for interacting with the database are also included, enabling beginners to quickly set up and start using MongoDB."],["t","mongo"],["t","database"],["t","linux"],["t","windows"],["t","install"],["t","howto"],["t","guide"],["t","nostr"],["t","relay"],["image","https://happytavern.co/.pictures/thumbs/how-to/mongo.png"],["published_at","1742481074"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzq9h35qgq6n8ll0xyyv8gurjzjrx9sjwp4hry6ejnlks8cqcmzp6tqqxnzde5xg6rwwp5xsuryd3knfdr7g"],["a","30023:16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b:1742404354025","","mention"],["p","16f1a0100d4cfffbcc4230e8e0e4290cc5849c1adc64d6653fda07c031b1074b"]],"content":"# Introduction\n\nMongoDB is a popular NoSQL document database, meaning it stores data in flexible, JSON-like documents. This makes it highly scalable and adaptable for various applications. This guide will focus on installing the **Community Server** edition, which is free and open-source.\n\nThis article is designed for **beginners** and those new to MongoDB, providing a clear and concise walkthrough of the installation process. We will cover installation on both **Windows** and **Linux** operating systems.\n\nThe official MongoDB documentation on the MongoDB website is very informative and you should be able to follow their guides. This article is written to provide a brief overview and a more streamlined installation experience.\n\n# Prerequisites\n\nMongoDB Community Server can be installed and run on a wide range of systems. While specific hardware requirements can vary based on your intended use case and the size of your database, here are the general prerequisites:\n\n* **Operating System:**\n    * This guide will cover installation on popular versions of Windows and Linux (specifically Ubuntu/Debian). MongoDB also supports other operating systems, which you can find on the official MongoDB website.\n* **Storage Space:**\n    * You'll need sufficient disk space to store your database files. The amount of space required will depend on the size of your data. It is recommended to have more storage than you think you will initially need.\n* **RAM:**\n    * While MongoDB can run with minimal RAM, having more RAM will improve performance, especially for larger databases. The amount of RAM needed will depend on the size of your data.\n* **Basic System Knowledge:**\n    * Familiarity with using the command line or terminal is helpful, especially for Linux installations.\n    * Basic understanding of file systems and directories.\n\nEssentially, MongoDB is designed to be flexible and can run on most modern systems. As your data grows, you can always scale your hardware accordingly.\n\n## Downloading MongoDB Community Server:\n\nTo begin, you'll need to download the MongoDB Community Server installation package.\n\n* Visit the official MongoDB download page: [https://www.mongodb.com/try/download/community](https://www.mongodb.com/try/download/community)\n\nOn the download page, you'll see options to select the following:\n\n* **Version:** Choose the desired version of MongoDB. It is generally recommended to select the latest stable release.\n* **Operating System:** Select your operating system (Windows or Linux).\n* **Package:** Select the appropriate package type. For Windows, it will typically be `msi`. For Linux, you will choose the package type that aligns with your linux distro. For example `.deb` for Debian/Ubuntu or `.rpm` for RedHat/Fedora.\n\nOnce you have made your selections, click the \"Download\" button to download the installer or package.\n\n## Installation on Windows:\n\n### Running the Installer:\n\n1.  **Locate the Downloaded Installer:**\n    * Navigate to the directory where you downloaded the MongoDB `.msi` installer.\n\n2.  **Run the Installer:**\n    * Double-click the `.msi` file to start the installation wizard.\n\n3.  **Welcome Screen:**\n    * Click \"Next\" on the welcome screen.\n\n4.  **License Agreement:**\n    * Read the license agreement, check the \"I accept the terms in the License Agreement\" box, and click \"Next.\"\n\n5.  **Setup Type:**\n    * Select \"Custom\" installation. This allows you to choose the installation location and data directory. Click \"Next.\"\n\n6.  **Installation Location:**\n    * You can change the default installation directory if desired. Click \"Next.\"\n\n7.  **Service Configuration:**\n    * You can choose to install MongoDB as a service. It is recommended to install as a service.\n    * You can also change the \"Data Directory\" location here. It is recommended to change this to a location such as `C:\\data\\db`. If you do not change it here, you will need to create the data directory manually later.\n    * Click \"Next.\"\n\n8.  **Ready to Install:**\n    * Click \"Install\" to begin the installation process.\n\n9.  **Complete Installation:**\n    * Once the installation is complete, click \"Finish.\"\n\n### Setting Environment Variables (Optional but Recommended):\n\nSetting the `PATH` environment variable allows you to run MongoDB commands from any command prompt window without specifying the full path to the executable.\n\n1.  **Open System Properties:**\n    * Search for \"Environment Variables\" in the Windows Start menu and select \"Edit the system environment variables.\"\n\n2.  **Environment Variables:**\n    * In the \"System Properties\" window, click the \"Environment Variables...\" button.\n\n3.  **Edit Path Variable:**\n    * In the \"System variables\" section, find the \"Path\" variable and click \"Edit.\"\n\n4.  **Add MongoDB Bin Directory:**\n    * Click \"New\" and add the path to the MongoDB `bin` directory. This is typically `C:\\Program Files\\MongoDB\\Server\\\u003cversion\u003e\\bin`, replacing `\u003cversion\u003e` with your installed version.\n    * Click \"OK\" on all open windows to save the changes.\n\n5.  **Verify Path:**\n    * Open a new command prompt window and type `mongod --version`. If MongoDB is installed correctly and the `PATH` variable is set, you should see the MongoDB version information.\n\n## Installation on Linux (Ubuntu/Debian):\n\nThese instructions are specifically for Debian-based systems like Ubuntu.\n\n### Importing the MongoDB Public GPG Key:\n\n1.  **Open a Terminal:**\n    * Open your terminal application.\n\n2.  **Import the GPG Key:**\n    * Run the following command to import the MongoDB public GPG key:\n\n    ```bash\n    wget -qO - [https://www.mongodb.org/static/pgp/server-7.0.asc](https://www.mongodb.org/static/pgp/server-7.0.asc) | sudo apt-key add -\n    ```\n\n    * This command downloads the GPG key and adds it to your system's trusted keys. This ensures that the packages you download from the MongoDB repository are authentic.\n\n### Adding the MongoDB Repository:\n\n1.  **Add the Repository:**\n    * Run the following command to add the MongoDB repository to your system's sources list:\n\n    ```bash\n    echo \"deb [ arch=amd64,arm64 ] [https://repo.mongodb.org/apt/ubuntu](https://repo.mongodb.org/apt/ubuntu) $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n    ```\n\n    * This command adds the MongoDB repository to your system's package manager sources. The `$(lsb_release -cs)` part automatically determines your Ubuntu/Debian version.\n\n2.  **Update Package List:**\n    * Run the following command to update your package list:\n\n    ```bash\n    sudo apt update\n    ```\n\n    * This command refreshes the package list, including the newly added MongoDB repository.\n\n### Installing MongoDB:\n\n1.  **Install MongoDB:**\n    * Run the following command to install the MongoDB Community Server:\n\n    ```bash\n    sudo apt install mongodb-org\n    ```\n\n    * This command downloads and installs the MongoDB packages.\n\n*After install, linux and windows should both have a system service already setup from the install process. You can check if it's running on linux with `sudo systemctl status mongod`. On Windows, you should see the service running as \"MongoDB Server\" if you open system services on Windows*\n\n## Basic MongoDB Commands:\n\nAfter installing and starting MongoDB, you can use the `mongo` shell to interact with your database. Here are some basic commands to get you started:\n\n**Checking MongoDB Version:**\n\nFirst, let's verify that MongoDB is installed correctly by checking its version:\n\n1.  **Open a Terminal or Command Prompt:**\n    * Open your terminal (Linux/macOS) or command prompt (Windows).\n\n2.  **Run `mongosh --version`:**\n    * Type `mongosh --version` and press Enter.\n    * This command will display the installed MongoDB version if it's correctly installed and in your system's PATH.\n\n**Basic MongoDB Shell Commands:**\n\n1.  **Open the `mongosh` Shell:**\n    * Type `mongosh` and press Enter. This will open the MongoDB shell, and you'll see a prompt like `\u003e`.\n\n2.  **Show Databases:**\n    * To see a list of all databases on your MongoDB server, type `show dbs` and press Enter.\n    * This will display a list of database names.\n\n3.  **Use a Database:**\n    * To switch to a specific database, type `use \u003cdatabase_name\u003e` and press Enter. Replace `\u003cdatabase_name\u003e` with the name of the database you want to use.\n    * Example: `use mydatabase`\n    * If the database doesn't exist, MongoDB will create it when you first store data in it.\n\n4.  **Show Collections:**\n    * After switching to a database, you can see a list of collections (similar to tables in relational databases) in that database by typing `show collections` and pressing Enter.\n    * Collections are where you store documents (JSON-like data).\n\n**Example Session:**\n\n```bash\n\u003e mongosh\nCurrent Mongosh Log ID: 6563728637951a37887e2730\nConnecting to:          mongodb://127.0.0.1:27017/?directConnection=true\u0026serverSelectionTimeoutMS=2000\u0026appName=mongosh\nUsing MongoDB:          7.0.3\nUsing Mongosh:          2.1.1\nFor mongosh info see: [https://docs.mongodb.com/mongodb-shell/](https://docs.mongodb.com/mongodb-shell/)\n\ntest\u003e show dbs\nadmin   40 KiB\nconfig  72 KiB\nlocal   40 KiB\ntest\u003e use mydatabase\nswitched to db mydatabase\nmydatabase\u003e show collections\nmydatabase\u003e\n```\n\n## Conclusion\n\nCongratulations! You have successfully installed and started MongoDB Community Server. You've learned how to download, install, and run MongoDB on both Windows and Linux systems, and you've explored some basic commands to interact with your database.\n\nNow, you might want to try an application like grain, a Nostr relay, which utilizes MongoDB as its database. \nLearn How to Install grain: nostr:naddr1qvzqqqr4gupzq9h35qgq6n8ll0xyyv8gurjzjrx9sjwp4hry6ejnlks8cqcmzp6tqqxnzde5xg6rqdpnx56rqv34uyz5g4\n\nRemember, this guide covers the basics. There's much more to explore in the world of MongoDB, including advanced querying, indexing, replication, and sharding. Continue exploring the official MongoDB documentation to deepen your knowledge and unlock the full potential of this powerful database.\n","sig":"62dc67775d02a32f57f31985017e3ea682c6c4309efcb60c078294eb154c4673e14b350803e5d5990454c68d220784bc81774a846aefd7a4f684f7d0ee9a8779"},"naddr1qqxnzde5xv6nsvpj8q6ngwf4qyxhwumn8ghj7mn0wvhxcmmvqgs2vrneurk665gq6a2rke572y7mc8ppwr5wnd60mw8fwxharc8xsycrqsqqqa282hwr6m":{"kind":30023,"id":"ab4ba716dedc28d494b9226900c0905cba7f8cce1a54b2e24204acee48f2bb46","pubkey":"a60e79e0edad5100d7543b669e513dbc1c2170e8e9b74fdb8e971afd1e0e6813","created_at":1743582408,"tags":[["d","1743580285495"],["title","Nostr Utilities"],["summary","A short run down of some popular Nostr utility categories"],["t","nostr"],["t","utilities"],["t","zap"],["t","search"],["t","relay"],["image","https://hellonostr.xyz/images/utilities1.png"],["published_at","1743582407"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzpfsw08swmt23qrt4gwmxnegnm0quy9cw36dhfldca9c6l50qu6qnqqxnzde5xv6nsvpj8q6ngwf48ckcjr"],["p","a60e79e0edad5100d7543b669e513dbc1c2170e8e9b74fdb8e971afd1e0e6813"],["t","implementations"]],"content":"*This is a long form note of a post that lives on my Nostr educational website [Hello Nostr](https://hellonostr.xyz).*\n\nSo you've got yourself [started](https://hellonostr.xyz/start), you're up to speed with the latest Nostr [jargon](https://hellonostr.xyz/glossary) and you've learned the basics about the [protocol](https://hellonostr.xyz/101), but you're left wanting more!? Well, look no further! This post contains a useful list of Nostr based utilities than can enhance your experience in and around the Nostr protocol. \n\n## Search and Discovery\n\nGetting started with Nostr can sometimes feel like a lonely journey, particularly if you're the first of your friends and family to discover how awesome it can be! These tools can help you discover new content, connect with existing follows from other networks and just generally have a poke around at the different types of content Nostr has to offer.\n\n\u003e Have a hobby or existing community elsewhere? Have a search for it here to find others with shared interests\n\n- **[Nostr.Band](https://nostr.band/)** - Search for people, posts, media and stats literally anything Nostr has to offer!\n- **[Nostr.Directory](https://nostr.directory/)** - Find your Twitter follows on Nostr\n- **[Awesome Nostr](https://github.com/aljazceru/awesome-nostr#implementations)** - Extensive list of Relay software\n- **[Nostr View](https://nostrview.com/)** - Generic Nostr search\n\n\n![Nostr Band](https://hellonostr.xyz/images/nostrband.png)\n\n\u003cbr/\u003e\n\n## Relays\n\nRelays might not be the sexiest of topics, particularly for newcomers to the network, but they are a crucial part of what makes Nostr great. As you become more competent, you'll want to customize your relay selection and maybe even run your own! Here are some great starting points.\n\n\u003e Running a personal relay is a powerful way to improve the redundancy of your Nostr events.\n\n- **[Nostr.Watch](https://next.nostr.watch/)** - Browse, test and research Nostr relays\n- **[Nostrwat.ch](https://nostrwat.ch/)** - List of active Nostr relays\n- **[Advanced Nostr Search](https://advancednostrsearch.vercel.app/)** - Targetted search with date ranges\n- **[Nostr.Wine](https://nostr.wine/)** - Reliable paid Relay\n\n![Umbrel Relay](https://hellonostr.xyz/images/umbrelnode.jpeg)\n\n\u003cbr/\u003e\n\n## NIP-05 Identity Services\n\nYour nPub, or public key (that long string of letters and numbers) is your ‚Äòofficial‚Äô Nostr ID, but it‚Äôs not exactly catchy. NIP-05 identifiers are a human-readable and easily shareable way to have people find you on Nostr. They look like an email address, like qna@hellonostr.xyz. If you have your own domain\nand web server, you can easily [create your own](https://thebitcoinmanual.com/articles/nostr-account-nip-05-verified/) NIP-05 identifier in just a few minutes. If you don't, you'll want to leverage one of the many free or paid solutions.\n\n\u003e Make yourself easier to find on Nostr with a NIP-05 identifier\n\n- **[Bitcoiner.Chat](https://bitcoiner.chat/)** - Free service operated by [QnA](nostr:npub15c88nc8d44gsp4658dnfu5fahswzzu8gaxm5lkuwjud068swdqfspxssvx)\n- **[Nostr Plebs](https://nostrplebs.com/)** - Paid service with extra features\n- **[Alby](https://getalby.com/)** - Lightning wallet with + NIP-05 solution\n- **[Nostr Address](https://en.nostraddress.com/)** - Paid service with extra features\n- **[Zaps.Lol](https://zaps.lol/)** - Free service\n\n![Zaps LOL](https://hellonostr.xyz/images/zapslol.png)\n\n\u003cbr/\u003e\n\n## Key Management\n\nYour private key (or nsec) it the key to your Nostr world. It is what allows you to access and interact with your social graph from any client. It doesn't matter if that client is a micro-blogging app like Amethyst, a podcast app like Fountain, or a P2P marketplace like Plebeian  Market, your nsec is paramount to \nthose interactions. Should your nsec be lost, or fall into the wrong hands, whoever then holds a copy can access Nostr and pretend to be you, meaning that you'll need to start again with a new keypair. Not a nice situation to find yourself in, so treat your nsec VERY carefully.\n\n\u003e Your private key IS your Nostr identity. Treat it with extreme care and do not share it.\n\n- **[Alby](https://getalby.com/)** - Browser extension enabling you to sign into web app without sharing the private key \n- **[Nos2x](https://github.com/fiatjaf/nos2x)** - Another browser extension key manager\n- **[Keys.Band](https://keys.band/)** - Another browser extension key manager\n- **[Amber](https://github.com/greenart7c3/amber)** - Android app for safe nsec storage. Can talk to other clients on the same phone to log in and sign events\n- **[Nostr Signing Device](https://github.com/lnbits/nostr-signing-device)** - Dedicated device to store your nsec\n- **[Passport](https://docs.foundation.xyz)** - Hardware wallet for offline and deterministic nsec generation and storage\n\n![Passport](https://hellonostr.xyz/images/passport1.png)\n\n\u003cbr/\u003e\n\n## Zap Tools\n\nZaps are one of the most fun parts of Nostr. Never before have we been able to send fractions of a penny, instantly to our friends because their meme made us laugh, or their blog post was very insightful. Zaps use Bitcoin‚Äôs Lightning Network, a faster and cheaper way to move Bitcoin around. To Zap someone, you need a Lightning wallet linked to your Nostr client. Some clients, like Primal, ship with their own custodial wallet to make getting started a breeze. Most clients also allow more advanced users to connect an existing Lightning Wallet to reduce reliance and trust in the client provider.\n\n- **[Alby](https://getalby.com/)** - Browser extension and self-custodial Lightning wallet \n- **[LNBits](https://github.com/lnbits/lnbits)** - A Zap server running on your own Bitcoin node\n- **[BTCPay Server](https://btcpayserver.org/)** - Another Zap server running on your own Bitcoin node\n- **[Zeus](https://github.com/ZeusLN/zeus)** - Zap compatible self-custodial mobile Lightning wallet\n- **[Nostr Wallet Connect](https://nwc.dev/)** - Communication protocol between Lightning wallets and Nostr apps\n- **[Ecash Wallets](https://github.com/cashubtc/awesome-cashu)** - Custodial Ecash based wallets that are interoperable with Lightning and Nostr (Funds may be at risk)\n- **[Wallet of Satoshi](https://www.walletofsatoshi.com/)** - Custodial Lightning wallet (Funds may be at risk)\n\n![Zaps](https://hellonostr.xyz/images/zaps1.png)\n\n---\n\nIf you found this post useful, please share it with your peers and consider following and zapping me on Nostr. If you write to me and let me know \nthat you found me via this post, I'll be sure to Zap you back! ‚ö°Ô∏è","sig":"e9a482751e0dfd7ffb75a0b86b24eaaee521eee3edda462d972269e6c1a4ebeccd3663233e3fca0b46b848de66eafebd3e11946bf45bee99465f36dd38b426c0"},"naddr1qqxnzdejx56nyv3j8qervvejqyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyrtud5q5kdpgzkazn3y0x3y7fuq88huy7jk4szhpwdfcqsdx4wmtsqcyqqq823c8v40k5":{"kind":30023,"id":"03643a16e2cfb66ad9db1ea1893221286fd3b40a3dae9d26dfcd2666834f4503","pubkey":"d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8","created_at":1732387247,"tags":[["client","YakiHonne","YakiHonne"],["d","1725522282632"],["image","https://img-21.ccm2.net/1QUzag2ISOf5Q_bvH5V8LVwNp38=/2509x/03dec81705f84e21968ae481821c36ad/ccm-faq/117960478_m.jpg"],["title","Android „Çí„É≠„Éº„Ç´„É´„É™„É¨„Éº„Çµ„Éº„Éê„ÉºÂåñ„Åó„Å¶ Tor „ÅßÂÖ¨Èñã„Åô„ÇãÊñπÊ≥ï"],["summary","How To Set Up Android As A Local P2P Relay For Nostr."],["published_at","1725462000"],["t","nostr"],["t","p2p"],["t","relay"],["t","android"],["t","citrine"],["t","orbot"],["t","tor"]],"content":"„Åì„Çì„Å´„Å°„ÅØÔºÅkohei „Åß„Åô„ÄÇ\n\n‰πÖ„ÄÖ„ÅÆ„Ç®„É≥„Éà„É™Êäï‰∏ã„Åß„Åô„Åå„ÄÅ‰ªäÂõû„ÅØÂÖàÊó•Âºä TL „ÅßË©±È°å„Å´„Å™„Å£„Å¶„ÅÑ„Åü„ÄÅAndroid „Çí P2P „ÅÆ„É≠„Éº„Ç´„É´„É™„É¨„Éº„Çµ„Éº„Éê„ÉºÂåñ„Åó„Å¶ Tor „ÅßÂÖ¨Èñã„Åô„ÇãÊñπÊ≥ï„ÇíÁ¥π‰ªã„Åó„Å¶„ÅÑ„Åì„ÅÜ„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ\n\n## Áî®ÊÑè„Åô„Çã„ÇÇ„ÅÆ\n\n1. Android Á´ØÊú´\n2. Orbot\n3. Citrine\n4. Amethyst\n\n## ÂâçÊèê„Å®‰∏ãÊ∫ñÂÇô\n\n‰ªäÂõû„ÅØ„ÄÅOrbot „ÅÆË©≥Á¥∞Ë®≠ÂÆö„ÅØÁúÅ„ÅÑ„Å¶„ÄÅPower User Mode „ÅÆË®≠ÂÆö„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„ÇãÂâçÊèê„Åß„ÅäË©±„ÇíÈÄ≤„ÇÅ„Åæ„Åô„ÄÇ\nAndroid Á´ØÊú´„ÇíÁî®ÊÑè„Åó„Å¶„ÄÅ2~4 „ÅÆ„Ç¢„Éó„É™„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åä„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n## Ë®≠ÂÆöÊñπÊ≥ï\n\n„Åù„Çå„Åß„ÅØÊó©ÈÄüË®≠ÂÆö„Åó„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ\n„Åæ„Åö„ÄÅCitrine „ÇíËµ∑Âãï„Åó„Å¶„ÄÅSettings „ÅÆ„Çø„Éñ„Åã„Çâ„É≠„Éº„Ç´„É´„É™„É¨„Éº„ÅÆË©≥Á¥∞„ÇíË®≠ÂÆö„Åó„Åæ„Åô„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521258191-YAKIHONNES3.png)\n\nË®≠ÂÆö„ÅåÁµÇ‰∫Ü„Åó„Åü„Çâ„ÄÅ„É≠„Éº„Ç´„É´„É™„É¨„Éº„ÇíËµ∑Âãï„Åó„Åæ„Åô„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521473509-YAKIHONNES3.png)\n\n„Åæ„Åü„ÄÅ„Åì„Åì„ÅßË°®Á§∫„Åï„Çå„Çã„Éù„Éº„ÉàÁï™Âè∑„Çí„É°„É¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521312333-YAKIHONNES3.png)\n\nÊ¨°„Å´„ÄÅMore „ÅÆ„Çø„Éñ„Å´Áßª„Çä„ÄÅHosted Onion Services „Å∏„Ç¢„ÇØ„Çª„Çπ„Åó„ÄÅService Type „ÅÆÈ†ÖÁõÆ„Åß User Services „Å´„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÖ•„Çå„Å¶„ÄÅÂè≥‰∏ã„ÅÆ + „Éû„Éº„ÇØ„Çí„Çø„ÉÉ„Éó„Åô„Çã„Å®‰ª•‰∏ã„ÅÆ„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ(Orbot „Åå„Çπ„ÇØ„Ç∑„Éß„ÇíË®±„Åó„Å¶„Åè„Çå„Å™„ÅÑ„ÅÆ„Åß‰∏ÄÈÉ®ÁîªÂÉèÂâ≤ÊÑõÔºâ\n\nË°®Á§∫„Åï„Çå„Åü„Çâ„ÄÅName „Å´‰ªªÊÑè„ÅÆÂêçÂâç„Çí„ÄÅLocal Port „Å® Onion Port „Å´ÂÖà„Åª„Å©„É°„É¢„Åó„Åü Citrine „ÅÆ„Éù„Éº„ÉàÁï™Âè∑„ÇíÂÖ•Âäõ„Åó„Åæ„Åô„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1732387181852-YAKIHONNES3.png)\n\nÂÖ•Âäõ„Åó„Åü„ÇâÂÜçËµ∑Âãï„ÇíÊ±Ç„ÇÅ„Çâ„Çå„Çã„ÅÆ„ÅßÂÜçËµ∑Âãï„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\nÂÜçËµ∑ÂãïÂæå„Å´ Hosted Onion Services „ÅÆÈ†ÖÁõÆ„Å´ .onion „ÅÆ„Ç¢„Éâ„É¨„Çπ„ÅåË°®Á§∫„Åï„Çå„Åü„ÇâÊàêÂäü„Åß„Åô (‰ΩïÊïÖ„ÅãÁßÅ„ÅÆÁí∞Â¢É„Åß„ÅØ„ÄÅ‰∏ÄÂõû„ÅÆÂÜçËµ∑Âãï„Åß„ÅØË®≠ÂÆö„ÅåÂèçÊò†„Åï„Çå„Å™„Åã„Å£„Åü„ÅÆ„Åß„Åô„Åå„ÄÅ„ÇÇ„ÅóÂêå„Åò„Çà„ÅÜ„Å™ÁèæË±°„ÅåËµ∑„Åç„ÅüÂ†¥Âêà„ÅØ„ÄÅÂÜçËµ∑Âãï -\u003e Connect -\u003e .onion „Ç¢„Éâ„É¨„Çπ„ÅåÁô∫Ë°å„Åï„Çå„Å¶„Çã„Åã„ÅÆÁ¢∫Ë™ç„ÄÅ„ÇíÊï∞ÂõûË©¶„Åô„Å®Áô∫Ë°å„Åï„Çå„Çã„ÅØ„Åö„Åß„Åô)\n\nÁô∫Ë°å„Åï„Çå„Åü„Çâ„ÄÅ.onion „Ç¢„Éâ„É¨„Çπ„Çí„Çø„ÉÉ„Éó„Åó„Å¶„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åô„ÄÇ\n\nÊ¨°„Å´„ÄÅAmethyst „ÇíËµ∑Âãï„Åó„Å¶„ÄÅ„É™„É¨„Éº„ÅÆË®≠ÂÆöÁîªÈù¢„Å´ÂÖ•„Çä„ÄÅOutbox „ÅÆË®≠ÂÆö„Å´„Ç≥„Éî„Éº„Åó„Åü .onion „Ç¢„Éâ„É¨„Çπ„ÇíË≤º„Çä‰ªò„Åë„Å¶‰øùÂ≠ò„Åó„Åæ„Åô„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521629086-YAKIHONNES3.png)\n\nÂæå„ÅØ„ÄÅAmethyst ÂÅ¥„Åß Orbot „ÅÆ„Éù„Éº„ÉàÁï™Âè∑„ÇíË®≠ÂÆö„Åó„Å¶ Orbot „Å´Êé•Á∂ö„Åô„Çå„Å∞ BOOM! Ë®≠ÂÆöÂÆå‰∫Ü„Åß„Åô„ÄÇ\n\n![image](https://yakihonne.s3.ap-east-1.amazonaws.com/d7c6d014b342815ba29c48f3449e4f0073df84f4ad580ae173538041a6abb6b8/files/1725521797591-YAKIHONNES3.png)\n\n„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅ\n\nÁ¥†Êïµ„Å™ Nostr „É©„Ç§„Éï„ÇíÔºÅ","sig":"52b62bfcc1578e824adbc7520f8ac10444e149265e9640080853119a46d77ce6f8a8d8fe26cdc627bb184556e2d8e71089354449a2428e9edc907b529c668261"},"naddr1qqxnzdenxverzdp3xvcrxdejqyt8wumn8ghj7un9d3shjtnswf5k6ctv9ehx2aqzyrpgyafyjdk7mt2lvgaulzsy6gql8lf76l2fz2sepklw76zlgke0wqcyqqq823csa5gqr":{"kind":30023,"id":"09fd7c81432cca8068f10bb5277363db74ee3ce03dfd7f4621fbc39324591ef2","pubkey":"c2827524936dedad5f623bcf8a04d201f3fd3ed7d4912a190dbeef685f45b2f7","created_at":1734191870,"tags":[["d","1733214130372"],["title","Nostr: il cambio di paradigma"],["summary","quello che a Napoli in maniera geniale viene definito il fattoapposta!"],["t","nostr"],["t","wot"],["t","identit√† digitale"],["t","note"],["t","relay"],["t","nsec"],["t","npub"],["image","https://image.nostr.build/520d9dacdc1879b0d3e2d78babb5b09c4dd39af9d21b3e0c9a8843661b69b64a.jpg"],["published_at","1734130800"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzps5zw5jfxm0d440kyw703gzdyq0nl5ld04y39gvsm0h0dp05tvhhqqxnzdenxverzdp3xvcrxdejmg3wnj"]],"content":"\n## L‚Äôoggetto misterioso\nNostr, che in realt√† √® **N.O.S.T.R.**, il cui acronimo significa **N**otes and **O**ther **S**tuff **T**ransmitted by **R**elay, √® un protocollo di comunicazione nato da pochissimi anni, che promette decentralizzazione e incensurabilit√†.\nLa maggior parte degli utenti internet non conosce il significato di queste due promesse, per motivi che non verranno analizzati qui (DYOR), ma **decentralizzazione e incensurabilit√† sono tanto importanti quanto la libert√† che ne consegue**.\n\nDecidere di usare il protocollo Nostr √® senz‚Äôaltro facoltativo e dovrebbe essere preso in considerazione per una migliore conoscenza del web. Quanto meno giudicare Nostr inutile a prescindere √® un errore.\n\n\n## Incensurabilit√†\n![](https://image.nostr.build/a8ddbfe29e03b6b772ade93ba15fc35b9d992a3e6d0efdab2c11068b948d41bb.png)\nNotes and Other Stuff Transmitted by Relay √® gi√† l'essenza: **l‚Äôidentit√† e i dati non risiedono in uno specifico server centralizzato**, ma su tanti piccoli serverini, i relay, che trasmettono le note (i post) scritte da un autore/un‚Äôautrice.\n\nQuesto √® ci√≤ che accade anche con i social media tradizionali, salvo il fatto che **tutte le piattaforme come ~~facebook~~ o ~~twitter~~ possono decidere di cancellare l‚Äôidentit√† digitale di un utente, eliminandolo dai propri server**.\n\n\n### **Su Nostr NO**.\n\nIl singolo runner del relay pu√≤ certamente decidere di bannare una determinata identit√† digitale, perch√© magari pubblica contenuti non graditi. Questi stessi contenuti, per√≤, resteranno visibili su altri relay e quindi fruibili per i relativi follower.\nInfine, si pu√≤ installare il proprio relay e a quel punto solo un idiota si bannerebbe da solo.\n\n\n## Tue le chiavi, tua l‚Äôidentit√† \n![](https://image.nostr.build/a1552bd83d6bd31c5de569bb89687dcaa1e0952e815bc81058fe49620fe7cf7b.png)\nI primi abitanti di questo piccolo universo hanno deciso di auto-definirsi *Nostriches*. \nI/le Nostriches devono solo **creare una coppia di chiavi, privata e pubblica**.\nLa chiave pubblica, **npub**, √® l‚Äôidentit√† digitale dell‚Äôutente.\nDice effettivamente chi sei e aiuta gli altri utenti a trovarti.\n\nLa chiave privata, o **nsec, √® la prova crittografica dell‚Äôidentit√† digitale** e questo √® gi√† un bel salto di paradigma rispetto al pi√π diffuso sistema costituito dalla combinazione username/password.\nNon esistono due chiavi private uguali, quella generata per ogni singolo utente √® unica ed √® da quella (solo da quella e nessun‚Äôaltra) che poi viene derivata la chiave privata.\n\n**Il protocollo Nostr permette, quindi, di essere i proprietari della propria identit√† digitale**.\n\nEd √® bene ribadire questo concetto:** l‚Äôidentit√† digitale √® solo dell'utente, non √® delle aziende che gestiscono il social media di turno**.\nLo stesso principio si applica ai dati e ai contenuti pubblicati, che appartengono ai legittimi autori e non alle piattaforme.\n\n\n## Gi√†‚Ä¶ le piattaforme\nMa quindi, come funziona Nostr?\nSemplice. Ci sono moltissimi client, che permettono di fare login con la chiave privata, creare un profilo completo di foto, biografia e link ai siti web, nonch√© di postare le note e trasmetterle ai relay cui si √® deciso di farlo.\nAlcuni relay offrono il servizio gratuitamente, altri a pagamento e ‚Äì con l‚Äôesperienza ‚Äì si trover√† il setup con cui iniziare.\n\n**La nsec permette di fare login ad ogni client indistintamente**, senza costringere gli utenti a creare la combo username/password per ogni servizio.\n\n*Non so se √® abbastanza chiaro...*\n\n\n## Web-Of-Trust\nIdentit√† digitale e possesso dei propri contenuti sono alla base di un sogno, nato decenni fa con il web2.0 e naufragato con esso nella palude del business dei dati personali.\nNon me ne frega un cazzo del gombloddismoh e di cosa fanno le multinazio(a)nali dei dati personali di ogni utente, o di come questi vengano utilizzati per addestrare modelli di linguaggio avanzati.\n\n**Ci√≤ che, a mio avviso, √® rivoluzionario, √® la realizzazione del sogno sogno**.\nIl salto di paradigma √® proprio il WoT, il **Web-Of-Trust: essere certi che chiunque abbia la possibilit√† di diffondere qualsiasi tipo di messaggio, che ne sia realmente l‚Äôautore e quindi se ne assuma la responsabilit√† e che chiunque altro possa decidere se fruirne o meno**.\n\nCi√≤ implica anche la libert√† di usare parole che sui social media tradizionali verrebbero censurate. Significa essere ‚Äúgiudicati‚Äù dai propri pari, liberi individui che decideranno se quel contenuto vale la pena di essere letto oppure no.\nComporta, per i lettori, **la libert√† scegliere autonomamente cosa o chi seguire a seconda dei contenuti e non che un capriccioso algoritmo decider√† per loro cosa √® meglio leggere o cosa no**.\n\n*Non so se √® abbastanza chiaro‚Ä¶*\n\n\n## Client e ZAP ‚ö°Ô∏è\n![](https://image.nostr.build/e11e04cd26b89574a9436647957eee2283fc0156256a3b4a0a33792a47af8923.png)\nLe opportunit√† che offre il protocollo Nostr sono molteplici.\nCon l‚Äôunica accortezza di **custodire in maniera responsabile la nsec**, con un unico ‚Äúaccount‚Äù si pu√≤ postare su client simil-twitter, blog post, link-in-bio tipo Link Tree, eventi come su Eventbride, raccogliere immagini tipo Pinterest, creare form come Google-form, ma senza avere una username e una password per ognuno degli account, senza fornire la propria email a cani e porci (che non √® comunque igienico) e senza rischiare di gestire decine di password o ‚Äì peggio ‚Äì usarne una unica per tutti.\n\nInfine, se ci√≤ non fosse gi√† abbastanza, **ecco l‚Äôincentivo economico**: grazie all‚Äôintegrazione del protocollo Lightning Network, ogni client Nostr permette di **monetizzare con i contenuti pubblicati**; gli utenti decidono di premiare alcuni post tramite Zap, micro pagamenti anche di frazioni di centesimi, fino ai macro pagamenti.\n\n\n## Perch√© Nostr\n![](https://image.nostr.build/611d8b6bdb6927697e6a1892a3ab93ea84dcf9cb4fb2897061924af1f1e0649d.jpg)\nPer chiunque abbia qualcosa da dire, frivolezze o concetti profondi, Nostr √® quello che a Napoli in maniera geniale viene definito il ***fattoapposta!***\n\nEssere protagonisti in prima persona delle proprie esperienze social-web, provare l‚Äôebbrezza di essere gli unici proprietari dell‚Äôidentit√† digitale e dei contenuti prodotti nonch√© monetizzarli per merito e non per algoritmo, √® **una scossa che vale davvero la pena di provare**.\n\nAttualmente Nostr potrebbe apparire come una piccola bolla, uno spazio abitato da strani esseri che parlano di cose aliene come libert√† finanziaria, incensurabilit√† e decentralizzazione.\nMa si pu√≤ usare il tempo concesso da un‚Äôadozione prematura per conoscere il protocollo e capirlo.\n\nSi potr√† sempre tornare ad abitare il Web2.0, uno spazio dove le idee vengono censurate o dove gli utenti che si dichiarano progressisti ed inklusivi se ne vanno perch√© in disaccordo con l‚Äôesito di un‚Äôelezione regolare e demograttika\n---\nRisorse per approfondire:\ni) https://nostr-resources.com/\nii) https://nostr.net/\niii) https://nostr.how/en/nostr-projects\niv) https://nostrapps.com/","sig":"99e3060560e38519a372bd10d1bfc5746df66d51a18bf6ceba71ade9a8df73caca24e734ab839820a601c00be93b6ee96cc439b642a530a964029af66de6dc71"},"naddr1qqxnzdesxscn2dfjxv6ngv3kqyt8wumn8ghj7un9d3shjtnwdaehgu3wvfskueqzyp56pgy3pdy6rklmcnj0zr0j9dvqdt65qw3zsfnk8rewjzxfdq3g6qcyqqq823cf89y33":{"kind":30023,"id":"fc06daf35829a050e03e9848bcc32aa10ba4d0a0a3ec58440cc8d309390eb12d","pubkey":"69a0a0910b49a1dbfbc4e4f10df22b5806af5403a228267638f2e908c968228d","created_at":1704160098,"tags":[["d","1704155235426"],["title","Day 2 Spam "],["summary","Censoring spammers"],["published_at","1704160098"],["t","strfry"],["t","stryfry-policies"],["t","relay"],["t","spam"],["image","https://bitcoiner.social/static/attachments/2Hr7g_spam-day-2.jpg"],["zap","69a0a0910b49a1dbfbc4e4f10df22b5806af5403a228267638f2e908c968228d","wss://purplepag.es","90"],["zap","7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c","wss://purplepag.es","10"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qqxnzdesxscn2dfjxv6ngv3kqgsxng9qjy95ngwml0zwfugd7g44sp402sp6y2pxwcu096gge95z9rgrqsqqqa28z9sr35"],["client","31990:7d4e04503ab26615dd5f29ec08b52943cbe5f17bacc3012b26220caa232ab14c:1687329691033","wss://relay.nostr.band","web"],["t","encoding"]],"content":"Here's a lazy stream of conciousness post about relay spam. Before I hit publish I remembered how bad it got last year. I didn't have time to do much about it (still don't, really). At one point I had written an awful python script that block any post with a URL. But since then relays software has become exponentially more effecient and there's nice tools for dealing with spam. The clients are blocking spam too, which is good for the users.\n\nSpam is still a big ugly problem on nostr. Since it's New Years, let's do a quick scan on our relays to see what we can do about it.\n\nFirst we'll scan for even kind 1984 (reports).\n\n```shell\ndoas -u strfry strfry export --since $(date -d \"90 days ago\" +%s) | jq -r 'select(.kind == 1984) | .tags[] | select(.[0] == \"p\") | .[1]' | sort | uniq -c | sort -n | tee /tmp/1984-npubs.log\n```\n\nBasically, this is a dumb expression that dumps everything from the last 90 days into jq and to let us parse out our 1984 events. It's lazy and wasteful but finishes in a few seconds so no big deal. The jq expression returns just the hex pubkeys for the users being reported. The output looks like:\n\n```\n     10 9c2e0a870413773cb915b9c9cd2e1cbd17e53ae2b0a86aba5e5bf0fc13c420d2\n     10 bda0bd9c352de8b361056c1fefc10cabbe8ef4b5a1017e0fd1c59f2f80821d4d\n     10 bf8118eda1d08f5a537831324e14857e82783f534d03aa48e41c9962afd92a6c\n     10 f068b10af9c218197986e7c7da4180d9038b5d821131c8b434eba4622a8a1d5c\n     11 3a161cf13100d001ebbfabe35dd2391f5d4c8ea1455a73a79aac29af8fd7d077\n     12 4c532215e0750f8a281a0695dd8cb9da214eb7af0ab0ca2ce673c753a489dcdd\n     14 782d41077767870084fe85fb24f9aaa9069afc83f39fb551cc2bbc740e15b3e0\n     18 b74b99e8fc8fa2f0f63d6afab29d9f18dac7637c596cd790ffad7c2f57f71607\n     18 e7b5414bba266d148f6a855511e9d6d433c2ca383269fe0e5af8067ba7142cc0\n     19 8617d46b5eefa61d07595915c096a19b9c6bb55909e67ea46a42c75f61cdae5d\n     20 eb8d73d31477612d3db55719b1705d57192e89292efd0b214c4f8ca49d04b3ac\n     24 496d38f69865530028c7d212314d3ce6d605f3528a6c4020a067c9b5bc49fb13\n     28 06281c8118cdeef1dd67fe42875909993bc21623b4473327c291d027f6a8a10f\n     31 d06632112c87b10ab2fc4f70fcd6d46f596f2657a48d9efc82f84534ee0e88a2\n     33 88cc77b3ec1b911de3bc94063c88dc0032152deb3f2b855819f6c06e211533e9\n     39 c8b40ae7ce27ef4ea21f84e1a9d375068a1c95d38889aa6d7cf5c92591a0f9fc\n     42 4fc232dd5fa7e68859166cb8f8fabf3b84fde93ac957d44d37a848fb756d5590\n    113 620fa6800af4ceb8d7be27dcf6df50c15402a050b383b501d5fae83346de17ab\n    173 d4a2f2a06ac25d8cd496ca7e04260bd645a2705ce0d5a30c245ab9fb4def3159\n    183 fb7d9edb022881ac80da6369832f67e300f06d8524a2a55d1aa88aed51b481ba\n```\n\nThe pubkeys are sorted by the amount of reports, the last one has the most reports. Let's start looking at their content. Here's the guy with 173 reports:\n\n```shell\ndoas -u strfry strfry delete --filter '{\"authors\":[\"d4a2f2a06ac25d8cd496ca7e04260bd645a2705ce0d5a30c245ab9fb4def3159\"]}'\n```\n\n    \" ‚òÄ The REDACTED Token Distribution has now started. \\n\\n ‚òÄ https://REDACTED-10-10 Claim your free $REDACTED.\"\n    \" ‚òÄ The REDACTED Token Distribution has now started. \\n\\n ‚òÄ https://REDACTED-10-10 Claim your free $REDACTED.\"\n    \" ‚òÄ The REDACTED Token Distribution has now started. \\n\\n ‚òÄ https://REDACTED-10-10 Claim your free $REDACTED.\"\n\nOh look, it's the exact same post hundreds of times. I've been on the receiving end of spam like this before and found it to be super annoying. What an asshole! He should get off of our lawn. Seems like some censorship is in order.\n\nSince we use [strfry-policies](https://gitlab.com/soapbox-pub/strfry-policies), I can add him to the banlist. In our policy file `entrypoint.ts` we have a line like this: `import bannedPubkeys from './pubkeys.banned.ts';` which we then use later in a policy rule that looks like `[pubkeyBanPolicy, bannedPubkeys],`. The actual file looks like this:\n\n```typescript\nimport { nip19 } from 'https://esm.sh/nostr-tools@1.8.4?pin=v115';\n\nconst bannedNpubs = [ \n  \"npub14mpd34q94dpfzjc0g72602vnmpetfnepvumv6p86mzymkpdvhzmswh9h0m\", // cryptonews w/ Bitcoin logo\n// etc, etc..\n\n]\n\n// https://github.com/nbd-wtf/nostr-tools#encoding-and-decoding-nip-19-codes\nconst bannedNpubPubkeys = bannedNpubs.map(pk =\u003e String(nip19.decode(pk).data));\n\nconst bannedPubkeys = [ \n  \"06281c8118cdeef1dd67fe42875909993bc21623b4473327c291d027f6a8a10f\", // impersonator \n  \"daf8436ae707b5214c18bb5325d90b1dddbe9f4c1320e57879f655455dea7591\", // impersonator npub1pyp9fqq60689ppds9ec3vghsm7s6s4grfya0y342g2hs3a0y6t0segc0qq\n  \"044b4adfe4a112ef7f7f43861bb4adf7a9ea60cde0ddaedf0220573b19d1b14e\", // impersonator npub1uescmd5krhrmj9rcura833xpke5eqzvcz5nxjw74ufeewf2sscxq4g7chm\n  \"becec2df63d89d5916d122e446a68c53ec64ef6ea47fd082a47e994960040378\", // impersonator npub1qy2tkywa36ufh76qv62snv4953eayufxufav4evz2le06lxe2amqpxavna\n  \"c8b40ae7ce27ef4ea21f84e1a9d375068a1c95d38889aa6d7cf5c92591a0f9fc\", // Adam Back impersonator\n  \"fb7d9edb022881ac80da6369832f67e300f06d8524a2a55d1aa88aed51b481ba\", // $STRK spambot\n  \"d4a2f2a06ac25d8cd496ca7e04260bd645a2705ce0d5a30c245ab9fb4def3159\", // $ZRO spambot\n  \"4fc232dd5fa7e68859166cb8f8fabf3b84fde93ac957d44d37a848fb756d5590\", // $OP spambot\n  ...bannedNpubPubkeys\n]\n\nexport default bannedPubkeys;\n```\n\nWhat's impressive is how that much spam was posted to the relay to begin with. We have a rate limit policy that should have prevented 99% of those posts if he was writing from the same network address. Clearly he did not do that, and so the ratelimit did not catch him in the act. There's another strfry policy called `antiDuplicationPolicy`. I didn't think that'd be too useful because it's pretty trivial to circumvent, but it would've stopped this particular spammer. So let's enable that by updating `entrypoint.ts`.  strfry watches the plugin file and will automatically reload it when the file changes. Since we already updated the banlist, it'll start using the updated version of that too now.\n\nThere's still the matter of all that spam sitting on the relay. We can remove that too:\n\n```shell\ndoas -u strfry strfry delete --filter '{\"authors\":[\"d4a2f2a06ac25d8cd496ca7e04260bd645a2705ce0d5a30c245ab9fb4def3159\"]}'\n...\n2024-01-02 00:12:56.153 (   0.072s) [main thread     ]INFO| Deleting 3635 events\n```\n\nOof. It's amazing he sent that much spam. We have stfry-policies configured to block scammers just like him, and we don't appear to have slowed him enough.\n\nDoing all this manually one at a time is pretty tedious, so I'm starting on a quick and dirty python script to help with the task. There's other types of report events, such as impersonators. So I'll need to have the script identify what type of reports an account is getting to give me a better hint as to what they might be up to.\n\nSometimes these spam policies inconvenience users. I'd like to spend some time working on a web of trust reputation system that'll obviate that. The constraining factor here is always time though.","sig":"f951e1cb926e73fd07c01c010b4d2b3caf410d98257f7135d75e5f9e779cfc13cb05f63e7a23bcb830a102fd5f63371831b05ef732545fe4fde17b20c3994fdd"},"naddr1qqyrgdmxxpjrscnxqyg8wumn8ghj7mn0wd68ytnhd9hx2q3qkwcatqynqmry9d78a8cpe7d882wu3vmrgcmhvdsayhwqjf7mp25qxpqqqp65w89d3p8":{"kind":30023,"id":"a76d9d497fdf884761335b511e78f9b8ae7584bc14f4c17759f29f9dfd544af8","pubkey":"b3b1d5809306c642b7c7e9f01cf9a73a9dc8b363463776361d25dc0927db0aa8","created_at":1679336808,"tags":[["client","blogstack.io"],["title","What the Fuck is Nostr?"],["image","https://loveisbitcoin.com/wp-content/uploads/2023/01/carla-nostrich-1152x1536.jpg"],["summary","Carla from the Cryptocouple, Year of the Nostrich."],["t","nostr"],["t","client"],["t","relay"],["t","guide"],["t","howto"],["d","47f0d8bf"],["published_at","1679336808"]],"content":"Nobody knows. But all the early-adopters in bitcoin are using it, and even Jack from Twitter has the hots for it. He started a significant fund for it and is very active on there.\n\n![](https://loveisbitcoin.com/wp-content/uploads/2023/01/1500x500.jpg)\n\nMaybe because it reminds him of early-days twitter. Which was twittr back then.\nThe awesome thing about Nostr is that you get to keep your own keys! And lose them, with no chance of account retrieval, just like bitcoin. Not your keys, not your tweets.\n\nI‚Äôm kidding mostly, but yes some self-custody is required. There‚Äôs an option not to give away your private key by giving your very same private key to GetAlby and logging in through the plugin. That‚Äôs what I use, and it works.\n\nI managed to make an account and follow some plebs. It feels like twitter, a bit harder to use but it‚Äôs getting better with each update.\n\nThere are no good apps yet, I use astral.ninja on desktop. William Casarin makes the Damus app. There‚Äôs no proper android app and the iphone app is through the Testflight.\n\n**EDIT**: There are now some good apps, Damus on iPhone is brilliant from what people tell me. And the best Android app is Amethyst. [https://play.google.com/store/apps/details?id=com.vitorpamplona.amethyst\u0026hl=en\u0026gl=US](https://play.google.com/store/apps/details?id=com.vitorpamplona.amethyst\u0026hl=en\u0026gl=US)\n\nThis is my public key\n*npub1xnq22v5rhtx4edkyt7ds27l2qh0mya3n8h83f6d3va5qkhfk8rjqve0gr0*\n\nThis is how you follow people on Nostr, search for that and you‚Äôll find my username @glowleaf. I‚Äôve also validated my account with nostrplebs.com where you can pay some sats to get verified.\n\nThe best feature of Nostr is that it works inherently with lightning. Just add lightning addresses on your profile‚Äôs bio and people can send you sats, paste a lightning invoice and the client will translate it to a proper QR code ready to click or scan, and now we‚Äôre getting a button next to likes that will allow us to send sats to each other for adding value to the community.\n\nAll wonderful stuff, built on lightning.\n\n**EDIT**: Nostr has gone insane with Zaps. Zaps are just lightning payments made with a few taps directly on a specific note. The note shows how many sats it has been zapped to, making it addictive. The wallets that support NIP-57 for now are:\n\n* strike.army\n* vida.page\n* Bitcoin Jungle\n* ln.tips (LightningTipBot)\n* Geyser\n* Bitcoin Beach\n* Wallet of Satoshi\n* Stacker.News\n* Getalby.\n\n![](https://loveisbitcoin.com/wp-content/uploads/2023/01/nostr-nostrich-1536x1536.jpg)\n\nAnd finally, you better follow the Nostrich. [https://mobile.twitter.com/Nostr_Ostrich](https://mobile.twitter.com/Nostr_Ostrich)\n\nIf you‚Äôre curious how it feels tweeting on nostr, here it is in a nutshell:\n\n![](https://loveisbitcoin.com/wp-content/uploads/2023/01/FmzpxEFagAEdVXC.jpg)\n\nHere‚Äôs a proper article with a guide on how to use Nostr.\n\n[https://www.btctimes.com/news/what-is-nostr-and-how-do-i-use-it](https://www.btctimes.com/news/what-is-nostr-and-how-do-i-use-it)\n\n# And here‚Äôs the best guide for Nostr Newbies:\n\n[https://uselessshit.co/resources/nostr/](https://uselessshit.co/resources/nostr/)\n\nSo, will bitcoiners really flock to Nostr? It‚Äôs too early to tell. Truth is that it‚Äôs usable but requires some technical knowledge, so it‚Äôll stifle adoption.\n\nI‚Äôm hopefully optimistic and the apps do get better with each update. There‚Äôs a buzz around it, and Jack is certainly helping keep this momentum going. At some point it might hit the mainstream as the new twitter, who knows?\n\nOriginally published at [https://loveisbitcoin.com/what-the-fuck-is-nostr/](https://loveisbitcoin.com/what-the-fuck-is-nostr/)","sig":"c64efc9caa03f20737badcd00aae7e5ffe514e373d327fbc497a926917518cdaccf4c3b10639791e7e8c80c1af43411e0d50448d5f18259264775ce159285408"},"naddr1qqyrgetpxuun2vrpqyxhwumn8ghj7mn0wvhxcmmvqgsyt3qly8su7u2l5mvu5g9cuqp22axm0w6fa9hw3xp5cek6c4zxk7srqsqqqa28pxu4u3":{"kind":30023,"id":"7cb7559277f22ac179aaa563080c07c5f38b83ae22d36bbc1a5aae0515f26268","pubkey":"45c41f21e1cf715fa6d9ca20b8e002a574db7bb49e96ee89834c66dac5446b7a","created_at":1677815480,"tags":[["d","4ea7950a"],["published_at","1677815480"],["title","Introduce fly-castle, a gui relay for flycat"],["image","https://nostr.build/i/nostr.build_ab1a66e29abe407286f59a3f77462535484262e86ecac10297a3d304c516b718.png"],["summary","FlyCastle is a desktop app written in rust to build a simple interface for users to handle Nostr relays effortlessly."],["dir","flycat"],["t","flycastle"],["t","flycat"],["t","client"],["t","relay"]],"content":"![img](https://nostr.build/i/nostr.build_18b9348fc9bbcef5d9c9bd4f78966a9ad70d514c9685ba1309180039c314ae86.png)\n\ntonight I just [release](https://github.com/digi-monkey/fly-castle) the very first rough version of fly-castle, it is a very simple desktop app to provide a GUI for your own private backup relay written in Rust. the core relay implementation is forked from [scsibug/nostr-rs-relay](https://github.com/scsibug/nostr-rs-relay.git), I might touch the code there to experiment some ideas later. \n\nCurrently, I only build for macOS since that's the only OS on my laptop, but maybe I will find a windows computer to build windows one.\n\nHere is how I would love to use it:\n\n## macOS\n\n1. download the software from [here](https://github.com/digi-monkey/fly-castle/suites/10948132678/artifacts/554018902)\n2. unzip it, you will get a file named `fly-castle`\n3. create a folder named `my-relay` and put `fly-castle` into the folder\n4. Start the relay by running the following command on your terminal:\n```sh\ncd my-relay\nsudo chmod 755 fly-castle\n./fly-castle\n```\n5. Open flycat website, click the private backup menu on the left side of the page. add the ws://localhost:8080 to your relay via the right side of the new page.\n\n6. if you want to stop running your little relay, just close the window of fly-castle, it is that simple.\n","sig":"3a75d87fafd44bb2259bc6e04b9322b75871fb01705cb66bcffd8d31747588c8c9af7a2eb97dcd45c384c442e4204be32ae87f910ca7afb047715d1861b91c4f"},"naddr1qqyryefnxdjnwdmxqyt8wumn8ghj7un9d3shjtnwdaehgu3wvfskueqzyp35h5v7tjrakgt92hypf0ugue4vu96cq55356lfpv26cwezgldfkqcyqqq823csr0ang":{"kind":30023,"id":"a07b3ddbd3cafc5f95a7131200ca7d674e0387656851a3aac8031b5624441335","pubkey":"634bd19e5c87db216555c814bf88e66ace175805291a6be90b15ac3b2247da9b","created_at":1676448734,"tags":[["client","blogstack.io"],["title","My nostr relay servers."],["summary","My nostr relay servers."],["t","nostr"],["t","relay"],["d","2e33e77f"],["published_at","1676448734"]],"content":"Global relay:\n* wss://relay.nostr.wirednet.jp\n\nJapan region only:\n* wss://relay-jp.nostr.wirednet.jp\n","sig":"9a4af31f677e24181bb587e46ef1f5f6894322262585846f00c55aa5d5d499397bf967ecb757ee7467c16b0722070e4365e995e7305f4002f4a471291c33bf57"},"naddr1qqyxgvfjvejxvdmyqyt8wumn8ghj7un9d3shjtnwdaehgu3wvfskueqzyrngzaznnrjyctkk0ugk5q4unefav0tauh4jvqujy3yxsqds4s7rjqcyqqq823cfalq28":{"kind":30023,"id":"73cbdc7ab84a4881f9eae8a9a215f8dd953a87b2dfae945641af6455042ea345","pubkey":"e681745398e44c2ed67f116a02bc9e53d63d7de5eb26039224486801b0ac3c39","created_at":1689519942,"tags":[["client","blogstack.io"],["title","Relay Message Architecture: A Comparative Analysis with Federated Servers and Peer-to-Peer Networks"],["t","dwn"],["t","ssi"],["t","nostr"],["t","relay"],["d","d12fdf7d"],["published_at","1689519942"]],"content":"\n\n## Introduction:\n\nIn the evolving landscape of network communication, various architectures have emerged, each with its unique strengths and weaknesses. Among these, the relay message architecture stands out for its potential to revolutionize how we communicate and share data. This article will delve into the relay message architecture, comparing it with federated servers and peer-to-peer networks, and explore the role of decentralized web nodes in this context.\n\n## Understanding Relay Message Architecture:\n\nRelay message architecture is a network topology that has been around for decades, powering telecom networks. It involves the use of relays, which are intermediary nodes that facilitate communication between different network nodes. In the context of social networks, relay architecture offers a unique solution to the challenges posed by other network architectures.\n\nIn a relay architecture, a client interacts with multiple relays, pushing and pulling data as needed. The relays can also forward messages from one to another, creating a network of interconnected nodes. This architecture is reminiscent of the telecom industry's use of relays to replicate and push signals across vast networks.\n\n## Comparative Analysis:\n\n1. **Peer-to-Peer Networks:** In a peer-to-peer network, each node, or user, must be online and host their own server. This architecture is fully decentralized but has proven to be challenging due to the technical expertise required and the cost of running servers. The number of connections grows exponentially, adding to the complexity.\n\n2. **Federated Servers:** Federated servers offer a step up from peer-to-peer networks. Users are still dependent on a server, but they have the option to run their own. However, the servers need to cooperate and create federated links. If a server goes down, users risk losing their identity or data. While federated servers are an improvement over a single server model, they still have their downsides.\n\n3. **Relay Message Architecture:** Relay architecture offers a solution to the problems posed by the other two models. Users can interact with multiple relays, either hosting their own or using those hosted by others. The communication happens directly between the relay and the client, with the client maintaining a list of trusted relays. This architecture allows for better interconnectivity without the need for a large address book of connections.\n\n## The Role of Decentralized Web Nodes:\n\nDecentralized web nodes (DWN) play a crucial role in relay architecture. They can be used to build social networks, trust spanning, and data transactions. The client can interact with multiple DWNs, using different identities for different nodes or the same identity for multiple nodes. The nodes can be interconnected or independent, with the client being the primary entity that connects multiple nodes.\n\n## Cooperation Models:\n\nThe cooperation model in relay architecture is client-centric. The client is the main entity that interacts with multiple relays, pushing and pulling data as needed. This model allows for greater flexibility and control for the user, as they can choose which relays to trust and interact with. This is a significant shift from the server-centric models of federated servers and peer-to-peer networks, where users are more dependent on the server owners.\n\n## Conclusion:\n\nRelay message architecture, with its unique approach to network communication, presents a promising solution to the challenges posed by other network architectures. Its client-centric model, coupled with the use of decentralized web nodes, offers a more flexible and user-friendly approach to data sharing and communication. As we continue to explore and develop new ways of communicating, relay message architecture is likely to play a significant role in shaping the future of network communication.\n","sig":"ea51e8d4456798d386a84f2039b65341dbe5c39f501ccdc0531b4b079243b58c4153814661fc34a1e3bc1dcbfa7839cd59d24368b2c7e903bbf981c4c140b8a1"},"naddr1qqzkvet9v3eszyrhwden5te0dehhxarj9emkjmn9qgs87hptfey2p607ef36g6cnekuzfz05qgpe34s2ypc2j6x24qvdwhgrqsqqqa28gt8u60":{"kind":30023,"id":"9b1ebfa5f2cf866a6d7c687f62778617b9f3cb7b6b845807ffc31b3f8f71fa98","pubkey":"7f5c2b4e48a0e9feca63a46b13cdb82489f4020398d60a2070a968caa818d75d","created_at":1685122995,"tags":[["d","feeds"],["title","Feeds: Nostr Content Curation that Rewards"],["summary","A new Nostr tool that brings content curation to the next level was released. Let's dive in to see how it works."],["published_at","1685015198"],["t","Nostr"],["t","content"],["t","curation"],["t","nostr features"],["t","relay"],["t","moderation"],["image","https://nostr.build/p/nb9417.png "]],"content":"A new tool\n----------\n\nA new Nostr tool was released by the invisible Nostr warrior nostr:npub1xdtducdnjerex88gkg2qk2atsdlqsyxqaag4h05jmcpyspqt30wscmntxy, a man behind [nostr.band](https://nostr.band/). Nostr Band empowers renowned Nostr clients like [Snort](https://snort.social/), [Amethyst](https://github.com/vitorpamplona/amethyst), and [Iris](https://iris.to/global) with its backend tools. Moreover, Nostr Band serves as a versatile Swiss Army knife for end users, offering a wide range of services and features including [search](https://nostr.band/), [statistics](https://stats.nostr.band/), [Nostr addresses](https://nip05.nostr.band/), and more. Notably, the tool incorporates a robust relay system, previously discussed in [one of my comprehensive guides](https://lnshort.it/nostr-relays). I invite you to explore the possibilities this service presents by visiting [https://nostr.band/](https://nostr.band/).\n\nBut today, I am thrilled to share the latest development in the ecosystem of Nostr Band: Feeds.\n\nContent curation on Nostr¬†\n--------------------------\n\nNostr, being a relatively young protocol, has primarily focused on laying the foundation and ensuring core functionality. As a result, the implementation of certain features and possibilities has taken time. One such area that has been lacking is content curation. Until now, end users have had limited options to shape the content they consume, relying on [tweaking relay bundles](https://lnshort.it/nostr-relays) or using specific clients that offer more flexibility in adjusting feeds, such as [Primal](https://primal.net/home).\n\nAmong the available tools is the powerful microapp by nostr:npub1zuuajd7u3sx8xu92yav9jwxpr839cs0kc3q6t56vd5u9q033xmhsk6c2uc, known as [listr.lol](https://listr.lol/). It allows users to create and manage lists to curate content from participating sources. However, its integration into popular Nostr clients is still a work in progress, making its usage somewhat inconvenient. Besides, current implementations mostly focus on profile lists, which limits one's ability to do topic-based curation..\n\nAnother option is [Zapddit](https://zapddit.com/feed), a Reddit-like client developed by nostr:npub1ltx67888tz7lqnxlrg06x234vjnq349tcfyp52r0lstclp548mcqnuz40t. Zapddit enables users to follow desired topics by subscribing to hashtags and ignore some conversations by muting unwanted hashtags. However, reliance on hashtags poses limitations as not all users consistently utilize them, potentially resulting in missed content or exposure to undesired content.\n\nUnique approach\n---------------\n\nFeeds by Nostr.Band bring a whole new way to curate Nostr content, giving readers the power to customize their information intake and letting curators create unique information flows while earning recognition for their efforts. Remember when I mentioned how there aren't many tools out there that let you shape your feeds? Well, it's true! We all have different tastes when it comes to the content we want to see. Just think about the variety of traditional platforms we have -- Twitter for quick and snappy updates, Instagram for breezy visual content, and so on. But do we really need a separate app for every mood? I don't think so.\n\n\u003chttps://nostr.build/p/nb9416.jpg\u003e\n\nEnter Nostr Feeds, the solution that lets you curate your own content experience without the need for multiple apps. Tailor your feed to your preferences -- whether you crave bite-sized updates, popular notes or captivating visuals. Say goodbye to one-size-fits-all feeds and hello to a whole new level of content curation. Subscribe to the feeds that interest you and receive curated content tailored to your preferences. Make your feed truly yours!\n\nSounds interesting? Let's dive into how this works!\n\n### The consumer¬†\n\nAs a content consumer all you've got to do is add a feed to your relays list and start receiving corresponding content in your Global feed a.k.a. \"The Universe\". Don't want to follow the feed you subscribed to? You are free to remove the relay from the bundle you use. Explore an ever-growing collection of feeds on [this dedicated page](https://feeds.nostr.band/index.html). More creators are joining in to provide their own curated content, expanding your options.\n\nI'd like to show you a simple example of how this works by sharing a feed I've created to quench the thirst of the community for high quality memes. Hungry for memes? Simply add **wss://feeds.nostr.band/meme** to your relays list. Now your Global feed will display the memes üê∏ I am handpicking with love üíú especially for you. Moreover, you no longer have to follow every single meme connoisseur to have the best memes available on Nostr at your fingertips. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9408.gif\u003e\n\nBelieve it or not, there's more to it! Let me share a little trick that could revolutionize how we engage with content. But first, let's dive into an example.\n\nPicture this: you've had a long day in the fiat mines... Even the greatest philosophers need a break to clear their heads. There is no better way than indulging in a fresh dose of memes, don't you agree? To immerse yourself in the world of memes, simply mute all the relays you are connected to in your Global feed and only keep the connection to **wss://feeds.nostr.band/meme**. Here's how it's done on Damus:\n\n\u003chttps://nostr.build/p/nb9411.gif\u003e\n\nThat's it. You've got your desired feed delivering the content you want without having to scroll through other topics, which you don't feel like consuming at the moment.\n\nOther useful feeds include Pictures (**wss://feeds.nostr.band/pics**) and Popular (**wss://feeds.nostr.band/popular**). As I mentioned, you will see many new ones pop up as this tool gains popularity. \n\n### The curator\n\nImagine the possibilities of creating your very own feed. Whether it's for a close-knit circle of friends or aspiring to be a global curator in the Nostr Universe, the power is in your hands. Are you an art connoisseur, a car enthusiast, or an educator? Craft your own feed and guide your tribe towards a world of high-quality, handpicked content.\n\nIn a world inundated with information, separating the signal from the noise is a priceless skill. With limited tools available to end users, being able to offer truly valuable content makes you a true champion in your field. By curating your feed, you become a beacon of knowledge, guiding others to the most valuable and selective content.\n\nIt's time to redefine content consumption and elevate the Nostr experience. Join the ranks of content curators and make a difference in the sea of excessive information.¬†\n\n#### Creating a feed\n\n1. Visit \u003chttps://feeds.nostr.band/index.html?create=true\u003e\n\n2. Fill up required fields\n\n\u003chttps://nostr.build/p/nb9414.png\u003e\n\n3. Pay the invoice to gain access to your own relay.\n\n\u003e Unlocking a feed comes with a monthly subscription, granting you access to a powerful tool backed by the nostr.band relay and user-friendly UI tools. This infrastructure ensures seamless and effortless curation at your fingertips.\n\nBeing in its early stages, feeds' potential for enhancements is boundless. By getting in on the ground floor, you position yourself to reach new heights before others.\n\n\u003chttps://nostr.build/p/nb9415.png\u003e\n\n4. That's it. You've got your feed ready to collect and share the best content!\n\n#### Managing a feed\n\nWhile tools to simplify curation process are being developed as we speak, here are the steps currently required to manage your feed:\n\n1. Copy the `noteId` of an event you'd like to add to your feed (or search for it on nostr.band)\n\n2. Visit nostr.band and paste the `noteId` into the search field\n\n3. Click on the note you'd like to add to the feed\n\n4. Press the **Label** button below the note and select the label that corresponds to the feed you'd like to add the note to. \n\n\u003chttps://nostr.build/p/nb9413.png\u003e\n\n\u003e üí° All notes labeled by you will be highlighted green for your convenience.\n\nCongrats! You now have your own Nostr feed you can curate. Share your feed in the comments below -- let's see who comes up with the most creative and useful feeds.\n\n\u003e ‚ö°Ô∏è I'll spare 21k sats for the feed operators with the most interesting feed ideas. To get some sats, share your feed in the comments and make sure to maintain it. I'll¬† check back in a week or so to zap the most impressive feed operators.\n\nBenefits of running own feed\n----------------------------\n\nApart from being a good-old uncle Jim helping out the circle of close friends and family receive curated content, you can potentially benefit from increased exposure in the community and even earn sats for running your own quality feed. There already are a few options in this regard (keep in mind that there are many more to come):\n\n1. As you spin up your own feed you automatically turn into a Nostr relay operator and become discoverable in the relay info tab. This helps increase your discoverability and allows users, who value your input, zap your profile.\n\n\u003chttps://nostr.build/p/nb9418.png\u003e\n\n2. Some clients, like Snort, support a so-called [Zap Pool](https://snort.social/zap-pool), which allows users to allocate a desired percentage of zaps to favorite infrastructure contributors. As by spinning up a feed you become a relay operator, you may become discoverable on Snort's Zap Pool and start receiving sats with every zap sent by Snort users who enabled this feature.\n\n\u003chttps://nostr.build/p/nb9419.png\u003e\n\n\u003e See the next section for upcoming features which will help you monetize your efforts.\n\nPerspectives\n------------\n\nToday Nostr Band Feeds can be considered a playground for the inquisitive minds. They require some skills and determination to operate and lots of improvements are yet to be implemented. I believe this idea is powerful and will gain traction, pushing Nostr client developers to natively integrate the tools necessary to make the feed runners' workflow silky smooth.\n\nAmong the expected improvements are:\n\n-   Supporting multiple maintainers to run the feed\n\n-   Feed management automation\n\n-   Paid feed subscriptions\n\n... and more\n\nAs you can see, we are still early, which makes everyone who jumps aboard now a first-mover. Embrace the power of Nostr and become the curator to grow your tribe and help everyone around you receive truly valuable content.\n\nBelieve me, Nostr users reward proactive and determined creators like nobody else does. This is why our community is so strong; this is why we are winning! \n\n* * * * *\n\n-   Enjoy memes? Don't forget to add wss://feeds.nostr.band/meme to your relay bundle.¬†\n\n- Want to learn about the best relay set up out there? Have a look at my guide on Nostr relays [here](https://lnshort.it/nostr-relays).","sig":"96183c56a0976668cc0fa9ea49ad40bf3c0a63022d23ae4f9c493d533acfeb44c35547665ca48ad162c37f8fbef2cf3bea9c37075413386dba1f014272218ed2"}}