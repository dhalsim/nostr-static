{"naddr1qq2j6ezsgu69j7n92cmxxmfsgyeyyvjtxfuk7qgkwaehxw309aex2mrp0yh8qunfd4skctnwv46qygrwvjurc8m8f7cq5hces9kzj7myzjlk0uq4398qfh2vv4lfgypwaqpsgqqqw4rsklwcek":{"kind":30023,"id":"e053bd17c3e36ea81d69ae382aefedf0f53188fc4f95e67b21ce35a38dc9a1e2","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745439814,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745183349"],["d","-dPG4YzeV6cm0A2B2K2yo"],["image","https://image.nostr.build/f708db07b85c002b20b3159b48447d51cbcb0bae0f5717ce6dbc060580c8b35d.jpg"],["title","How to Run Your Own Nostr Relay on Android with Cloudflare Domain"],["summary","Step-by-step guide to running a personal Nostr relay on Android using Citrine and Cloudflare Tunnels. Learn how to set up secure WebSocket connections, manage relay lists, and maintain a reliable private relay with your custom domain."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","nostr"],["t","relay"],["t","citrine"],["t","cloudflare"],["t","tunnel"],["t","outbox"],["p","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","mention"]],"content":"# How to Run Your Own Nostr Relay on Android with Cloudflare Domain\n\n## Prerequisites\n1. Install Citrine on your Android device:\n   - Visit https://github.com/greenart7c3/Citrine/releases\n   - Download the latest release using:\n     - zap.store\n     - Obtainium\n     - F-Droid\n     - Or download the APK directly\n   - **Note:** You may need to enable \"Install from Unknown Sources\" in your Android settings\n\n2. Domain Requirements:\n   - Purchase a domain if you don't have one\n   - Transfer your domain to Cloudflare if it's not already there (for free SSL certificates and cloudflared support)\n\n3. Tools to use:\n   - nak (the nostr army knife):\n     - Download from https://github.com/fiatjaf/nak/releases\n     - Installation steps:\n       - For Linux/macOS:\n         ```bash\n         # Download the appropriate version for your system\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-linux-amd64  # for Linux\n         # or\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-darwin-amd64  # for macOS\n         \n         # Make it executable\n         chmod +x nak-*\n         \n         # Move to a directory in your PATH\n         sudo mv nak-* /usr/local/bin/nak\n         ```\n       - For Windows:\n         ```batch\n         # Download the Windows version\n         curl -L -o nak.exe https://github.com/fiatjaf/nak/releases/latest/download/nak-windows-amd64.exe\n         \n         # Move to a directory in your PATH (e.g., C:\\Windows)\n         move nak.exe C:\\Windows\\nak.exe\n         ```\n     - Verify installation:\n       ```bash\n       nak --version\n       ```\n\n## Setting Up Citrine\n1. Open the Citrine app\n2. Start the server\n3. You'll see it running on `ws://127.0.0.1:4869` (local network only)\n4. Go to settings and paste your npub into \"Accept events signed by\" inbox and press the + button. This prevents others from publishing events to your personal relay.\n\n## Installing Required Tools\n1. Install Termux from Google Play Store\n2. Open Termux and run:\n\n```bash\npkg update \u0026\u0026 pkg install wget\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64.deb\ndpkg -i cloudflared-linux-arm64.deb\n```\n\n## Cloudflare Authentication\n1. Run the authentication command:\n```bash\ncloudflared tunnel login\n```\n2. Follow the instructions:\n   - Copy the provided URL to your browser\n   - Log in to your Cloudflare account\n   - If the URL expires, copy it again after logging in\n\n## Creating the Tunnel\n1. Create a new tunnel:\n```bash\ncloudflared tunnel create \u003cTUNNEL_NAME\u003e\n```\n   - Choose any name you prefer for your tunnel\n   - Copy the tunnel ID after creating the tunnel\n\n2. Create and configure the tunnel config:\n```bash\ntouch ~/.cloudflared/config.yml\nnano ~/.cloudflared/config.yml\n```\n\n3. Add this configuration (replace the placeholders with your values):\n```yaml\ntunnel: \u003cTUNNEL_UUID\u003e\ncredentials-file: /data/data/com.termux/files/home/.cloudflared/\u003cTUNNEL_UUID\u003e.json\ningress:\n  - hostname: nostr.yourdomain.com\n    service: ws://localhost:4869\n  - service: http_status:404\n```\n   - **Note:** In nano editor:\n     - `CTRL+O` and Enter to save\n     - `CTRL+X` to exit\n   - **Note:** Check the credentials file path in the logs\n\n4. Validate your configuration:\n```bash\ncloudflared tunnel validate\n```\n\n5. Start the tunnel:\n```bash\ncloudflared tunnel run my-relay\n```\n\n## Preventing Android from Killing the Tunnel\nRun these commands to maintain tunnel stability:\n```bash\ndate \u0026\u0026 apt install termux-tools \u0026\u0026 termux-setup-storage \u0026\u0026 termux-wake-lock\necho \"nameserver 1.1.1.1\" \u003e $PREFIX/etc/resolv.conf\n```\n\n**Tip:** You can open multiple Termux sessions by swiping from the left edge of the screen while keeping your tunnel process running.\n\n## Updating Your Outbox Model Relays\n\nOnce your relay is running and accessible via your domain, you'll want to update your relay list in the Nostr network. This ensures other clients know about your relay and can connect to it.\n\n### Decoding npub (Public Key)\n\nPrivate keys (nsec) and public keys (npub) are encoded in bech32 format, which includes:\n- A prefix (like nsec1, npub1 etc.)\n- The encoded data\n- A checksum\n\nThis format makes keys:\n- Easy to distinguish\n- Hard to copy incorrectly\n\nHowever, most tools require these keys in hexadecimal (hex) format.\n\nTo decode an npub string to its hex format:\n\n```bash\nnak decode nostr:npub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4\n```\n\nChange it with your own npub.\n\n```bash\n{\n  \"pubkey\": \"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8\"\n}\n```\n\nCopy the pubkey value in quotes.\n\n### Create a kind 10002 event with your relay list:\n\n- Include your new relay with write permissions\n- Include other relays you want to read from and write to, omit 3rd parameter to make it both read and write\n\nExample format:\n\n```json\n{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://your-relay-domain.com\", \"write\"],\n    [\"r\", \"wss://eden.nostr.land/\"],\n    [\"r\", \"wss://nos.lol/\"],\n    [\"r\", \"wss://nostr.bitcoiner.social/\"],\n    [\"r\", \"wss://nostr.mom/\"],\n    [\"r\", \"wss://relay.primal.net/\"],\n    [\"r\", \"wss://nostr.wine/\", \"read\"],\n    [\"r\", \"wss://relay.damus.io/\"],\n    [\"r\", \"wss://relay.nostr.band/\"],\n    [\"r\", \"wss://relay.snort.social/\"]\n  ],\n  \"content\": \"\"\n}\n```\n\nSave it to a file called `event.json`\n\n**Note:** Add or remove any relays you want. To check your existing 10002 relays:\n  - Visit https://nostr.band/?q=by%3Anpub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4+++kind%3A10002\n  - nostr.band is an indexing service, it probably has your relay list.\n  - Replace `npub1xxx` in the URL with your own npub\n  - Click \"VIEW JSON\" from the menu to see the raw event\n  - Or use the `nak` tool if you know the relays\n    ```bash\n    nak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n    ```\n\n    Replace `\u003cyour-pubkey\u003e` with your public key in hex format (you can get it using `nak decode \u003cyour-npub\u003e`)\n\n2. Sign and publish the event:\n   - Use a Nostr client that supports kind 10002 events\n   - Or use the `nak` command-line tool:\n   ```bash\n   nak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n   ```\n\n**Important Security Notes:**\n1. Never share your nsec (private key) with anyone\n2. Consider using NIP-49 encrypted keys for better security\n3. Never paste your nsec or private key into the terminal. The command will be saved in your shell history, exposing your private key. To clear the command history:\n   - For bash: use `history -c`\n   - For zsh: use `fc -W` to write history to file, then `fc -p` to read it back\n   - Or manually edit your shell history file (e.g., `~/.zsh_history` or `~/.bash_history`)\n4. if you're using `zsh`, use `fc -p` to prevent the next command from being saved to history\n5. Or temporarily disable history before running sensitive commands:\n\n```bash\nunset HISTFILE\nnak key encrypt ...\nset HISTFILE\n```\n\n## How to securely create NIP-49 encypted private key\n\n```bash\n# Read your private key (input will be hidden)\nread -s SECRET \n# Read your password (input will be hidden)\nread -s PASSWORD\n# encrypt command\necho \"$SECRET\" | nak key encrypt \"$PASSWORD\"\n# copy and paste the ncryptsec1 text from the output\nread -s ENCRYPTED\nnak key decrypt \"$ENCRYPTED\"\n# clear variables from memory\nunset SECRET PASSWORD ENCRYPTED\n```\n\nOn a Windows command line, to read from stdin and use the variables in `nak` commands, you can use a combination of `set /p` to read input and then use those variables in your command. Here's an example:\n\n```bash\n@echo off\nset /p \"SECRET=Enter your secret key: \"\nset /p \"PASSWORD=Enter your password: \"\n\necho %SECRET%| nak key encrypt %PASSWORD%\n\n:: Clear the sensitive variables\nset \"SECRET=\"\nset \"PASSWORD=\"\n```\n\nIf your key starts with `ncryptsec1`, the `nak` tool will securely prompt you for a password when using the `--sec` parameter, unless the command is used with a pipe `\u003c \u003e` or `|`. \n\n```bash\nnak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n```\n\n3. Verify the event was published:\n   - Check if your relay list is visible on other relays\n   - Use the `nak` tool to fetch your kind 10002 events:\n```bash\nnak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n```\n\n4. Testing your relay:\n   - Try connecting to your relay using different Nostr clients\n   - Verify you can both read from and write to your relay\n   - Check if events are being properly stored and retrieved\n   - **Tip:** Use multiple Nostr clients to test different aspects of your relay\n\n**Note:** If anyone in the community has a more efficient method of doing things like updating outbox relays, please share your insights in the comments. Your expertise would be greatly appreciated!\n","sig":"abd9291f7bc17a6d396b33f5a5f8f2dd7e8c6c1fe81b41ef7c28b2132c0af012e2686e453304e78f8d9875b34dd4d6257e475b7debfd39af983cff578144a21c"},"naddr1qq8xxmr0w4jxvmrpwfjj6atxwuqs6amnwvaz7tmwdaejumr0dspzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqvzqqqr4guhmelpw":{"kind":30023,"id":"ded8a90caf258acbeb8825518190c754419d2399bd166678e241ba5a03e957a6","pubkey":"0461fcbecc4c3374439932d6b8f11269ccdb7cc973ad7a50ae362db135a474dd","created_at":1723913955,"tags":[["d","cloudflare-ufw"],["title","Secure Cloudflare with UFW"],["summary",""],["t","cloudflare"],["t","sysadmin"],["published_at","1723913953"],["alt","This is a long form article, you can read it in https://habla.news/a/naddr1qvzqqqr4gupzqprpljlvcnpnw3pejvkkhrc3y6wvmd7vjuad0fg2ud3dky66gaxaqq8xxmr0w4jxvmrpwfjj6atxwuneukw5"]],"content":"Cloudflare is controversial among FOSS/decentralization enthusiasts due to its reliance on a centralized third-party. But if you're going to use it, you should at least use it right.\n\nBy default, Cloudflare intercepts DNS traffic, but does not protect your webserver at all. This means anyone with your server's direct IP address can still attack it. Attackers might be crawling all IPs, or they might be able to figure out your server's IP if it makes outgoing requests.\n\nWhen you use Cloudflare, requests should only be coming from Cloudflare's upstream IPs: https://www.cloudflare.com/ips/\n\nTherefore, you should block traffic from all IPs by default, and whitelist only Cloudflare's IPs for the best protection. UFW is a firewall that comes installed by default on most Linux distros, so you only need to configure it.\n\n## Default rules\n\nFirst configure ufw defaults, so that outgoing requests are allowed and incoming requests are denied by default.\n\n```sh\nufw default deny incoming\nufw default allow outgoing\n```\n\n## Allow ssh\n\nNext enable ssh so you can still shell in from anywhere.\n\n```sh\nufw allow ssh\n```\n\nFor extra security, you should also edit `/etc/ssh/sshd_config` and set `PasswordAuthentication no` so only login by key is supported.\n\nYou can also whitelist certain IPs for SSH, but you can accidentally lock yourself out this way. For most sites I run, I find this is good enough security (as long as something like [Heartbleed](https://en.wikipedia.org/wiki/Heartbleed) doesn't happen again).\n\n## Enable UFW\n\nNow you're ready to enable UFW. Your SSH connection should stay intact since you allowed ssh, but this will block all incoming web requests. If you're doing this on an existing production webserver, delay this step until the very end.\n\n```sh\nufw enable\n```\n\n## Whitelist Cloudflare IPs\n\nNext we allow traffic from Cloudflare's upstream webservers. This will allow our website to work normally as long as requests go through Cloudflare first, essentially blocking any sort of direct attack on the webserver.\n\nCloudflare IPs are taken from: https://www.cloudflare.com/ips/\n\n```sh\n# ipv4\nufw allow from 173.245.48.0/20 to any port 80\nufw allow from 103.21.244.0/22 to any port 80\nufw allow from 103.22.200.0/22 to any port 80\nufw allow from 103.31.4.0/22 to any port 80\nufw allow from 141.101.64.0/18 to any port 80\nufw allow from 108.162.192.0/18 to any port 80\nufw allow from 190.93.240.0/20 to any port 80\nufw allow from 188.114.96.0/20 to any port 80\nufw allow from 197.234.240.0/22 to any port 80\nufw allow from 198.41.128.0/17 to any port 80\nufw allow from 162.158.0.0/15 to any port 80\nufw allow from 172.64.0.0/13 to any port 80\nufw allow from 131.0.72.0/22 to any port 80\nufw allow from 104.16.0.0/13 to any port 80\nufw allow from 104.24.0.0/14 to any port 80\nufw allow from 2400:cb00::/32 to any port 80\nufw allow from 2606:4700::/32 to any port 80\nufw allow from 2803:f800::/32 to any port 80\nufw allow from 2405:b500::/32 to any port 80\nufw allow from 2405:8100::/32 to any port 80\nufw allow from 2a06:98c0::/29 to any port 80\nufw allow from 2c0f:f248::/32 to any port 80\n\n# ipv6\nufw allow from 173.245.48.0/20 to any port 443\nufw allow from 103.21.244.0/22 to any port 443\nufw allow from 103.22.200.0/22 to any port 443\nufw allow from 103.31.4.0/22 to any port 443\nufw allow from 141.101.64.0/18 to any port 443\nufw allow from 108.162.192.0/18 to any port 443\nufw allow from 190.93.240.0/20 to any port 443\nufw allow from 188.114.96.0/20 to any port 443\nufw allow from 197.234.240.0/22 to any port 443\nufw allow from 198.41.128.0/17 to any port 443\nufw allow from 162.158.0.0/15 to any port 443\nufw allow from 172.64.0.0/13 to any port 443\nufw allow from 131.0.72.0/22 to any port 443\nufw allow from 104.16.0.0/13 to any port 443\nufw allow from 104.24.0.0/14 to any port 443\nufw allow from 2400:cb00::/32 to any port 443\nufw allow from 2606:4700::/32 to any port 443\nufw allow from 2803:f800::/32 to any port 443\nufw allow from 2405:b500::/32 to any port 443\nufw allow from 2405:8100::/32 to any port 443\nufw allow from 2a06:98c0::/29 to any port 443\nufw allow from 2c0f:f248::/32 to any port 443\n```\n\n## That's it!\n\nNow your server is protected from direct IP traffic, and requests must go through Cloudflare.","sig":"ea62c2bd219751fa407cfdd4d22a854d7ba7415d833fd40d8a76d95292ab2b36cdad75c329bfbfa77f22ce5f28a4a9fb3405c5e471a4c14af909a2e5b7f2c645"},"naddr1qqwxxatnw3hk6tt4wfkz6cm4wd6x7erfv9kz6er0d4skjmnnqyxhwumn8ghj7mn0wvhxcmmvqgsvt7mwejrkupzcu0k2nyvwxuxte5mkjqw9s3s9ztl9x7jxukxr3wcrqsqqqa28q0uh9h":{"kind":30023,"id":"ad7b75958b4a5e62cad6a31deff6c23d678b31272af6db6a6d025632e68a99ea","pubkey":"c5fb6ecc876e0458e3eca9918e370cbcd376901c58460512fe537a46e58c38bb","created_at":1683853198,"tags":[["client","blogstack.io"],["title","How to use your own domain with ln.tips (and any other custodial wallet) on Cloudflare"],["image","https://www.newsbtc.com/wp-content/uploads/2022/01/lightning_network-1-678x381-1.jpg"],["summary","In this guide, I will go over setting up LN Address redirection to the ln.tips wallet. These steps also apply to any other custodial wallet too."],["t","nostr"],["t","bitcoin"],["t","lightning"],["t","cloudflare"],["d","custom-url-custodial-domains"],["published_at","1683853198"]],"content":"\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/4jdxJpronew\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen\u003e\u003c/iframe\u003e\n\nhttps://ln.tips is a great wallet. It's an extremely easy to use, **custodial** Lightning wallet for the masses. Each telegram account has it's own `@ln.tips` LN Address, but sometimes you want to use your own domain.\n\nIn this guide I will teach you how to setup LN Address redirection with your own domain using [Cloudflare's Redirection Rules](https://developers.cloudflare.com/rules/url-forwarding/).\n\n---\n\n# Prerequisites\n* A Web Domain that's has Cloudflare setup on it.\n* https://ln.tips setup and ready to go.\n\t* Using ln.tips is optional. This guide will work with any other custodial wallet that provides you with an LN Address will work too.\n\n# Setup\n\n## Getting your destructured LN Address\n\n### ln.tips\nSince ln.tips provides two LN addresses to everybody, you have two options.\n1. Use your Telegram username LN address **(Not Recommended)**\n\t1. This *isn't* recommended because anyone can see your Telegram username with this method and use it to message you. It's the best choice for anonymity from other users.\n\t2. ex: `nym@ln.tips`\n2. Use your anonymous LN address **(Recommended)**\n\t1. This *is* recommended because the address is random, nobody can look this up back to your Telegram account.\n\t2. Can be obtained by running `/advanced` to the bot, and finding it under \"Anonymous Lightning address\"\n\t3. ex: `0x84e6b3ea699ab309@ln.tips`\n\nWhat option you pick doesn't matter to your next step, you're going to want to take the username portion of the address (everything before the @, like an email address) add\n`https://ln.tips/.well-known/lnurlp/\u003cusername\u003e` username goes at the end.\n\nThe final url should look something like `https://ln.tips/.well-known/lnurlp/0x84e6b3ea699ab309` (depending on the method you chose)\n\n### Other platforms\nCustodial Wallets that provide you with a Lightning address work similarly to this.\nApps like Wallet of Satoshi provide you with a completely random address when you sign up, so a Wallet of Satoshi destructured address would look like: `https://walletofsatoshi.com/.well-known/lnurlp/LawyerCicanery69`\n\n## Setting up Cloudflare Redirects\nAssuming that you have Cloudflare hooked up and ready to go, you're going to want to follow a few steps.\n1. Open your site on the panel\n2. On the sidebar, click the dropdown arrow next to Rules\n3. Click \"Redirect Rules\"\n4. Press the button that says \"Create Rule\"\n5. Configure your new rule\n\t1. Give it a name. ex: \"lnaddr\"\n\t2. Configure the first condition\n\t\t1. Set \"Field\" to `URI Path`\n\t\t2. Set \"Operator\" to `starts with`\n\t\t3. Set \"Value\" to `/.well-known/lnurlp/`\n\t3. Configure the \"then\"\n\t\t1. Set \"Type\" to `Static`\n\t\t2. Set \"URL\" to your destructured Lightning address from earlier\n\t\t3. Set \"Status Code\" to `307`\n\t\t4. Check \"Preserve query string\"\n6. Click Save\n\nAll done! Now whenever someone goes to pay your new Lightning address, it should automatically redirect to your custodial wallet.\nHave fun!","sig":"c813f8a2e9d9b73030ec27bd3053494e9004ca3edd7dbb54eaecdd5c357bf222314799f1aff07876993ebb03e18fe046106a6e99b02c6ae52f0ba31690ce4734"}}