{"id":"e053bd17c3e36ea81d69ae382aefedf0f53188fc4f95e67b21ce35a38dc9a1e2","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745439814,"kind":30023,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745183349"],["d","-dPG4YzeV6cm0A2B2K2yo"],["image","https://image.nostr.build/f708db07b85c002b20b3159b48447d51cbcb0bae0f5717ce6dbc060580c8b35d.jpg"],["title","How to Run Your Own Nostr Relay on Android with Cloudflare Domain"],["summary","Step-by-step guide to running a personal Nostr relay on Android using Citrine and Cloudflare Tunnels. Learn how to set up secure WebSocket connections, manage relay lists, and maintain a reliable private relay with your custom domain."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","nostr"],["t","relay"],["t","citrine"],["t","cloudflare"],["t","tunnel"],["t","outbox"],["p","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","mention"]],"content":"# How to Run Your Own Nostr Relay on Android with Cloudflare Domain\n\n## Prerequisites\n1. Install Citrine on your Android device:\n   - Visit https://github.com/greenart7c3/Citrine/releases\n   - Download the latest release using:\n     - zap.store\n     - Obtainium\n     - F-Droid\n     - Or download the APK directly\n   - **Note:** You may need to enable \"Install from Unknown Sources\" in your Android settings\n\n2. Domain Requirements:\n   - Purchase a domain if you don't have one\n   - Transfer your domain to Cloudflare if it's not already there (for free SSL certificates and cloudflared support)\n\n3. Tools to use:\n   - nak (the nostr army knife):\n     - Download from https://github.com/fiatjaf/nak/releases\n     - Installation steps:\n       - For Linux/macOS:\n         ```bash\n         # Download the appropriate version for your system\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-linux-amd64  # for Linux\n         # or\n         wget https://github.com/fiatjaf/nak/releases/latest/download/nak-darwin-amd64  # for macOS\n         \n         # Make it executable\n         chmod +x nak-*\n         \n         # Move to a directory in your PATH\n         sudo mv nak-* /usr/local/bin/nak\n         ```\n       - For Windows:\n         ```batch\n         # Download the Windows version\n         curl -L -o nak.exe https://github.com/fiatjaf/nak/releases/latest/download/nak-windows-amd64.exe\n         \n         # Move to a directory in your PATH (e.g., C:\\Windows)\n         move nak.exe C:\\Windows\\nak.exe\n         ```\n     - Verify installation:\n       ```bash\n       nak --version\n       ```\n\n## Setting Up Citrine\n1. Open the Citrine app\n2. Start the server\n3. You'll see it running on `ws://127.0.0.1:4869` (local network only)\n4. Go to settings and paste your npub into \"Accept events signed by\" inbox and press the + button. This prevents others from publishing events to your personal relay.\n\n## Installing Required Tools\n1. Install Termux from Google Play Store\n2. Open Termux and run:\n\n```bash\npkg update \u0026\u0026 pkg install wget\nwget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64.deb\ndpkg -i cloudflared-linux-arm64.deb\n```\n\n## Cloudflare Authentication\n1. Run the authentication command:\n```bash\ncloudflared tunnel login\n```\n2. Follow the instructions:\n   - Copy the provided URL to your browser\n   - Log in to your Cloudflare account\n   - If the URL expires, copy it again after logging in\n\n## Creating the Tunnel\n1. Create a new tunnel:\n```bash\ncloudflared tunnel create \u003cTUNNEL_NAME\u003e\n```\n   - Choose any name you prefer for your tunnel\n   - Copy the tunnel ID after creating the tunnel\n\n2. Create and configure the tunnel config:\n```bash\ntouch ~/.cloudflared/config.yml\nnano ~/.cloudflared/config.yml\n```\n\n3. Add this configuration (replace the placeholders with your values):\n```yaml\ntunnel: \u003cTUNNEL_UUID\u003e\ncredentials-file: /data/data/com.termux/files/home/.cloudflared/\u003cTUNNEL_UUID\u003e.json\ningress:\n  - hostname: nostr.yourdomain.com\n    service: ws://localhost:4869\n  - service: http_status:404\n```\n   - **Note:** In nano editor:\n     - `CTRL+O` and Enter to save\n     - `CTRL+X` to exit\n   - **Note:** Check the credentials file path in the logs\n\n4. Validate your configuration:\n```bash\ncloudflared tunnel validate\n```\n\n5. Start the tunnel:\n```bash\ncloudflared tunnel run my-relay\n```\n\n## Preventing Android from Killing the Tunnel\nRun these commands to maintain tunnel stability:\n```bash\ndate \u0026\u0026 apt install termux-tools \u0026\u0026 termux-setup-storage \u0026\u0026 termux-wake-lock\necho \"nameserver 1.1.1.1\" \u003e $PREFIX/etc/resolv.conf\n```\n\n**Tip:** You can open multiple Termux sessions by swiping from the left edge of the screen while keeping your tunnel process running.\n\n## Updating Your Outbox Model Relays\n\nOnce your relay is running and accessible via your domain, you'll want to update your relay list in the Nostr network. This ensures other clients know about your relay and can connect to it.\n\n### Decoding npub (Public Key)\n\nPrivate keys (nsec) and public keys (npub) are encoded in bech32 format, which includes:\n- A prefix (like nsec1, npub1 etc.)\n- The encoded data\n- A checksum\n\nThis format makes keys:\n- Easy to distinguish\n- Hard to copy incorrectly\n\nHowever, most tools require these keys in hexadecimal (hex) format.\n\nTo decode an npub string to its hex format:\n\n```bash\nnak decode nostr:npub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4\n```\n\nChange it with your own npub.\n\n```bash\n{\n  \"pubkey\": \"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8\"\n}\n```\n\nCopy the pubkey value in quotes.\n\n### Create a kind 10002 event with your relay list:\n\n- Include your new relay with write permissions\n- Include other relays you want to read from and write to, omit 3rd parameter to make it both read and write\n\nExample format:\n\n```json\n{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://your-relay-domain.com\", \"write\"],\n    [\"r\", \"wss://eden.nostr.land/\"],\n    [\"r\", \"wss://nos.lol/\"],\n    [\"r\", \"wss://nostr.bitcoiner.social/\"],\n    [\"r\", \"wss://nostr.mom/\"],\n    [\"r\", \"wss://relay.primal.net/\"],\n    [\"r\", \"wss://nostr.wine/\", \"read\"],\n    [\"r\", \"wss://relay.damus.io/\"],\n    [\"r\", \"wss://relay.nostr.band/\"],\n    [\"r\", \"wss://relay.snort.social/\"]\n  ],\n  \"content\": \"\"\n}\n```\n\nSave it to a file called `event.json`\n\n**Note:** Add or remove any relays you want. To check your existing 10002 relays:\n  - Visit https://nostr.band/?q=by%3Anpub1dejts0qlva8mqzjlrxqkc2tmvs2t7elszky5upxaf3jha9qs9m5q605uc4+++kind%3A10002\n  - nostr.band is an indexing service, it probably has your relay list.\n  - Replace `npub1xxx` in the URL with your own npub\n  - Click \"VIEW JSON\" from the menu to see the raw event\n  - Or use the `nak` tool if you know the relays\n    ```bash\n    nak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n    ```\n\n    Replace `\u003cyour-pubkey\u003e` with your public key in hex format (you can get it using `nak decode \u003cyour-npub\u003e`)\n\n2. Sign and publish the event:\n   - Use a Nostr client that supports kind 10002 events\n   - Or use the `nak` command-line tool:\n   ```bash\n   nak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n   ```\n\n**Important Security Notes:**\n1. Never share your nsec (private key) with anyone\n2. Consider using NIP-49 encrypted keys for better security\n3. Never paste your nsec or private key into the terminal. The command will be saved in your shell history, exposing your private key. To clear the command history:\n   - For bash: use `history -c`\n   - For zsh: use `fc -W` to write history to file, then `fc -p` to read it back\n   - Or manually edit your shell history file (e.g., `~/.zsh_history` or `~/.bash_history`)\n4. if you're using `zsh`, use `fc -p` to prevent the next command from being saved to history\n5. Or temporarily disable history before running sensitive commands:\n\n```bash\nunset HISTFILE\nnak key encrypt ...\nset HISTFILE\n```\n\n## How to securely create NIP-49 encypted private key\n\n```bash\n# Read your private key (input will be hidden)\nread -s SECRET \n# Read your password (input will be hidden)\nread -s PASSWORD\n# encrypt command\necho \"$SECRET\" | nak key encrypt \"$PASSWORD\"\n# copy and paste the ncryptsec1 text from the output\nread -s ENCRYPTED\nnak key decrypt \"$ENCRYPTED\"\n# clear variables from memory\nunset SECRET PASSWORD ENCRYPTED\n```\n\nOn a Windows command line, to read from stdin and use the variables in `nak` commands, you can use a combination of `set /p` to read input and then use those variables in your command. Here's an example:\n\n```bash\n@echo off\nset /p \"SECRET=Enter your secret key: \"\nset /p \"PASSWORD=Enter your password: \"\n\necho %SECRET%| nak key encrypt %PASSWORD%\n\n:: Clear the sensitive variables\nset \"SECRET=\"\nset \"PASSWORD=\"\n```\n\nIf your key starts with `ncryptsec1`, the `nak` tool will securely prompt you for a password when using the `--sec` parameter, unless the command is used with a pipe `\u003c \u003e` or `|`. \n\n```bash\nnak event --sec ncryptsec1... wss://relay1.com wss://relay2.com $(cat event.json)\n```\n\n3. Verify the event was published:\n   - Check if your relay list is visible on other relays\n   - Use the `nak` tool to fetch your kind 10002 events:\n```bash\nnak req -k 10002 -a \u003cyour-pubkey\u003e wss://relay1.com wss://relay2.com\n```\n\n4. Testing your relay:\n   - Try connecting to your relay using different Nostr clients\n   - Verify you can both read from and write to your relay\n   - Check if events are being properly stored and retrieved\n   - **Tip:** Use multiple Nostr clients to test different aspects of your relay\n\n**Note:** If anyone in the community has a more efficient method of doing things like updating outbox relays, please share your insights in the comments. Your expertise would be greatly appreciated!\n","sig":"abd9291f7bc17a6d396b33f5a5f8f2dd7e8c6c1fe81b41ef7c28b2132c0af012e2686e453304e78f8d9875b34dd4d6257e475b7debfd39af983cff578144a21c"}
{"id":"e9afc5076f13880a18b57c06600c49aa432a7b3ffa92895620f0aeb55ca3218c","pubkey":"6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","created_at":1745441068,"kind":30023,"tags":[["client","Yakihonne","31990:20986fb83e775d96d188ca5c9df10ce6d613e0eb7e5768a0f0b12b37cdac21b3:1700732875747"],["published_at","1745441068"],["d","WnIpt6igacNI7eH58BjED"],["image","https://image.nostr.build/09593373dc30cafd8174ed57a1cae310c517b17e664b2c59ab5a41d0c1aca3d8.jpg"],["title","How to Import and Export Your Nostr Notes"],["summary","Learn how to import your Nostr notes from public relays and export them into your own relay using the nak CLI tool. This step-by-step guide covers installation, fetching notes, filtering by event types, and uploading to a self-hosted relay—ensuring your content is safe and under your control."],["zap","6e64b83c1f674fb00a5f19816c297b6414bf67f015894e04dd4c657e94102ee8","","100"],["t","Nostr"],["t","nak"],["t","relay"],["t","import"],["t","export"]],"content":"# How to Import and Export Your Nostr Notes\n\nThis guide will help you import your notes from various Nostr relays and export them into your own relay. This is particularly useful when you want to ensure your content is backed up or when you're setting up your own relay.\n\n## Prerequisite\n\nYour own Nostr relay (if you don't have one, check out [Part 1: How to Run Your Own Nostr Relay](https://njump.me/nevent1qqsqd24rtzchjvxh7a9ahe9xs54w04rtlcpgt499uux8kkzgpucuhmqppamhxue69uhkummnw3ezumt0d5q3vamnwvaz7tmjv4kxz7fwwpexjmtpdshxuet5qy28wumn8ghj7un9d3shjtnyv9kh2uewd9hsz9nhwden5te0wfjkccte9ehx7um5wghxyctwvsq35amnwvaz7tmd0ykhyetvv9ujumn0wd68y6t6v5hx6eg8w8a7q))\n\n## Installing nak\n\n`nak` is a command-line tool that helps you interact with Nostr relays. Here's how to install it:\n\n### For Windows Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-windows-amd64.exe`\n3. Rename it to `nak.exe`\n4. Move it to a directory in your PATH or use it from its current location\n\n### For macOS Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-darwin-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-darwin-amd64\n   sudo mv nak-darwin-amd64 /usr/local/bin/nak\n   ```\n\n### For Linux Users\n\n1. Visit the [nak releases page](https://github.com/fiatjaf/nak/releases)\n2. Download the latest `nak-linux-amd64`\n3. Open Terminal and run:\n   ```bash\n   chmod +x nak-linux-amd64\n   sudo mv nak-linux-amd64 /usr/local/bin/nak\n   ```\n\n## Getting Your Public Key in Hex Format\n\nBefore downloading your notes, you need to convert your npub (public key) to its hex format. If you have your npub, run:\n\n```bash\nnak decode npub1YOUR_NPUB_HERE\n```\n\nThis will output your public key in hex format, which you'll need for the next steps.\n\n## Downloading Your Notes\n\nTo download your notes, you'll need your public key in hex format and a list of reliable relays. Here are some popular relays you can use:\n\n- wss://eden.nostr.land/\n- wss://nos.lol/\n- wss://nostr.bitcoiner.social/\n- wss://nostr.mom/\n- wss://relay.primal.net/\n- wss://relay.damus.io/\n- wss://relay.nostr.band/\n- wss://relay.snort.social/\n\n**Note:** You should check your Nostr client's settings to find additional relays where your notes are published. Add these to the list above.\n\n### Important Event Kinds\n\nHere are some important event kinds you might want to filter for:\n\n- `0`: User Metadata (profile information)\n- `1`: Short Text Notes\n- `3`: Follow List\n- `4`: Encrypted Direct Messages\n\nGet the full list from: https://nips.nostr.com/#event-kinds\n\n### Downloading with Event Kind Filters\n\nTo download your notes with specific event kinds, use the `-k` flag followed by the kind number, use multiple if you need to. For example, to download your profile, short notes, follow list, and direct messages:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY -k 0 -k 1 -k 3 -k 4 wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events_filtered.json\n```\n\nOr to download all your content, just don't provide any `k` flag:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY wss://eden.nostr.land/ wss://nos.lol/ wss://nostr.bitcoiner.social/ wss://nostr.mom/ wss://relay.primal.net/ wss://relay.damus.io/ wss://relay.nostr.band/ wss://relay.snort.social/ \u003e events.json\n```\n\nThis will create a file containing all your notes in JSON Lines format.\n\n## Uploading Your Notes to Your Relay\n\nOnce you have your `events.json` or `events_filtered.json` file, you can upload it to your own relay. Replace `YOUR_RELAY` with your relay's WebSocket URL (e.g., `wss://my-relay.nostrize.me`).\n\n```bash\nnak event YOUR_RELAY \u003c events.json\n```\n\n**Important Notes:**\n1. Make sure your relay is running and accessible\n2. The upload process might take some time depending on how many notes you have\n3. You can verify the upload by querying your relay for your notes\n\n## Verifying the Upload\n\nTo verify that your notes were successfully uploaded to your relay, run:\n\n```bash\nnak req -a YOUR_HEX_PUBKEY YOUR_RELAY\n```\n\nThis should return the same notes that were in your `events.json` file.\n\n## Troubleshooting\n\nIf you encounter any issues:\n\n1. Make sure your relay is running and accessible\n2. Check that you're using the correct public key\n3. Verify that the relays in your download list are working\n4. Ensure you have proper permissions to write to your relay\n\n## Next Steps\n\n- Remember to regularly backup your notes to ensure you don't lose any content.\n- If you want to keep your friends' notes as well, add npubs that you want to import into your relay's settings (for Citrine it is \"Accept events signed by\" list), and run the commands for their pubkeys.\n","sig":"31e99a51ab751b4b29aa53e7a760431b7a08263c31c22e2d4c7a1d0b70176a9d1d197fe58c6da910231ee21d5f32d76eade71be43383fa15023e0bb661ed6d04"}
{"id":"e775d764f8ae3088445e4d29b795b9b1de00d2ba34fe8148db82fe47b3534c48","pubkey":"3bf0c63fcb93463407af97a5e5ee64fa883d107ef9e558472c4eb9aaaefa459d","created_at":1745609208,"kind":30023,"tags":[["d","18ff5416"],["title","Redistributing Git with Nostr"],["published_at","1745594880"],["t","nostr"]],"content":"\n# Redistributing Git with Nostr\n\nEvery time someone tries to \"decentralize\" Git -- like many projects tried in the past to do it with BitTorrent, IPFS, ScuttleButt or custom p2p protocols -- there is always a lurking comment: \"but Git is already distributed!\", and then the discussion proceeds to mention some facts about how Git supports multiple remotes and its magic syncing and merging abilities and so on.\n\nTurns out all that is true, Git is indeed all that powerful, and yet GitHub is the big central hub that hosts basically all Git repositories in the giant world of open-source. There are some crazy people that host their stuff elsewhere, but these projects end up not being found by many people, and even when they do they suffer from lack of contributions.\n\nBecause everybody has a GitHub account it's easy to open a pull request to a repository of a project you're using if it's on GitHub (to be fair I think it's very annoying to have to clone the repository, then add it as a remote locally, push to it, then go on the web UI and click to open a pull request, then that cloned repository lurks forever in your profile unless you go through 16 screens to delete it -- but people in general seem to think it's easy).\n\nIt's much harder to do it on some random other server where some project might be hosted, because now you have to add 4 more even more annoying steps: create an account; pick a password; confirm an email address; setup SSH keys for pushing. (And I'm not even mentioning the basic impossibility of offering `push` access to external _unknown_ contributors to people who want to host their own simple homemade Git server.)\n\nAt this point some may argue that we could all have accounts on GitLab, or Codeberg or wherever else, then those steps are removed. Besides not being a practical strategy this pseudo solution misses the point of being decentralized (or distributed, who knows) entirely: it's far from the ideal to force everybody to have the double of account management and SSH setup work in order to have the open-source world controlled by two shady companies instead of one.\n\nWhat we want is to give every person the opportunity to host their own Git server without being ostracized. at the same time we must recognize that most people won't want to host their own servers (not even most open-source programmers!) and give everybody the ability to host their stuff on multi-tenant servers (such as GitHub) too. Importantly, though, if we allow for a random person to have a standalone Git server on a standalone server they host themselves on their wood cabin that also means any new hosting company can show up and start offering Git hosting, with or without new cool features, charging high or low or zero, and be immediately competing against GitHub or GitLab, i.e. we must remove the network-effect centralization pressure.\n\n### External contributions\n\nThe first problem we have to solve is: how can Bob contribute to Alice's repository without having an account on Alice's server?\n\nSourceHut has reminded GitHub users that Git has always had this (for most) arcane `git send-email` command that is the original way to send patches, using an once-open protocol.\n\nTurns out Nostr acts as a quite powerful email replacement and can be used to send text content just like email, therefore patches are a very good fit for Nostr event contents.\n\nOnce you get used to it and the proper UIs (or CLIs) are built sending and applying patches to and from others becomes a much easier flow than the intense clickops mixed with terminal copypasting that is interacting with GitHub (you have to clone the repository on GitHub, then update the remote URL in your local directory, then create a branch and then go back and turn that branch into a Pull Request, it's quite tiresome) that many people already dislike so much they went out of their way to build many GitHub CLI tools just so they could comment on issues and approve pull requests from their terminal.\n\n## Replacing GitHub features\n\nAside from being the \"hub\" that people use to send patches to other people's code (because no one can do the email flow anymore, justifiably), GitHub also has 3 other big features that are not directly related to Git, but that make its network-effect harder to overcome. Luckily Nostr can be used to create a new environment in which these same features are implemented in a more decentralized and healthy way.\n\n### Issues: bug reports, feature requests and general discussions\n\nSince the \"Issues\" GitHub feature is just a bunch of text comments it should be very obvious that Nostr is a perfect fit for it.\n\nI will not even mention the fact that Nostr is much better at threading comments than GitHub (which doesn't do it at all), which can generate much more productive and organized discussions (and you can opt out if you want).\n\n### Search\n\nI use GitHub search all the time to find libraries and projects that may do something that I need, and it returns good results almost always. So if people migrated out to other code hosting providers wouldn't we lose it?\n\nThe fact is that even though we think everybody is on GitHub that is a globalist falsehood. Some projects are not on GitHub, and if we use only GitHub for search those will be missed. So even if we didn't have a Nostr Git alternative it would still be necessary to create a search engine that incorporated GitLab, Codeberg, SourceHut and whatnot.\n\nTurns out on Nostr we can make that quite easy by not forcing anyone to integrate custom APIs or hardcoding Git provider URLs: each repository can make itself available by publishing an \"announcement\" event with a brief description and one or more Git URLs. That makes it easy for a search engine to index them -- and even automatically download the code and index the code (or index just README files or whatever) without a centralized platform ever having to be involved.\n\nThe relays where such announcements will be available play a role, of course, but that isn't a bad role: each announcement can be in multiple relays known for storing \"public good\" projects, some relays may curate only projects known to be very good according to some standards, other relays may allow any kind of garbage, which wouldn't make them good for a search engine to rely upon, but would still be useful in case one knows the exact thing (and from whom) they're searching for (the same is valid for all Nostr content, by the way, and that's where it's censorship-resistance comes from).\n\n### Continuous integration\n\nGitHub Actions are a very hardly subsidized free-compute-for-all-paid-by-Microsoft feature, but one that isn't hard to replace at all. In fact there exists today many companies offering the same kind of service out there -- although they are mostly targeting businesses and not open-source projects, before GitHub Actions was introduced there were also many that were heavily used by open-source projects.\n\nOne problem is that these services are still heavily tied to GitHub today, they require a GitHub login, sometimes BitBucket and GitLab and whatnot, and do not allow one to paste an arbitrary Git server URL, but that isn't a thing that is very hard to change anyway, or to start from scratch. All we need are services that offer the CI/CD flows, perhaps using the same framework of GitHub Actions (although I would prefer to not use that messy garbage), and charge some few satoshis for it.\n\nIt may be the case that all the current services only support the big Git hosting platforms because they rely on their proprietary APIs, most notably the webhooks dispatched when a repository is updated, to trigger the jobs. It doesn't have to be said that Nostr can also solve that problem very easily.\n","sig":"87caf0e3a5cc69e3f3ef3e60ba7167a0f3e88bbed36bee8365b08a291e6429f050b58d26263d7c0d7b2dbaf6a92881e4126f29051cf8a76f46bc83dd82f60dd6"}
